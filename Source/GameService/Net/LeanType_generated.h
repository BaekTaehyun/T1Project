// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_LEANTYPE_LEANTYPE_H_
#define FLATBUFFERS_GENERATED_LEANTYPE_LEANTYPE_H_

#include "flatbuffers/flatbuffers.h"

namespace LeanType {

///- MoveType -----
enum MoveType {
  MoveType_MT_NONE = 0,
  MoveType_MT_WALKING = 1,
  MoveType_MT_WALKING_STRAIGHT = 2,
  MoveType_MT_STOP = 3,
  MoveType_MT_ANGLE = 4,
  MoveType_MT_EVENT_WALKING = 5,
  MoveType_MT_EVENT_WALKING_STRAIGHT = 6,
  MoveType_MT_EVENT_STOP = 7,
  MoveType_MT_EVENT_ANGLE = 8,
  MoveType_MT_MAX = 9,
  MoveType_MIN = MoveType_MT_NONE,
  MoveType_MAX = MoveType_MT_MAX
};

inline MoveType (&EnumValuesMoveType())[10] {
  static MoveType values[] = {
    MoveType_MT_NONE,
    MoveType_MT_WALKING,
    MoveType_MT_WALKING_STRAIGHT,
    MoveType_MT_STOP,
    MoveType_MT_ANGLE,
    MoveType_MT_EVENT_WALKING,
    MoveType_MT_EVENT_WALKING_STRAIGHT,
    MoveType_MT_EVENT_STOP,
    MoveType_MT_EVENT_ANGLE,
    MoveType_MT_MAX
  };
  return values;
}

inline const char **EnumNamesMoveType() {
  static const char *names[] = {
    "MT_NONE",
    "MT_WALKING",
    "MT_WALKING_STRAIGHT",
    "MT_STOP",
    "MT_ANGLE",
    "MT_EVENT_WALKING",
    "MT_EVENT_WALKING_STRAIGHT",
    "MT_EVENT_STOP",
    "MT_EVENT_ANGLE",
    "MT_MAX",
    nullptr
  };
  return names;
}

inline const char *EnumNameMoveType(MoveType e) {
  const size_t index = static_cast<int>(e);
  return EnumNamesMoveType()[index];
}

enum ReactionType {
  ReactionType_RT_NONE = 0,
  ReactionType_RT_HIT = 1,
  ReactionType_RT_KNOCK_BACK = 2,
  ReactionType_RT_KNOCK_DOWN = 3,
  ReactionType_RT_STUNNED = 4,
  ReactionType_RT_AIRBONE = 5,
  ReactionType_RT_BE_DRAGGED = 6,
  ReactionType_RT_GROGGY = 7,
  ReactionType_MIN = ReactionType_RT_NONE,
  ReactionType_MAX = ReactionType_RT_GROGGY
};

inline ReactionType (&EnumValuesReactionType())[8] {
  static ReactionType values[] = {
    ReactionType_RT_NONE,
    ReactionType_RT_HIT,
    ReactionType_RT_KNOCK_BACK,
    ReactionType_RT_KNOCK_DOWN,
    ReactionType_RT_STUNNED,
    ReactionType_RT_AIRBONE,
    ReactionType_RT_BE_DRAGGED,
    ReactionType_RT_GROGGY
  };
  return values;
}

inline const char **EnumNamesReactionType() {
  static const char *names[] = {
    "RT_NONE",
    "RT_HIT",
    "RT_KNOCK_BACK",
    "RT_KNOCK_DOWN",
    "RT_STUNNED",
    "RT_AIRBONE",
    "RT_BE_DRAGGED",
    "RT_GROGGY",
    nullptr
  };
  return names;
}

inline const char *EnumNameReactionType(ReactionType e) {
  const size_t index = static_cast<int>(e);
  return EnumNamesReactionType()[index];
}

enum SkillSlotCode {
  SkillSlotCode_SSC_NONE = 0,
  SkillSlotCode_SSC_A = 1,
  SkillSlotCode_SSC_B = 2,
  SkillSlotCode_SSC_C = 3,
  SkillSlotCode_SSC_D = 4,
  SkillSlotCode_SSC_E = 5,
  SkillSlotCode_SSC_F = 6,
  SkillSlotCode_SSC_G = 7,
  SkillSlotCode_SSC_H = 8,
  SkillSlotCode_SSC_I = 9,
  SkillSlotCode_SSC_MAX = 10,
  SkillSlotCode_MIN = SkillSlotCode_SSC_NONE,
  SkillSlotCode_MAX = SkillSlotCode_SSC_MAX
};

inline SkillSlotCode (&EnumValuesSkillSlotCode())[11] {
  static SkillSlotCode values[] = {
    SkillSlotCode_SSC_NONE,
    SkillSlotCode_SSC_A,
    SkillSlotCode_SSC_B,
    SkillSlotCode_SSC_C,
    SkillSlotCode_SSC_D,
    SkillSlotCode_SSC_E,
    SkillSlotCode_SSC_F,
    SkillSlotCode_SSC_G,
    SkillSlotCode_SSC_H,
    SkillSlotCode_SSC_I,
    SkillSlotCode_SSC_MAX
  };
  return values;
}

inline const char **EnumNamesSkillSlotCode() {
  static const char *names[] = {
    "SSC_NONE",
    "SSC_A",
    "SSC_B",
    "SSC_C",
    "SSC_D",
    "SSC_E",
    "SSC_F",
    "SSC_G",
    "SSC_H",
    "SSC_I",
    "SSC_MAX",
    nullptr
  };
  return names;
}

inline const char *EnumNameSkillSlotCode(SkillSlotCode e) {
  const size_t index = static_cast<int>(e);
  return EnumNamesSkillSlotCode()[index];
}

enum SkillSlotIndex {
  SkillSlotIndex_SSI_NORMAL_1 = 0,
  SkillSlotIndex_SSI_NORMAL_2 = 1,
  SkillSlotIndex_SSI_JOB_F = 2,
  SkillSlotIndex_SSI_SPECIAL_F_1 = 3,
  SkillSlotIndex_SSI_SPECIAL_F_2 = 4,
  SkillSlotIndex_SSI_JOB_B = 7,
  SkillSlotIndex_SSI_SPECIAL_B_1 = 8,
  SkillSlotIndex_SSI_SPECIAL_B_2 = 9,
  SkillSlotIndex_MIN = SkillSlotIndex_SSI_NORMAL_1,
  SkillSlotIndex_MAX = SkillSlotIndex_SSI_SPECIAL_B_2
};

inline SkillSlotIndex (&EnumValuesSkillSlotIndex())[8] {
  static SkillSlotIndex values[] = {
    SkillSlotIndex_SSI_NORMAL_1,
    SkillSlotIndex_SSI_NORMAL_2,
    SkillSlotIndex_SSI_JOB_F,
    SkillSlotIndex_SSI_SPECIAL_F_1,
    SkillSlotIndex_SSI_SPECIAL_F_2,
    SkillSlotIndex_SSI_JOB_B,
    SkillSlotIndex_SSI_SPECIAL_B_1,
    SkillSlotIndex_SSI_SPECIAL_B_2
  };
  return values;
}

inline const char **EnumNamesSkillSlotIndex() {
  static const char *names[] = {
    "SSI_NORMAL_1",
    "SSI_NORMAL_2",
    "SSI_JOB_F",
    "SSI_SPECIAL_F_1",
    "SSI_SPECIAL_F_2",
    "",
    "",
    "SSI_JOB_B",
    "SSI_SPECIAL_B_1",
    "SSI_SPECIAL_B_2",
    nullptr
  };
  return names;
}

inline const char *EnumNameSkillSlotIndex(SkillSlotIndex e) {
  const size_t index = static_cast<int>(e);
  return EnumNamesSkillSlotIndex()[index];
}

enum BuffCondition {
  BuffCondition_BF_COND_NONE = 0,
  BuffCondition_BF_COND_NORMAL = 1,
  BuffCondition_BF_COND_SKILL = 2,
  BuffCondition_MIN = BuffCondition_BF_COND_NONE,
  BuffCondition_MAX = BuffCondition_BF_COND_SKILL
};

inline BuffCondition (&EnumValuesBuffCondition())[3] {
  static BuffCondition values[] = {
    BuffCondition_BF_COND_NONE,
    BuffCondition_BF_COND_NORMAL,
    BuffCondition_BF_COND_SKILL
  };
  return values;
}

inline const char **EnumNamesBuffCondition() {
  static const char *names[] = {
    "BF_COND_NONE",
    "BF_COND_NORMAL",
    "BF_COND_SKILL",
    nullptr
  };
  return names;
}

inline const char *EnumNameBuffCondition(BuffCondition e) {
  const size_t index = static_cast<int>(e);
  return EnumNamesBuffCondition()[index];
}

enum PresetType {
  PresetType_PRESET_TYPE_0 = 0,
  PresetType_PRESET_TYPE_1 = 1,
  PresetType_PRESET_TYPE_2 = 2,
  PresetType_PRESET_TYPE_3 = 3,
  PresetType_MIN = PresetType_PRESET_TYPE_0,
  PresetType_MAX = PresetType_PRESET_TYPE_3
};

inline PresetType (&EnumValuesPresetType())[4] {
  static PresetType values[] = {
    PresetType_PRESET_TYPE_0,
    PresetType_PRESET_TYPE_1,
    PresetType_PRESET_TYPE_2,
    PresetType_PRESET_TYPE_3
  };
  return values;
}

inline const char **EnumNamesPresetType() {
  static const char *names[] = {
    "PRESET_TYPE_0",
    "PRESET_TYPE_1",
    "PRESET_TYPE_2",
    "PRESET_TYPE_3",
    nullptr
  };
  return names;
}

inline const char *EnumNamePresetType(PresetType e) {
  const size_t index = static_cast<int>(e);
  return EnumNamesPresetType()[index];
}

///- 이벤트 기여도 측정 타입
enum EventContributionType {
  EventContributionType_EVENT_CONTRIBUTION_TYPE_NONE = 0,
  EventContributionType_EVENT_CONTRIBUTION_TYPE_GATHERING = 1,
  EventContributionType_EVENT_CONTRIBUTION_TYPE_BATTLE = 2,
  EventContributionType_MIN = EventContributionType_EVENT_CONTRIBUTION_TYPE_NONE,
  EventContributionType_MAX = EventContributionType_EVENT_CONTRIBUTION_TYPE_BATTLE
};

inline EventContributionType (&EnumValuesEventContributionType())[3] {
  static EventContributionType values[] = {
    EventContributionType_EVENT_CONTRIBUTION_TYPE_NONE,
    EventContributionType_EVENT_CONTRIBUTION_TYPE_GATHERING,
    EventContributionType_EVENT_CONTRIBUTION_TYPE_BATTLE
  };
  return values;
}

inline const char **EnumNamesEventContributionType() {
  static const char *names[] = {
    "EVENT_CONTRIBUTION_TYPE_NONE",
    "EVENT_CONTRIBUTION_TYPE_GATHERING",
    "EVENT_CONTRIBUTION_TYPE_BATTLE",
    nullptr
  };
  return names;
}

inline const char *EnumNameEventContributionType(EventContributionType e) {
  const size_t index = static_cast<int>(e);
  return EnumNamesEventContributionType()[index];
}

///- 이벤트 체크 시스템 -----
enum EventCheckType {
  EventCheckType_EVENT_CHECK_TYPE_ALWAYS_TRUE = 1,
  EventCheckType_EVENT_CHECK_TYPE_IN_EVENT_AREA = 2,
  EventCheckType_EVENT_CHECK_TYPE_GATHERING_COUNT = 3,
  EventCheckType_EVENT_CHECK_TYPE_TASK_ELAPSED_START_TIME = 4,
  EventCheckType_EVENT_CHECK_TYPE_KILL_NPC_COUNT = 5,
  EventCheckType_EVENT_CHECK_TYPE_ALL_KILL_NPC = 6,
  EventCheckType_EVENT_CHECK_TYPE_EVENT_ELAPSED_START_TIME = 7,
  EventCheckType_EVENT_CHECK_TYPE_PHASE_ELAPSED_START_TIME = 8,
  EventCheckType_EVENT_CHECK_TYPE_EXPIRED_EVENT = 9,
  EventCheckType_EVENT_CHECK_TYPE_READY_EVENT = 10,
  EventCheckType_EVENT_CHECK_TYPE_START_EVENT = 11,
  EventCheckType_EVENT_CHECK_TYPE_EVENTSTATE_SUCCESS = 12,
  EventCheckType_EVENT_CHECK_TYPE_EVENTSTATE_FAIL = 13,
  EventCheckType_EVENT_CHECK_TYPE_EVENTSTATE_RUNNING = 14,
  EventCheckType_EVENT_CHECK_TYPE_RECV_FINISH_DIRECTION = 15,
  EventCheckType_EVENT_CHECK_TYPE_GATHERING_TEMP4 = 16,
  EventCheckType_EVENT_CHECK_TYPE_SPAWN1 = 17,
  EventCheckType_EVENT_CHECK_TYPE_SPAWN2 = 18,
  EventCheckType_EVENT_CHECK_TYPE_PARTICIPATED_IN_EVENT = 19,
  EventCheckType_EVENT_CHECK_TYPE_LIFE_OF_TARGET = 20,
  EventCheckType_EVENT_CHECK_TYPE_NUMBERS_OF_TARGETS = 21,
  EventCheckType_EVENT_CHECK_TYPE_INVESTIGATE_PC_CLASS = 22,
  EventCheckType_EVENT_CHECK_TYPE_CHANGED_INTERACTEE_STATE = 23,
  EventCheckType_EVENT_CHECK_TYPE_FINISHED_DEFAULT_PATROL = 24,
  EventCheckType_EVENT_CHECK_TYPE_INTERACTION_ACTION_COMPLETE = 25,
  EventCheckType_EVENT_CHECK_TYPE_ALL_DEAD_PC = 26,
  EventCheckType_EVENT_CHECK_TYPE_INFINITE_TOWER_ALL_KILL_NPC = 27,
  EventCheckType_EVENT_CHECK_TYPE_EXPIRED_EVENT_BY_FLAG = 28,
  EventCheckType_EVENT_CHECK_TYPE_DEAD_AND_LIVE = 29,
  EventCheckType_EVENT_CHECK_TYPE_MAX = 30,
  EventCheckType_MIN = EventCheckType_EVENT_CHECK_TYPE_ALWAYS_TRUE,
  EventCheckType_MAX = EventCheckType_EVENT_CHECK_TYPE_MAX
};

inline EventCheckType (&EnumValuesEventCheckType())[30] {
  static EventCheckType values[] = {
    EventCheckType_EVENT_CHECK_TYPE_ALWAYS_TRUE,
    EventCheckType_EVENT_CHECK_TYPE_IN_EVENT_AREA,
    EventCheckType_EVENT_CHECK_TYPE_GATHERING_COUNT,
    EventCheckType_EVENT_CHECK_TYPE_TASK_ELAPSED_START_TIME,
    EventCheckType_EVENT_CHECK_TYPE_KILL_NPC_COUNT,
    EventCheckType_EVENT_CHECK_TYPE_ALL_KILL_NPC,
    EventCheckType_EVENT_CHECK_TYPE_EVENT_ELAPSED_START_TIME,
    EventCheckType_EVENT_CHECK_TYPE_PHASE_ELAPSED_START_TIME,
    EventCheckType_EVENT_CHECK_TYPE_EXPIRED_EVENT,
    EventCheckType_EVENT_CHECK_TYPE_READY_EVENT,
    EventCheckType_EVENT_CHECK_TYPE_START_EVENT,
    EventCheckType_EVENT_CHECK_TYPE_EVENTSTATE_SUCCESS,
    EventCheckType_EVENT_CHECK_TYPE_EVENTSTATE_FAIL,
    EventCheckType_EVENT_CHECK_TYPE_EVENTSTATE_RUNNING,
    EventCheckType_EVENT_CHECK_TYPE_RECV_FINISH_DIRECTION,
    EventCheckType_EVENT_CHECK_TYPE_GATHERING_TEMP4,
    EventCheckType_EVENT_CHECK_TYPE_SPAWN1,
    EventCheckType_EVENT_CHECK_TYPE_SPAWN2,
    EventCheckType_EVENT_CHECK_TYPE_PARTICIPATED_IN_EVENT,
    EventCheckType_EVENT_CHECK_TYPE_LIFE_OF_TARGET,
    EventCheckType_EVENT_CHECK_TYPE_NUMBERS_OF_TARGETS,
    EventCheckType_EVENT_CHECK_TYPE_INVESTIGATE_PC_CLASS,
    EventCheckType_EVENT_CHECK_TYPE_CHANGED_INTERACTEE_STATE,
    EventCheckType_EVENT_CHECK_TYPE_FINISHED_DEFAULT_PATROL,
    EventCheckType_EVENT_CHECK_TYPE_INTERACTION_ACTION_COMPLETE,
    EventCheckType_EVENT_CHECK_TYPE_ALL_DEAD_PC,
    EventCheckType_EVENT_CHECK_TYPE_INFINITE_TOWER_ALL_KILL_NPC,
    EventCheckType_EVENT_CHECK_TYPE_EXPIRED_EVENT_BY_FLAG,
    EventCheckType_EVENT_CHECK_TYPE_DEAD_AND_LIVE,
    EventCheckType_EVENT_CHECK_TYPE_MAX
  };
  return values;
}

inline const char **EnumNamesEventCheckType() {
  static const char *names[] = {
    "EVENT_CHECK_TYPE_ALWAYS_TRUE",
    "EVENT_CHECK_TYPE_IN_EVENT_AREA",
    "EVENT_CHECK_TYPE_GATHERING_COUNT",
    "EVENT_CHECK_TYPE_TASK_ELAPSED_START_TIME",
    "EVENT_CHECK_TYPE_KILL_NPC_COUNT",
    "EVENT_CHECK_TYPE_ALL_KILL_NPC",
    "EVENT_CHECK_TYPE_EVENT_ELAPSED_START_TIME",
    "EVENT_CHECK_TYPE_PHASE_ELAPSED_START_TIME",
    "EVENT_CHECK_TYPE_EXPIRED_EVENT",
    "EVENT_CHECK_TYPE_READY_EVENT",
    "EVENT_CHECK_TYPE_START_EVENT",
    "EVENT_CHECK_TYPE_EVENTSTATE_SUCCESS",
    "EVENT_CHECK_TYPE_EVENTSTATE_FAIL",
    "EVENT_CHECK_TYPE_EVENTSTATE_RUNNING",
    "EVENT_CHECK_TYPE_RECV_FINISH_DIRECTION",
    "EVENT_CHECK_TYPE_GATHERING_TEMP4",
    "EVENT_CHECK_TYPE_SPAWN1",
    "EVENT_CHECK_TYPE_SPAWN2",
    "EVENT_CHECK_TYPE_PARTICIPATED_IN_EVENT",
    "EVENT_CHECK_TYPE_LIFE_OF_TARGET",
    "EVENT_CHECK_TYPE_NUMBERS_OF_TARGETS",
    "EVENT_CHECK_TYPE_INVESTIGATE_PC_CLASS",
    "EVENT_CHECK_TYPE_CHANGED_INTERACTEE_STATE",
    "EVENT_CHECK_TYPE_FINISHED_DEFAULT_PATROL",
    "EVENT_CHECK_TYPE_INTERACTION_ACTION_COMPLETE",
    "EVENT_CHECK_TYPE_ALL_DEAD_PC",
    "EVENT_CHECK_TYPE_INFINITE_TOWER_ALL_KILL_NPC",
    "EVENT_CHECK_TYPE_EXPIRED_EVENT_BY_FLAG",
    "EVENT_CHECK_TYPE_DEAD_AND_LIVE",
    "EVENT_CHECK_TYPE_MAX",
    nullptr
  };
  return names;
}

inline const char *EnumNameEventCheckType(EventCheckType e) {
  const size_t index = static_cast<int>(e) - static_cast<int>(EventCheckType_EVENT_CHECK_TYPE_ALWAYS_TRUE);
  return EnumNamesEventCheckType()[index];
}

enum EventReactionType {
  EventReactionType_EVENT_REACTION_TYPE_DEBUG_MESSAGE = 1,
  EventReactionType_EVENT_REACTION_TYPE_CHANGE_PHASE = 2,
  EventReactionType_EVENT_REACTION_TYPE_SPAWN_NPC = 3,
  EventReactionType_EVENT_REACTION_TYPE_SPAWN_GATHERING = 4,
  EventReactionType_EVENT_REACTION_TYPE_SPAWN_NPC_TERRITORY = 5,
  EventReactionType_EVENT_REACTION_TYPE_SPAWN_GATHERING_TERRITORY = 6,
  EventReactionType_EVENT_REACTION_TYPE_DESPAWN_NPC = 7,
  EventReactionType_EVENT_REACTION_TYPE_DESPAWN_GATHERING = 8,
  EventReactionType_EVENT_REACTION_TYPE_DESPAWN_NPC_TERRITORY = 9,
  EventReactionType_EVENT_REACTION_TYPE_DESPAWN_GATHERING_TERRITORY = 10,
  EventReactionType_EVENT_REACTION_TYPE_ADD_BUFF = 11,
  EventReactionType_EVENT_REACTION_TYPE_REMOVE_BUFF = 12,
  EventReactionType_EVENT_REACTION_TYPE_DEMAND_PC_INFO = 13,
  EventReactionType_EVENT_REACTION_TYPE_UPDATE_STATE = 14,
  EventReactionType_EVENT_REACTION_TYPE_KILL_NPC = 15,
  EventReactionType_EVENT_REACTION_TYPE_KILL_NPC_TERRITORY = 16,
  EventReactionType_EVENT_REACTION_TYPE_DIRECTION_TYPE4 = 17,
  EventReactionType_EVENT_REACTION_TYPE_USE_NPC_SKILL = 18,
  EventReactionType_EVENT_REACTION_TYPE_DEACTIVATE_FIELD_TERRITORY = 19,
  EventReactionType_EVENT_REACTION_TYPE_ACTIVATE_FIELD_TERRITORY = 20,
  EventReactionType_EVENT_REACTION_TYPE_DEACTIVATE_FIELD_TERRITORY_GROUP = 21,
  EventReactionType_EVENT_REACTION_TYPE_ACTIVATE_FIELD_TERRITORY_GROUP = 22,
  EventReactionType_EVENT_REACTION_TYPE_CHANGE_WORK_OBJECT_STATE = 23,
  EventReactionType_EVENT_REACTION_TYPE_CHANGE_INTERACTION_STATE = 24,
  EventReactionType_EVENT_REACTION_TYPE_USE_PORTAL = 25,
  EventReactionType_EVENT_REACTION_TYPE_ACTIVE_ARTIFACT = 26,
  EventReactionType_EVENT_REACTION_TYPE_INFINITE_TOWER_SPAWN = 27,
  EventReactionType_EVENT_REACTION_TYPE_INFINITE_TOWER_DESPAWN = 28,
  EventReactionType_EVENT_REACTION_TYPE_ORDER_START_PATROL = 29,
  EventReactionType_EVENT_REACTION_TYPE_START_SPAWN_NEST_TERRITORY = 30,
  EventReactionType_EVENT_REACTION_TYPE_END_SPAWN_NEST_TERRITORY = 31,
  EventReactionType_EVENT_REACTION_TYPE_DESPAWN_NEST_TERRITORY = 32,
  EventReactionType_EVENT_REACTION_TYPE_GIVE_REWARD = 33,
  EventReactionType_EVENT_REACTION_TYPE_SET_CLEAR_TIME = 34,
  EventReactionType_EVENT_REACTION_TYPE_RESET_SKILL_COOLTIME = 35,
  EventReactionType_EVENT_REACTION_TYPE_SPAWN_UPC = 36,
  EventReactionType_EVENT_REACTION_TYPE_DESPAWN_UPC = 37,
  EventReactionType_EVENT_REACTION_TYPE_ACTIVE_CONTRIBUTE = 38,
  EventReactionType_EVENT_REACTION_TYPE_ACTIVE_END_PROCESS = 39,
  EventReactionType_EVENT_REACTION_TYPE_ACTIVE_VS_HUD = 40,
  EventReactionType_EVENT_REACTION_TYPE_DEACTIVE_VS_HUD = 41,
  EventReactionType_EVENT_REACTION_TYPE_MAX = 42,
  EventReactionType_MIN = EventReactionType_EVENT_REACTION_TYPE_DEBUG_MESSAGE,
  EventReactionType_MAX = EventReactionType_EVENT_REACTION_TYPE_MAX
};

inline EventReactionType (&EnumValuesEventReactionType())[42] {
  static EventReactionType values[] = {
    EventReactionType_EVENT_REACTION_TYPE_DEBUG_MESSAGE,
    EventReactionType_EVENT_REACTION_TYPE_CHANGE_PHASE,
    EventReactionType_EVENT_REACTION_TYPE_SPAWN_NPC,
    EventReactionType_EVENT_REACTION_TYPE_SPAWN_GATHERING,
    EventReactionType_EVENT_REACTION_TYPE_SPAWN_NPC_TERRITORY,
    EventReactionType_EVENT_REACTION_TYPE_SPAWN_GATHERING_TERRITORY,
    EventReactionType_EVENT_REACTION_TYPE_DESPAWN_NPC,
    EventReactionType_EVENT_REACTION_TYPE_DESPAWN_GATHERING,
    EventReactionType_EVENT_REACTION_TYPE_DESPAWN_NPC_TERRITORY,
    EventReactionType_EVENT_REACTION_TYPE_DESPAWN_GATHERING_TERRITORY,
    EventReactionType_EVENT_REACTION_TYPE_ADD_BUFF,
    EventReactionType_EVENT_REACTION_TYPE_REMOVE_BUFF,
    EventReactionType_EVENT_REACTION_TYPE_DEMAND_PC_INFO,
    EventReactionType_EVENT_REACTION_TYPE_UPDATE_STATE,
    EventReactionType_EVENT_REACTION_TYPE_KILL_NPC,
    EventReactionType_EVENT_REACTION_TYPE_KILL_NPC_TERRITORY,
    EventReactionType_EVENT_REACTION_TYPE_DIRECTION_TYPE4,
    EventReactionType_EVENT_REACTION_TYPE_USE_NPC_SKILL,
    EventReactionType_EVENT_REACTION_TYPE_DEACTIVATE_FIELD_TERRITORY,
    EventReactionType_EVENT_REACTION_TYPE_ACTIVATE_FIELD_TERRITORY,
    EventReactionType_EVENT_REACTION_TYPE_DEACTIVATE_FIELD_TERRITORY_GROUP,
    EventReactionType_EVENT_REACTION_TYPE_ACTIVATE_FIELD_TERRITORY_GROUP,
    EventReactionType_EVENT_REACTION_TYPE_CHANGE_WORK_OBJECT_STATE,
    EventReactionType_EVENT_REACTION_TYPE_CHANGE_INTERACTION_STATE,
    EventReactionType_EVENT_REACTION_TYPE_USE_PORTAL,
    EventReactionType_EVENT_REACTION_TYPE_ACTIVE_ARTIFACT,
    EventReactionType_EVENT_REACTION_TYPE_INFINITE_TOWER_SPAWN,
    EventReactionType_EVENT_REACTION_TYPE_INFINITE_TOWER_DESPAWN,
    EventReactionType_EVENT_REACTION_TYPE_ORDER_START_PATROL,
    EventReactionType_EVENT_REACTION_TYPE_START_SPAWN_NEST_TERRITORY,
    EventReactionType_EVENT_REACTION_TYPE_END_SPAWN_NEST_TERRITORY,
    EventReactionType_EVENT_REACTION_TYPE_DESPAWN_NEST_TERRITORY,
    EventReactionType_EVENT_REACTION_TYPE_GIVE_REWARD,
    EventReactionType_EVENT_REACTION_TYPE_SET_CLEAR_TIME,
    EventReactionType_EVENT_REACTION_TYPE_RESET_SKILL_COOLTIME,
    EventReactionType_EVENT_REACTION_TYPE_SPAWN_UPC,
    EventReactionType_EVENT_REACTION_TYPE_DESPAWN_UPC,
    EventReactionType_EVENT_REACTION_TYPE_ACTIVE_CONTRIBUTE,
    EventReactionType_EVENT_REACTION_TYPE_ACTIVE_END_PROCESS,
    EventReactionType_EVENT_REACTION_TYPE_ACTIVE_VS_HUD,
    EventReactionType_EVENT_REACTION_TYPE_DEACTIVE_VS_HUD,
    EventReactionType_EVENT_REACTION_TYPE_MAX
  };
  return values;
}

inline const char **EnumNamesEventReactionType() {
  static const char *names[] = {
    "EVENT_REACTION_TYPE_DEBUG_MESSAGE",
    "EVENT_REACTION_TYPE_CHANGE_PHASE",
    "EVENT_REACTION_TYPE_SPAWN_NPC",
    "EVENT_REACTION_TYPE_SPAWN_GATHERING",
    "EVENT_REACTION_TYPE_SPAWN_NPC_TERRITORY",
    "EVENT_REACTION_TYPE_SPAWN_GATHERING_TERRITORY",
    "EVENT_REACTION_TYPE_DESPAWN_NPC",
    "EVENT_REACTION_TYPE_DESPAWN_GATHERING",
    "EVENT_REACTION_TYPE_DESPAWN_NPC_TERRITORY",
    "EVENT_REACTION_TYPE_DESPAWN_GATHERING_TERRITORY",
    "EVENT_REACTION_TYPE_ADD_BUFF",
    "EVENT_REACTION_TYPE_REMOVE_BUFF",
    "EVENT_REACTION_TYPE_DEMAND_PC_INFO",
    "EVENT_REACTION_TYPE_UPDATE_STATE",
    "EVENT_REACTION_TYPE_KILL_NPC",
    "EVENT_REACTION_TYPE_KILL_NPC_TERRITORY",
    "EVENT_REACTION_TYPE_DIRECTION_TYPE4",
    "EVENT_REACTION_TYPE_USE_NPC_SKILL",
    "EVENT_REACTION_TYPE_DEACTIVATE_FIELD_TERRITORY",
    "EVENT_REACTION_TYPE_ACTIVATE_FIELD_TERRITORY",
    "EVENT_REACTION_TYPE_DEACTIVATE_FIELD_TERRITORY_GROUP",
    "EVENT_REACTION_TYPE_ACTIVATE_FIELD_TERRITORY_GROUP",
    "EVENT_REACTION_TYPE_CHANGE_WORK_OBJECT_STATE",
    "EVENT_REACTION_TYPE_CHANGE_INTERACTION_STATE",
    "EVENT_REACTION_TYPE_USE_PORTAL",
    "EVENT_REACTION_TYPE_ACTIVE_ARTIFACT",
    "EVENT_REACTION_TYPE_INFINITE_TOWER_SPAWN",
    "EVENT_REACTION_TYPE_INFINITE_TOWER_DESPAWN",
    "EVENT_REACTION_TYPE_ORDER_START_PATROL",
    "EVENT_REACTION_TYPE_START_SPAWN_NEST_TERRITORY",
    "EVENT_REACTION_TYPE_END_SPAWN_NEST_TERRITORY",
    "EVENT_REACTION_TYPE_DESPAWN_NEST_TERRITORY",
    "EVENT_REACTION_TYPE_GIVE_REWARD",
    "EVENT_REACTION_TYPE_SET_CLEAR_TIME",
    "EVENT_REACTION_TYPE_RESET_SKILL_COOLTIME",
    "EVENT_REACTION_TYPE_SPAWN_UPC",
    "EVENT_REACTION_TYPE_DESPAWN_UPC",
    "EVENT_REACTION_TYPE_ACTIVE_CONTRIBUTE",
    "EVENT_REACTION_TYPE_ACTIVE_END_PROCESS",
    "EVENT_REACTION_TYPE_ACTIVE_VS_HUD",
    "EVENT_REACTION_TYPE_DEACTIVE_VS_HUD",
    "EVENT_REACTION_TYPE_MAX",
    nullptr
  };
  return names;
}

inline const char *EnumNameEventReactionType(EventReactionType e) {
  const size_t index = static_cast<int>(e) - static_cast<int>(EventReactionType_EVENT_REACTION_TYPE_DEBUG_MESSAGE);
  return EnumNamesEventReactionType()[index];
}

enum EventTargetType {
  EventTargetType_EVENT_TARGET_TYPE_EVENT_AREA_ID = 1,
  EventTargetType_EVENT_TARGET_TYPE_SPAWN_AREA_ID = 2,
  EventTargetType_EVENT_TARGET_TYPE_EVNET_ID = 3,
  EventTargetType_EVENT_TARGET_TYPE_EVNET_SET_ID = 4,
  EventTargetType_EVENT_TARGET_TYPE_PC = 5,
  EventTargetType_EVENT_TARGET_TYPE_NPC_SPAWN_ID = 6,
  EventTargetType_EVENT_TARGET_TYPE_NPC_CREATURE_ID = 7,
  EventTargetType_EVENT_TARGET_TYPE_PHASE_ID = 8,
  EventTargetType_EVENT_TARGET_TYPE_EVENT_TASK_ID = 9,
  EventTargetType_EVENT_TARGET_TYPE_EVENT_PARTICIPANT = 10,
  EventTargetType_EVENT_TARGET_TYPE_SCENE_PARTICIPANT = 11,
  EventTargetType_EVENT_TARGET_TYPE_PC_VIEW_RANGE = 12,
  EventTargetType_EVENT_TARGET_TYPE_ITEM = 13,
  EventTargetType_EVENT_TARGET_TYPE_SPEECH_ID = 14,
  EventTargetType_EVENT_TARGET_TYPE_NPC_SQUAD_ID = 15,
  EventTargetType_EVENT_TARGET_TYPE_MAX = 16,
  EventTargetType_MIN = EventTargetType_EVENT_TARGET_TYPE_EVENT_AREA_ID,
  EventTargetType_MAX = EventTargetType_EVENT_TARGET_TYPE_MAX
};

inline EventTargetType (&EnumValuesEventTargetType())[16] {
  static EventTargetType values[] = {
    EventTargetType_EVENT_TARGET_TYPE_EVENT_AREA_ID,
    EventTargetType_EVENT_TARGET_TYPE_SPAWN_AREA_ID,
    EventTargetType_EVENT_TARGET_TYPE_EVNET_ID,
    EventTargetType_EVENT_TARGET_TYPE_EVNET_SET_ID,
    EventTargetType_EVENT_TARGET_TYPE_PC,
    EventTargetType_EVENT_TARGET_TYPE_NPC_SPAWN_ID,
    EventTargetType_EVENT_TARGET_TYPE_NPC_CREATURE_ID,
    EventTargetType_EVENT_TARGET_TYPE_PHASE_ID,
    EventTargetType_EVENT_TARGET_TYPE_EVENT_TASK_ID,
    EventTargetType_EVENT_TARGET_TYPE_EVENT_PARTICIPANT,
    EventTargetType_EVENT_TARGET_TYPE_SCENE_PARTICIPANT,
    EventTargetType_EVENT_TARGET_TYPE_PC_VIEW_RANGE,
    EventTargetType_EVENT_TARGET_TYPE_ITEM,
    EventTargetType_EVENT_TARGET_TYPE_SPEECH_ID,
    EventTargetType_EVENT_TARGET_TYPE_NPC_SQUAD_ID,
    EventTargetType_EVENT_TARGET_TYPE_MAX
  };
  return values;
}

inline const char **EnumNamesEventTargetType() {
  static const char *names[] = {
    "EVENT_TARGET_TYPE_EVENT_AREA_ID",
    "EVENT_TARGET_TYPE_SPAWN_AREA_ID",
    "EVENT_TARGET_TYPE_EVNET_ID",
    "EVENT_TARGET_TYPE_EVNET_SET_ID",
    "EVENT_TARGET_TYPE_PC",
    "EVENT_TARGET_TYPE_NPC_SPAWN_ID",
    "EVENT_TARGET_TYPE_NPC_CREATURE_ID",
    "EVENT_TARGET_TYPE_PHASE_ID",
    "EVENT_TARGET_TYPE_EVENT_TASK_ID",
    "EVENT_TARGET_TYPE_EVENT_PARTICIPANT",
    "EVENT_TARGET_TYPE_SCENE_PARTICIPANT",
    "EVENT_TARGET_TYPE_PC_VIEW_RANGE",
    "EVENT_TARGET_TYPE_ITEM",
    "EVENT_TARGET_TYPE_SPEECH_ID",
    "EVENT_TARGET_TYPE_NPC_SQUAD_ID",
    "EVENT_TARGET_TYPE_MAX",
    nullptr
  };
  return names;
}

inline const char *EnumNameEventTargetType(EventTargetType e) {
  const size_t index = static_cast<int>(e) - static_cast<int>(EventTargetType_EVENT_TARGET_TYPE_EVENT_AREA_ID);
  return EnumNamesEventTargetType()[index];
}

enum EventOperationType {
  EventOperationType_EVENT_OPERATION_TYPE_AND = 0,
  EventOperationType_EVENT_OPERATION_TYPE_OR = 1,
  EventOperationType_EVENT_OPERATION_TYPE_MAX = 2,
  EventOperationType_MIN = EventOperationType_EVENT_OPERATION_TYPE_AND,
  EventOperationType_MAX = EventOperationType_EVENT_OPERATION_TYPE_MAX
};

inline EventOperationType (&EnumValuesEventOperationType())[3] {
  static EventOperationType values[] = {
    EventOperationType_EVENT_OPERATION_TYPE_AND,
    EventOperationType_EVENT_OPERATION_TYPE_OR,
    EventOperationType_EVENT_OPERATION_TYPE_MAX
  };
  return values;
}

inline const char **EnumNamesEventOperationType() {
  static const char *names[] = {
    "EVENT_OPERATION_TYPE_AND",
    "EVENT_OPERATION_TYPE_OR",
    "EVENT_OPERATION_TYPE_MAX",
    nullptr
  };
  return names;
}

inline const char *EnumNameEventOperationType(EventOperationType e) {
  const size_t index = static_cast<int>(e);
  return EnumNamesEventOperationType()[index];
}

enum EventOrderingType {
  EventOrderingType_EVENT_ORDER_FIRST = 1,
  EventOrderingType_EVENT_ORDER_SECOND = 2,
  EventOrderingType_EVENT_ORDER_THIRD = 3,
  EventOrderingType_EVENT_ORDER_FOURTH = 4,
  EventOrderingType_EVENT_ORDER_FITTH = 5,
  EventOrderingType_EVENT_ORDER_SIXTH = 6,
  EventOrderingType_EVENT_ORDER_SEVENTH = 7,
  EventOrderingType_EVENT_ORDER_EIGHTH = 8,
  EventOrderingType_EVENT_ORDER_NINTH = 9,
  EventOrderingType_EVENT_ORDER_TENTH = 10,
  EventOrderingType_EVENT_ORDER_ELEVENTH = 11,
  EventOrderingType_EVENT_ORDER_TWELFH = 12,
  EventOrderingType_EVENT_ORDER_GLOBAL = 13,
  EventOrderingType_EVENT_ORDER_MAX = 14,
  EventOrderingType_MIN = EventOrderingType_EVENT_ORDER_FIRST,
  EventOrderingType_MAX = EventOrderingType_EVENT_ORDER_MAX
};

inline EventOrderingType (&EnumValuesEventOrderingType())[14] {
  static EventOrderingType values[] = {
    EventOrderingType_EVENT_ORDER_FIRST,
    EventOrderingType_EVENT_ORDER_SECOND,
    EventOrderingType_EVENT_ORDER_THIRD,
    EventOrderingType_EVENT_ORDER_FOURTH,
    EventOrderingType_EVENT_ORDER_FITTH,
    EventOrderingType_EVENT_ORDER_SIXTH,
    EventOrderingType_EVENT_ORDER_SEVENTH,
    EventOrderingType_EVENT_ORDER_EIGHTH,
    EventOrderingType_EVENT_ORDER_NINTH,
    EventOrderingType_EVENT_ORDER_TENTH,
    EventOrderingType_EVENT_ORDER_ELEVENTH,
    EventOrderingType_EVENT_ORDER_TWELFH,
    EventOrderingType_EVENT_ORDER_GLOBAL,
    EventOrderingType_EVENT_ORDER_MAX
  };
  return values;
}

inline const char **EnumNamesEventOrderingType() {
  static const char *names[] = {
    "EVENT_ORDER_FIRST",
    "EVENT_ORDER_SECOND",
    "EVENT_ORDER_THIRD",
    "EVENT_ORDER_FOURTH",
    "EVENT_ORDER_FITTH",
    "EVENT_ORDER_SIXTH",
    "EVENT_ORDER_SEVENTH",
    "EVENT_ORDER_EIGHTH",
    "EVENT_ORDER_NINTH",
    "EVENT_ORDER_TENTH",
    "EVENT_ORDER_ELEVENTH",
    "EVENT_ORDER_TWELFH",
    "EVENT_ORDER_GLOBAL",
    "EVENT_ORDER_MAX",
    nullptr
  };
  return names;
}

inline const char *EnumNameEventOrderingType(EventOrderingType e) {
  const size_t index = static_cast<int>(e) - static_cast<int>(EventOrderingType_EVENT_ORDER_FIRST);
  return EnumNamesEventOrderingType()[index];
}

enum EventSetDayType {
  EventSetDayType_EVENTSET_DAY_TYPE_NONE = 0,
  EventSetDayType_EVENTSET_DAY_TYPE_DAY = 1,
  EventSetDayType_EVENTSET_DAY_TYPE_NIGH = 2,
  EventSetDayType_EVENTSET_DAY_TYPE_MAX = 3,
  EventSetDayType_MIN = EventSetDayType_EVENTSET_DAY_TYPE_NONE,
  EventSetDayType_MAX = EventSetDayType_EVENTSET_DAY_TYPE_MAX
};

inline EventSetDayType (&EnumValuesEventSetDayType())[4] {
  static EventSetDayType values[] = {
    EventSetDayType_EVENTSET_DAY_TYPE_NONE,
    EventSetDayType_EVENTSET_DAY_TYPE_DAY,
    EventSetDayType_EVENTSET_DAY_TYPE_NIGH,
    EventSetDayType_EVENTSET_DAY_TYPE_MAX
  };
  return values;
}

inline const char **EnumNamesEventSetDayType() {
  static const char *names[] = {
    "EVENTSET_DAY_TYPE_NONE",
    "EVENTSET_DAY_TYPE_DAY",
    "EVENTSET_DAY_TYPE_NIGH",
    "EVENTSET_DAY_TYPE_MAX",
    nullptr
  };
  return names;
}

inline const char *EnumNameEventSetDayType(EventSetDayType e) {
  const size_t index = static_cast<int>(e);
  return EnumNamesEventSetDayType()[index];
}

enum EventSetScheduleType {
  EventSetScheduleType_EVENTSET_SCHEDULE_TYPE_NONE = 0,
  EventSetScheduleType_EVENTSET_SCHEDULE_TYPE_DAILY_KEEP = 1,
  EventSetScheduleType_EVENTSET_SCHEDULE_TYPE_DAILY_INTERVAL = 2,
  EventSetScheduleType_EVENTSET_SCHEDULE_TYPE_WEEKLY_KEEP = 3,
  EventSetScheduleType_EVENTSET_SCHEDULE_TYPE_WEEKLY_INTERVAL = 4,
  EventSetScheduleType_MIN = EventSetScheduleType_EVENTSET_SCHEDULE_TYPE_NONE,
  EventSetScheduleType_MAX = EventSetScheduleType_EVENTSET_SCHEDULE_TYPE_WEEKLY_INTERVAL
};

inline EventSetScheduleType (&EnumValuesEventSetScheduleType())[5] {
  static EventSetScheduleType values[] = {
    EventSetScheduleType_EVENTSET_SCHEDULE_TYPE_NONE,
    EventSetScheduleType_EVENTSET_SCHEDULE_TYPE_DAILY_KEEP,
    EventSetScheduleType_EVENTSET_SCHEDULE_TYPE_DAILY_INTERVAL,
    EventSetScheduleType_EVENTSET_SCHEDULE_TYPE_WEEKLY_KEEP,
    EventSetScheduleType_EVENTSET_SCHEDULE_TYPE_WEEKLY_INTERVAL
  };
  return values;
}

inline const char **EnumNamesEventSetScheduleType() {
  static const char *names[] = {
    "EVENTSET_SCHEDULE_TYPE_NONE",
    "EVENTSET_SCHEDULE_TYPE_DAILY_KEEP",
    "EVENTSET_SCHEDULE_TYPE_DAILY_INTERVAL",
    "EVENTSET_SCHEDULE_TYPE_WEEKLY_KEEP",
    "EVENTSET_SCHEDULE_TYPE_WEEKLY_INTERVAL",
    nullptr
  };
  return names;
}

inline const char *EnumNameEventSetScheduleType(EventSetScheduleType e) {
  const size_t index = static_cast<int>(e);
  return EnumNamesEventSetScheduleType()[index];
}

enum EventSetRepeatWeekType {
  EventSetRepeatWeekType_EVENTSET_REPEAT_WEEK_TYPE_DAILY = 0,
  EventSetRepeatWeekType_EVENTSET_REPEAT_WEEK_TYPE_SUN = 1,
  EventSetRepeatWeekType_EVENTSET_REPEAT_WEEK_TYPE_MON = 2,
  EventSetRepeatWeekType_EVENTSET_REPEAT_WEEK_TYPE_THU = 3,
  EventSetRepeatWeekType_EVENTSET_REPEAT_WEEK_TYPE_WED = 4,
  EventSetRepeatWeekType_EVENTSET_REPEAT_WEEK_TYPE_THR = 5,
  EventSetRepeatWeekType_EVENTSET_REPEAT_WEEK_TYPE_FRI = 6,
  EventSetRepeatWeekType_EVENTSET_REPEAT_WEEK_TYPE_SAT = 7,
  EventSetRepeatWeekType_MIN = EventSetRepeatWeekType_EVENTSET_REPEAT_WEEK_TYPE_DAILY,
  EventSetRepeatWeekType_MAX = EventSetRepeatWeekType_EVENTSET_REPEAT_WEEK_TYPE_SAT
};

inline EventSetRepeatWeekType (&EnumValuesEventSetRepeatWeekType())[8] {
  static EventSetRepeatWeekType values[] = {
    EventSetRepeatWeekType_EVENTSET_REPEAT_WEEK_TYPE_DAILY,
    EventSetRepeatWeekType_EVENTSET_REPEAT_WEEK_TYPE_SUN,
    EventSetRepeatWeekType_EVENTSET_REPEAT_WEEK_TYPE_MON,
    EventSetRepeatWeekType_EVENTSET_REPEAT_WEEK_TYPE_THU,
    EventSetRepeatWeekType_EVENTSET_REPEAT_WEEK_TYPE_WED,
    EventSetRepeatWeekType_EVENTSET_REPEAT_WEEK_TYPE_THR,
    EventSetRepeatWeekType_EVENTSET_REPEAT_WEEK_TYPE_FRI,
    EventSetRepeatWeekType_EVENTSET_REPEAT_WEEK_TYPE_SAT
  };
  return values;
}

inline const char **EnumNamesEventSetRepeatWeekType() {
  static const char *names[] = {
    "EVENTSET_REPEAT_WEEK_TYPE_DAILY",
    "EVENTSET_REPEAT_WEEK_TYPE_SUN",
    "EVENTSET_REPEAT_WEEK_TYPE_MON",
    "EVENTSET_REPEAT_WEEK_TYPE_THU",
    "EVENTSET_REPEAT_WEEK_TYPE_WED",
    "EVENTSET_REPEAT_WEEK_TYPE_THR",
    "EVENTSET_REPEAT_WEEK_TYPE_FRI",
    "EVENTSET_REPEAT_WEEK_TYPE_SAT",
    nullptr
  };
  return names;
}

inline const char *EnumNameEventSetRepeatWeekType(EventSetRepeatWeekType e) {
  const size_t index = static_cast<int>(e);
  return EnumNamesEventSetRepeatWeekType()[index];
}

enum PatrolType {
  PatrolType_PT_DFAULT = 1,
  PatrolType_PT_FORWARD_REVERSE = 2,
  PatrolType_PT_ROUND_TRIP = 3,
  PatrolType_PT_MAX = 4,
  PatrolType_MIN = PatrolType_PT_DFAULT,
  PatrolType_MAX = PatrolType_PT_MAX
};

inline PatrolType (&EnumValuesPatrolType())[4] {
  static PatrolType values[] = {
    PatrolType_PT_DFAULT,
    PatrolType_PT_FORWARD_REVERSE,
    PatrolType_PT_ROUND_TRIP,
    PatrolType_PT_MAX
  };
  return values;
}

inline const char **EnumNamesPatrolType() {
  static const char *names[] = {
    "PT_DFAULT",
    "PT_FORWARD_REVERSE",
    "PT_ROUND_TRIP",
    "PT_MAX",
    nullptr
  };
  return names;
}

inline const char *EnumNamePatrolType(PatrolType e) {
  const size_t index = static_cast<int>(e) - static_cast<int>(PatrolType_PT_DFAULT);
  return EnumNamesPatrolType()[index];
}

enum PatrolReturnType {
  PatrolReturnType_PRT_GOTO_SRC = 0,
  PatrolReturnType_PRT_MAX = 1,
  PatrolReturnType_MIN = PatrolReturnType_PRT_GOTO_SRC,
  PatrolReturnType_MAX = PatrolReturnType_PRT_MAX
};

inline PatrolReturnType (&EnumValuesPatrolReturnType())[2] {
  static PatrolReturnType values[] = {
    PatrolReturnType_PRT_GOTO_SRC,
    PatrolReturnType_PRT_MAX
  };
  return values;
}

inline const char **EnumNamesPatrolReturnType() {
  static const char *names[] = {
    "PRT_GOTO_SRC",
    "PRT_MAX",
    nullptr
  };
  return names;
}

inline const char *EnumNamePatrolReturnType(PatrolReturnType e) {
  const size_t index = static_cast<int>(e);
  return EnumNamesPatrolReturnType()[index];
}

enum PatrolActionType {
  PatrolActionType_PAT_SPEAK_BUBBLE = 0,
  PatrolActionType_PAT_USING_SKILL = 1,
  PatrolActionType_PAT_MAX = 2,
  PatrolActionType_MIN = PatrolActionType_PAT_SPEAK_BUBBLE,
  PatrolActionType_MAX = PatrolActionType_PAT_MAX
};

inline PatrolActionType (&EnumValuesPatrolActionType())[3] {
  static PatrolActionType values[] = {
    PatrolActionType_PAT_SPEAK_BUBBLE,
    PatrolActionType_PAT_USING_SKILL,
    PatrolActionType_PAT_MAX
  };
  return values;
}

inline const char **EnumNamesPatrolActionType() {
  static const char *names[] = {
    "PAT_SPEAK_BUBBLE",
    "PAT_USING_SKILL",
    "PAT_MAX",
    nullptr
  };
  return names;
}

inline const char *EnumNamePatrolActionType(PatrolActionType e) {
  const size_t index = static_cast<int>(e);
  return EnumNamesPatrolActionType()[index];
}

/// 아이템 동작 유효성 채크 타입
enum ItemValidationType {
  /// 착,탈,포,처분(판매),거래
  ItemValidationType_IVT_EQUIP = 0,
  ItemValidationType_IVT_UNEQUIP = 1,
  ItemValidationType_IVT_INSERT = 2,
  ItemValidationType_IVT_DELETE = 3,
  ItemValidationType_IVT_SELL = 4,
  ItemValidationType_IVT_TRADE = 5  /// 분해,강화,승급
,
  ItemValidationType_IVT_DISENCHANT = 6,
  ItemValidationType_IVT_ENCHANT = 7,
  ItemValidationType_IVT_UPGRADE = 8  /// 성장
  /// - progression(성장)
  ///   (1) promotion(진급)
  ///   (2) advancement(전직)
,
  ItemValidationType_IVT_PROGRESSION = 9,
  ItemValidationType_MIN = ItemValidationType_IVT_EQUIP,
  ItemValidationType_MAX = ItemValidationType_IVT_PROGRESSION
};

inline ItemValidationType (&EnumValuesItemValidationType())[10] {
  static ItemValidationType values[] = {
    ItemValidationType_IVT_EQUIP,
    ItemValidationType_IVT_UNEQUIP,
    ItemValidationType_IVT_INSERT,
    ItemValidationType_IVT_DELETE,
    ItemValidationType_IVT_SELL,
    ItemValidationType_IVT_TRADE,
    ItemValidationType_IVT_DISENCHANT,
    ItemValidationType_IVT_ENCHANT,
    ItemValidationType_IVT_UPGRADE,
    ItemValidationType_IVT_PROGRESSION
  };
  return values;
}

inline const char **EnumNamesItemValidationType() {
  static const char *names[] = {
    "IVT_EQUIP",
    "IVT_UNEQUIP",
    "IVT_INSERT",
    "IVT_DELETE",
    "IVT_SELL",
    "IVT_TRADE",
    "IVT_DISENCHANT",
    "IVT_ENCHANT",
    "IVT_UPGRADE",
    "IVT_PROGRESSION",
    nullptr
  };
  return names;
}

inline const char *EnumNameItemValidationType(ItemValidationType e) {
  const size_t index = static_cast<int>(e);
  return EnumNamesItemValidationType()[index];
}

enum CreatureScaleType {
  CreatureScaleType_CST_NONE = 0,
  CreatureScaleType_CST_NORMAL = 1,
  CreatureScaleType_CST_BOSS = 2,
  CreatureScaleType_CST_PLAYER = 3,
  CreatureScaleType_MIN = CreatureScaleType_CST_NONE,
  CreatureScaleType_MAX = CreatureScaleType_CST_PLAYER
};

inline CreatureScaleType (&EnumValuesCreatureScaleType())[4] {
  static CreatureScaleType values[] = {
    CreatureScaleType_CST_NONE,
    CreatureScaleType_CST_NORMAL,
    CreatureScaleType_CST_BOSS,
    CreatureScaleType_CST_PLAYER
  };
  return values;
}

inline const char **EnumNamesCreatureScaleType() {
  static const char *names[] = {
    "CST_NONE",
    "CST_NORMAL",
    "CST_BOSS",
    "CST_PLAYER",
    nullptr
  };
  return names;
}

inline const char *EnumNameCreatureScaleType(CreatureScaleType e) {
  const size_t index = static_cast<int>(e);
  return EnumNamesCreatureScaleType()[index];
}

enum AbnormalType {
  AbnormalType_ABNORMAL_MOVE = 0,
  AbnormalType_ABNORMAL_NORMAL_ATTACK = 1,
  AbnormalType_ABNORMAL_SKILL = 2,
  AbnormalType_ABNORMAL_ITEM = 3,
  AbnormalType_ABNORMAL_MAX = 4,
  AbnormalType_MIN = AbnormalType_ABNORMAL_MOVE,
  AbnormalType_MAX = AbnormalType_ABNORMAL_MAX
};

inline AbnormalType (&EnumValuesAbnormalType())[5] {
  static AbnormalType values[] = {
    AbnormalType_ABNORMAL_MOVE,
    AbnormalType_ABNORMAL_NORMAL_ATTACK,
    AbnormalType_ABNORMAL_SKILL,
    AbnormalType_ABNORMAL_ITEM,
    AbnormalType_ABNORMAL_MAX
  };
  return values;
}

inline const char **EnumNamesAbnormalType() {
  static const char *names[] = {
    "ABNORMAL_MOVE",
    "ABNORMAL_NORMAL_ATTACK",
    "ABNORMAL_SKILL",
    "ABNORMAL_ITEM",
    "ABNORMAL_MAX",
    nullptr
  };
  return names;
}

inline const char *EnumNameAbnormalType(AbnormalType e) {
  const size_t index = static_cast<int>(e);
  return EnumNamesAbnormalType()[index];
}

enum EventCounterShowUIStartType {
  EventCounterShowUIStartType_SHOW_UI_START_EVENT = 0,
  EventCounterShowUIStartType_SHOW_UI_START_PHASE = 1,
  EventCounterShowUIStartType_SHOW_UI_START_EVENT_ORDER = 2,
  EventCounterShowUIStartType_SHOW_UI_START_MAX = 3,
  EventCounterShowUIStartType_MIN = EventCounterShowUIStartType_SHOW_UI_START_EVENT,
  EventCounterShowUIStartType_MAX = EventCounterShowUIStartType_SHOW_UI_START_MAX
};

inline EventCounterShowUIStartType (&EnumValuesEventCounterShowUIStartType())[4] {
  static EventCounterShowUIStartType values[] = {
    EventCounterShowUIStartType_SHOW_UI_START_EVENT,
    EventCounterShowUIStartType_SHOW_UI_START_PHASE,
    EventCounterShowUIStartType_SHOW_UI_START_EVENT_ORDER,
    EventCounterShowUIStartType_SHOW_UI_START_MAX
  };
  return values;
}

inline const char **EnumNamesEventCounterShowUIStartType() {
  static const char *names[] = {
    "SHOW_UI_START_EVENT",
    "SHOW_UI_START_PHASE",
    "SHOW_UI_START_EVENT_ORDER",
    "SHOW_UI_START_MAX",
    nullptr
  };
  return names;
}

inline const char *EnumNameEventCounterShowUIStartType(EventCounterShowUIStartType e) {
  const size_t index = static_cast<int>(e);
  return EnumNamesEventCounterShowUIStartType()[index];
}

enum EventCounterShowUIEndType {
  EventCounterShowUIEndType_SHOW_UI_END_EVENT = 0,
  EventCounterShowUIEndType_SHOW_UI_END_PHASE = 1,
  EventCounterShowUIEndType_SHOW_UI_END_EVENT_ORDER = 2,
  EventCounterShowUIEndType_SHOW_UI_END_MAX = 3,
  EventCounterShowUIEndType_MIN = EventCounterShowUIEndType_SHOW_UI_END_EVENT,
  EventCounterShowUIEndType_MAX = EventCounterShowUIEndType_SHOW_UI_END_MAX
};

inline EventCounterShowUIEndType (&EnumValuesEventCounterShowUIEndType())[4] {
  static EventCounterShowUIEndType values[] = {
    EventCounterShowUIEndType_SHOW_UI_END_EVENT,
    EventCounterShowUIEndType_SHOW_UI_END_PHASE,
    EventCounterShowUIEndType_SHOW_UI_END_EVENT_ORDER,
    EventCounterShowUIEndType_SHOW_UI_END_MAX
  };
  return values;
}

inline const char **EnumNamesEventCounterShowUIEndType() {
  static const char *names[] = {
    "SHOW_UI_END_EVENT",
    "SHOW_UI_END_PHASE",
    "SHOW_UI_END_EVENT_ORDER",
    "SHOW_UI_END_MAX",
    nullptr
  };
  return names;
}

inline const char *EnumNameEventCounterShowUIEndType(EventCounterShowUIEndType e) {
  const size_t index = static_cast<int>(e);
  return EnumNamesEventCounterShowUIEndType()[index];
}

enum EventCounterStateType {
  EventCounterStateType_EVENT_COUNTER_STATE_TYPE_ACTIVE = 0,
  EventCounterStateType_EVENT_COUNTER_STATE_TYPE_FINISH = 1,
  EventCounterStateType_EVENT_COUNTER_STATE_TYPE_TERMINATE = 2,
  EventCounterStateType_EVENT_COUNTER_STATE_TYPE_MAX = 3,
  EventCounterStateType_MIN = EventCounterStateType_EVENT_COUNTER_STATE_TYPE_ACTIVE,
  EventCounterStateType_MAX = EventCounterStateType_EVENT_COUNTER_STATE_TYPE_MAX
};

inline EventCounterStateType (&EnumValuesEventCounterStateType())[4] {
  static EventCounterStateType values[] = {
    EventCounterStateType_EVENT_COUNTER_STATE_TYPE_ACTIVE,
    EventCounterStateType_EVENT_COUNTER_STATE_TYPE_FINISH,
    EventCounterStateType_EVENT_COUNTER_STATE_TYPE_TERMINATE,
    EventCounterStateType_EVENT_COUNTER_STATE_TYPE_MAX
  };
  return values;
}

inline const char **EnumNamesEventCounterStateType() {
  static const char *names[] = {
    "EVENT_COUNTER_STATE_TYPE_ACTIVE",
    "EVENT_COUNTER_STATE_TYPE_FINISH",
    "EVENT_COUNTER_STATE_TYPE_TERMINATE",
    "EVENT_COUNTER_STATE_TYPE_MAX",
    nullptr
  };
  return names;
}

inline const char *EnumNameEventCounterStateType(EventCounterStateType e) {
  const size_t index = static_cast<int>(e);
  return EnumNamesEventCounterStateType()[index];
}

enum ChangedEventContextType {
  ChangedEventContextType_CHANGED_EVENT_PHASE_ID = 0,
  ChangedEventContextType_CHANGED_EVENT_TASK_ID = 1,
  ChangedEventContextType_CHANGED_EVENT_ORDER = 2,
  ChangedEventContextType_MIN = ChangedEventContextType_CHANGED_EVENT_PHASE_ID,
  ChangedEventContextType_MAX = ChangedEventContextType_CHANGED_EVENT_ORDER
};

inline ChangedEventContextType (&EnumValuesChangedEventContextType())[3] {
  static ChangedEventContextType values[] = {
    ChangedEventContextType_CHANGED_EVENT_PHASE_ID,
    ChangedEventContextType_CHANGED_EVENT_TASK_ID,
    ChangedEventContextType_CHANGED_EVENT_ORDER
  };
  return values;
}

inline const char **EnumNamesChangedEventContextType() {
  static const char *names[] = {
    "CHANGED_EVENT_PHASE_ID",
    "CHANGED_EVENT_TASK_ID",
    "CHANGED_EVENT_ORDER",
    nullptr
  };
  return names;
}

inline const char *EnumNameChangedEventContextType(ChangedEventContextType e) {
  const size_t index = static_cast<int>(e);
  return EnumNamesChangedEventContextType()[index];
}

enum CostReasonType {
  CostReasonType_CRT_UNKNOWN = 0,
  CostReasonType_CRT_CREATE_PC = 1,
  CostReasonType_CRT_DISENCHANT = 2,
  CostReasonType_CRT_ENCHANT = 3,
  CostReasonType_CRT_UPGRADE = 4,
  CostReasonType_CRT_ADMIN_COMMAND = 5,
  CostReasonType_CRT_SELL = 6,
  CostReasonType_CRT_MOVE = 7,
  CostReasonType_CRT_PRISM = 8,
  CostReasonType_CRT_REWARD = 9,
  CostReasonType_CRT_MAIL = 10,
  CostReasonType_CRT_CRAFT = 11,
  CostReasonType_CRT_SHOP = 12,
  CostReasonType_CRT_USE = 13,
  CostReasonType_CRT_TRADE = 14,
  CostReasonType_CRT_DAILY_RECHARGE = 15,
  CostReasonType_CRT_TRADE_CANCEL = 16,
  CostReasonType_CRT_ELIXIR_ENCHANT = 17,
  CostReasonType_CRT_TERRASTONE_ENCHANT = 18,
  CostReasonType_CRT_RESEARCH_ENCHANT = 19,
  CostReasonType_CRT_GUARDIAN_STAR_ENCHANT = 20,
  CostReasonType_CRT_PASSIVE_SKILL_ENCHANT = 21,
  CostReasonType_CRT_MAINSTREAM = 22,
  CostReasonType_CRT_DIMENSION_CRYSTAL_EXCHANGE = 23,
  CostReasonType_CRT_FUSION = 24,
  CostReasonType_CRT_GUILD_CREST = 25,
  CostReasonType_CRT_SKILL_GROWTH_UP = 26,
  CostReasonType_CRT_DIMENSION_CRYSTAL_INSERT = 27,
  CostReasonType_CRT_DIMENSION_CRYSTAL_REMOVE = 28,
  CostReasonType_CRT_ENTER_FIELD = 29,
  CostReasonType_CRT_GUILD_ATTEND = 30,
  CostReasonType_CRT_GUILD_CREATE = 31,
  CostReasonType_CRT_GUILD_DONATE = 32,
  CostReasonType_CRT_REVIVE = 33,
  CostReasonType_CRT_BUY_GUILD_BUFF = 34,
  CostReasonType_CRT_EFFECT = 35,
  CostReasonType_CRT_SKILL_POINT_RESET = 36,
  CostReasonType_CRT_FISHING_SHOP = 37,
  CostReasonType_CRT_MONSTER_KILL = 38,
  CostReasonType_CRT_INTERACTION = 39,
  CostReasonType_CRT_RESURRECTION = 40,
  CostReasonType_CRT_BATTLE_FIELD_PLAYER_KILL = 41,
  CostReasonType_CRT_TIER_SHOP = 42,
  CostReasonType_CRT_REFUND = 43,
  CostReasonType_CRT_LIVE_EVENT_NPC_DROP = 44,
  CostReasonType_CRT_LIVE_EVENT = 45,
  CostReasonType_CRT_LIVE_EVENT_TRADE = 46,
  CostReasonType_CRT_LIVE_EVENT_LIMIT_SELL_SHOP = 47,
  CostReasonType_CRT_LIVE_EVENT_DIA_BUY = 48,
  CostReasonType_CRT_LIVE_EVENT_DIA_SPENT = 49,
  CostReasonType_CRT_LIVE_EVENT_ATTENTION = 50,
  CostReasonType_CRT_STORAGE_EXPANSION = 51,
  CostReasonType_CRT_BRAWL_ENHANCE = 52,
  CostReasonType_CRT_BRAWL_PLAYER_KILL = 53,
  CostReasonType_CRT_BRAWL_INTERACTION = 54,
  CostReasonType_CRT_TRANSCEND = 55,
  CostReasonType_CRT_PET_MAKE_FROM_ITEM = 56,
  CostReasonType_CRT_PET_FEED = 57,
  CostReasonType_CRT_PET_FUSION = 58,
  CostReasonType_CRT_PET_SUMMON = 59,
  CostReasonType_CRT_PET_SUMMON_CANCEL = 60,
  CostReasonType_CRT_PET_SUPPORT = 61,
  CostReasonType_CRT_PET_SUPPORT_CANCEL = 62,
  CostReasonType_CRT_PET_STATE_SAVE = 63,
  CostReasonType_CRT_PET_HATCHERY_SUMMON = 64,
  CostReasonType_CRT_PET_HATCHERY_HATCH = 65,
  CostReasonType_CRT_PET_ALTAR_DOMINATE = 66,
  CostReasonType_CRT_PET_ALTAR_ACTIVE_SKILL_LEVEL_UP = 67,
  CostReasonType_CRT_FOLLOWER_MISSION_COMPLETE = 68,
  CostReasonType_CRT_LIVE_EVENT_LEVELUP = 69,
  CostReasonType_CRT_COSTUME_INHERIT = 70,
  CostReasonType_CRT_CRYSTAL_CHANGE = 71,
  CostReasonType_CRT_PLAYER_KILL = 72,
  CostReasonType_CRT_PLAYER_ASSIST = 73,
  CostReasonType_CRT_PLAYER_REVIVAL = 74,
  CostReasonType_MIN = CostReasonType_CRT_UNKNOWN,
  CostReasonType_MAX = CostReasonType_CRT_PLAYER_REVIVAL
};

inline CostReasonType (&EnumValuesCostReasonType())[75] {
  static CostReasonType values[] = {
    CostReasonType_CRT_UNKNOWN,
    CostReasonType_CRT_CREATE_PC,
    CostReasonType_CRT_DISENCHANT,
    CostReasonType_CRT_ENCHANT,
    CostReasonType_CRT_UPGRADE,
    CostReasonType_CRT_ADMIN_COMMAND,
    CostReasonType_CRT_SELL,
    CostReasonType_CRT_MOVE,
    CostReasonType_CRT_PRISM,
    CostReasonType_CRT_REWARD,
    CostReasonType_CRT_MAIL,
    CostReasonType_CRT_CRAFT,
    CostReasonType_CRT_SHOP,
    CostReasonType_CRT_USE,
    CostReasonType_CRT_TRADE,
    CostReasonType_CRT_DAILY_RECHARGE,
    CostReasonType_CRT_TRADE_CANCEL,
    CostReasonType_CRT_ELIXIR_ENCHANT,
    CostReasonType_CRT_TERRASTONE_ENCHANT,
    CostReasonType_CRT_RESEARCH_ENCHANT,
    CostReasonType_CRT_GUARDIAN_STAR_ENCHANT,
    CostReasonType_CRT_PASSIVE_SKILL_ENCHANT,
    CostReasonType_CRT_MAINSTREAM,
    CostReasonType_CRT_DIMENSION_CRYSTAL_EXCHANGE,
    CostReasonType_CRT_FUSION,
    CostReasonType_CRT_GUILD_CREST,
    CostReasonType_CRT_SKILL_GROWTH_UP,
    CostReasonType_CRT_DIMENSION_CRYSTAL_INSERT,
    CostReasonType_CRT_DIMENSION_CRYSTAL_REMOVE,
    CostReasonType_CRT_ENTER_FIELD,
    CostReasonType_CRT_GUILD_ATTEND,
    CostReasonType_CRT_GUILD_CREATE,
    CostReasonType_CRT_GUILD_DONATE,
    CostReasonType_CRT_REVIVE,
    CostReasonType_CRT_BUY_GUILD_BUFF,
    CostReasonType_CRT_EFFECT,
    CostReasonType_CRT_SKILL_POINT_RESET,
    CostReasonType_CRT_FISHING_SHOP,
    CostReasonType_CRT_MONSTER_KILL,
    CostReasonType_CRT_INTERACTION,
    CostReasonType_CRT_RESURRECTION,
    CostReasonType_CRT_BATTLE_FIELD_PLAYER_KILL,
    CostReasonType_CRT_TIER_SHOP,
    CostReasonType_CRT_REFUND,
    CostReasonType_CRT_LIVE_EVENT_NPC_DROP,
    CostReasonType_CRT_LIVE_EVENT,
    CostReasonType_CRT_LIVE_EVENT_TRADE,
    CostReasonType_CRT_LIVE_EVENT_LIMIT_SELL_SHOP,
    CostReasonType_CRT_LIVE_EVENT_DIA_BUY,
    CostReasonType_CRT_LIVE_EVENT_DIA_SPENT,
    CostReasonType_CRT_LIVE_EVENT_ATTENTION,
    CostReasonType_CRT_STORAGE_EXPANSION,
    CostReasonType_CRT_BRAWL_ENHANCE,
    CostReasonType_CRT_BRAWL_PLAYER_KILL,
    CostReasonType_CRT_BRAWL_INTERACTION,
    CostReasonType_CRT_TRANSCEND,
    CostReasonType_CRT_PET_MAKE_FROM_ITEM,
    CostReasonType_CRT_PET_FEED,
    CostReasonType_CRT_PET_FUSION,
    CostReasonType_CRT_PET_SUMMON,
    CostReasonType_CRT_PET_SUMMON_CANCEL,
    CostReasonType_CRT_PET_SUPPORT,
    CostReasonType_CRT_PET_SUPPORT_CANCEL,
    CostReasonType_CRT_PET_STATE_SAVE,
    CostReasonType_CRT_PET_HATCHERY_SUMMON,
    CostReasonType_CRT_PET_HATCHERY_HATCH,
    CostReasonType_CRT_PET_ALTAR_DOMINATE,
    CostReasonType_CRT_PET_ALTAR_ACTIVE_SKILL_LEVEL_UP,
    CostReasonType_CRT_FOLLOWER_MISSION_COMPLETE,
    CostReasonType_CRT_LIVE_EVENT_LEVELUP,
    CostReasonType_CRT_COSTUME_INHERIT,
    CostReasonType_CRT_CRYSTAL_CHANGE,
    CostReasonType_CRT_PLAYER_KILL,
    CostReasonType_CRT_PLAYER_ASSIST,
    CostReasonType_CRT_PLAYER_REVIVAL
  };
  return values;
}

inline const char **EnumNamesCostReasonType() {
  static const char *names[] = {
    "CRT_UNKNOWN",
    "CRT_CREATE_PC",
    "CRT_DISENCHANT",
    "CRT_ENCHANT",
    "CRT_UPGRADE",
    "CRT_ADMIN_COMMAND",
    "CRT_SELL",
    "CRT_MOVE",
    "CRT_PRISM",
    "CRT_REWARD",
    "CRT_MAIL",
    "CRT_CRAFT",
    "CRT_SHOP",
    "CRT_USE",
    "CRT_TRADE",
    "CRT_DAILY_RECHARGE",
    "CRT_TRADE_CANCEL",
    "CRT_ELIXIR_ENCHANT",
    "CRT_TERRASTONE_ENCHANT",
    "CRT_RESEARCH_ENCHANT",
    "CRT_GUARDIAN_STAR_ENCHANT",
    "CRT_PASSIVE_SKILL_ENCHANT",
    "CRT_MAINSTREAM",
    "CRT_DIMENSION_CRYSTAL_EXCHANGE",
    "CRT_FUSION",
    "CRT_GUILD_CREST",
    "CRT_SKILL_GROWTH_UP",
    "CRT_DIMENSION_CRYSTAL_INSERT",
    "CRT_DIMENSION_CRYSTAL_REMOVE",
    "CRT_ENTER_FIELD",
    "CRT_GUILD_ATTEND",
    "CRT_GUILD_CREATE",
    "CRT_GUILD_DONATE",
    "CRT_REVIVE",
    "CRT_BUY_GUILD_BUFF",
    "CRT_EFFECT",
    "CRT_SKILL_POINT_RESET",
    "CRT_FISHING_SHOP",
    "CRT_MONSTER_KILL",
    "CRT_INTERACTION",
    "CRT_RESURRECTION",
    "CRT_BATTLE_FIELD_PLAYER_KILL",
    "CRT_TIER_SHOP",
    "CRT_REFUND",
    "CRT_LIVE_EVENT_NPC_DROP",
    "CRT_LIVE_EVENT",
    "CRT_LIVE_EVENT_TRADE",
    "CRT_LIVE_EVENT_LIMIT_SELL_SHOP",
    "CRT_LIVE_EVENT_DIA_BUY",
    "CRT_LIVE_EVENT_DIA_SPENT",
    "CRT_LIVE_EVENT_ATTENTION",
    "CRT_STORAGE_EXPANSION",
    "CRT_BRAWL_ENHANCE",
    "CRT_BRAWL_PLAYER_KILL",
    "CRT_BRAWL_INTERACTION",
    "CRT_TRANSCEND",
    "CRT_PET_MAKE_FROM_ITEM",
    "CRT_PET_FEED",
    "CRT_PET_FUSION",
    "CRT_PET_SUMMON",
    "CRT_PET_SUMMON_CANCEL",
    "CRT_PET_SUPPORT",
    "CRT_PET_SUPPORT_CANCEL",
    "CRT_PET_STATE_SAVE",
    "CRT_PET_HATCHERY_SUMMON",
    "CRT_PET_HATCHERY_HATCH",
    "CRT_PET_ALTAR_DOMINATE",
    "CRT_PET_ALTAR_ACTIVE_SKILL_LEVEL_UP",
    "CRT_FOLLOWER_MISSION_COMPLETE",
    "CRT_LIVE_EVENT_LEVELUP",
    "CRT_COSTUME_INHERIT",
    "CRT_CRYSTAL_CHANGE",
    "CRT_PLAYER_KILL",
    "CRT_PLAYER_ASSIST",
    "CRT_PLAYER_REVIVAL",
    nullptr
  };
  return names;
}

inline const char *EnumNameCostReasonType(CostReasonType e) {
  const size_t index = static_cast<int>(e);
  return EnumNamesCostReasonType()[index];
}

/// END_SKILL REASON TYPE
enum EndSkillReasonType {
  EndSkillReasonType_NORMAL = 0,
  EndSkillReasonType_CANCEL = 1,
  EndSkillReasonType_MIN = EndSkillReasonType_NORMAL,
  EndSkillReasonType_MAX = EndSkillReasonType_CANCEL
};

inline EndSkillReasonType (&EnumValuesEndSkillReasonType())[2] {
  static EndSkillReasonType values[] = {
    EndSkillReasonType_NORMAL,
    EndSkillReasonType_CANCEL
  };
  return values;
}

inline const char **EnumNamesEndSkillReasonType() {
  static const char *names[] = {
    "NORMAL",
    "CANCEL",
    nullptr
  };
  return names;
}

inline const char *EnumNameEndSkillReasonType(EndSkillReasonType e) {
  const size_t index = static_cast<int>(e);
  return EnumNamesEndSkillReasonType()[index];
}

/// Reaction BASE Position type
enum ReactionPosType {
  ReactionPosType_CASTER_CASTING_DIRECTION = 0,
  ReactionPosType_STRIKEN_POS = 1,
  ReactionPosType_CASTER_AND_STRIKEN_POS_CALC_DIRECTION = 2,
  ReactionPosType_OFFSET_MOVED_SKILL_POSITION = 3,
  ReactionPosType_MIN = ReactionPosType_CASTER_CASTING_DIRECTION,
  ReactionPosType_MAX = ReactionPosType_OFFSET_MOVED_SKILL_POSITION
};

inline ReactionPosType (&EnumValuesReactionPosType())[4] {
  static ReactionPosType values[] = {
    ReactionPosType_CASTER_CASTING_DIRECTION,
    ReactionPosType_STRIKEN_POS,
    ReactionPosType_CASTER_AND_STRIKEN_POS_CALC_DIRECTION,
    ReactionPosType_OFFSET_MOVED_SKILL_POSITION
  };
  return values;
}

inline const char **EnumNamesReactionPosType() {
  static const char *names[] = {
    "CASTER_CASTING_DIRECTION",
    "STRIKEN_POS",
    "CASTER_AND_STRIKEN_POS_CALC_DIRECTION",
    "OFFSET_MOVED_SKILL_POSITION",
    nullptr
  };
  return names;
}

inline const char *EnumNameReactionPosType(ReactionPosType e) {
  const size_t index = static_cast<int>(e);
  return EnumNamesReactionPosType()[index];
}

/// 채팅 타입
enum ChatType {
  ChatType_CHAT_CHANNEL = 0,
  ChatType_CHAT_REALM = 1,
  ChatType_CHAT_GUILD = 2,
  ChatType_CHAT_MAX = 3,
  ChatType_MIN = ChatType_CHAT_CHANNEL,
  ChatType_MAX = ChatType_CHAT_MAX
};

inline ChatType (&EnumValuesChatType())[4] {
  static ChatType values[] = {
    ChatType_CHAT_CHANNEL,
    ChatType_CHAT_REALM,
    ChatType_CHAT_GUILD,
    ChatType_CHAT_MAX
  };
  return values;
}

inline const char **EnumNamesChatType() {
  static const char *names[] = {
    "CHAT_CHANNEL",
    "CHAT_REALM",
    "CHAT_GUILD",
    "CHAT_MAX",
    nullptr
  };
  return names;
}

inline const char *EnumNameChatType(ChatType e) {
  const size_t index = static_cast<int>(e);
  return EnumNamesChatType()[index];
}

/// 재연결 계정 상태
enum ReconnectAccountState {
  ReconnectAccountState_RAS_LOBBY = 0,
  ReconnectAccountState_RAS_GAME = 1,
  ReconnectAccountState_RAS_GAME_DISCONNECT = 2,
  ReconnectAccountState_MAX = 3,
  ReconnectAccountState_MIN = ReconnectAccountState_RAS_LOBBY,
  ReconnectAccountState_MAX = ReconnectAccountState_MAX
};

inline ReconnectAccountState (&EnumValuesReconnectAccountState())[4] {
  static ReconnectAccountState values[] = {
    ReconnectAccountState_RAS_LOBBY,
    ReconnectAccountState_RAS_GAME,
    ReconnectAccountState_RAS_GAME_DISCONNECT,
    ReconnectAccountState_MAX
  };
  return values;
}

inline const char **EnumNamesReconnectAccountState() {
  static const char *names[] = {
    "RAS_LOBBY",
    "RAS_GAME",
    "RAS_GAME_DISCONNECT",
    "MAX",
    nullptr
  };
  return names;
}

inline const char *EnumNameReconnectAccountState(ReconnectAccountState e) {
  const size_t index = static_cast<int>(e);
  return EnumNamesReconnectAccountState()[index];
}

enum ItemOptionType {
  ItemOptionType_IOT_NONE = 0,
  ItemOptionType_IOT_REWARD_CHANCE_ALL = 1,
  ItemOptionType_IOT_REWARD_CHANCE_S = 2,
  ItemOptionType_IOT_REWARD_CHANCE_A = 3,
  ItemOptionType_IOT_REWARD_CHANCE_B = 4,
  ItemOptionType_MIN = ItemOptionType_IOT_NONE,
  ItemOptionType_MAX = ItemOptionType_IOT_REWARD_CHANCE_B
};

inline ItemOptionType (&EnumValuesItemOptionType())[5] {
  static ItemOptionType values[] = {
    ItemOptionType_IOT_NONE,
    ItemOptionType_IOT_REWARD_CHANCE_ALL,
    ItemOptionType_IOT_REWARD_CHANCE_S,
    ItemOptionType_IOT_REWARD_CHANCE_A,
    ItemOptionType_IOT_REWARD_CHANCE_B
  };
  return values;
}

inline const char **EnumNamesItemOptionType() {
  static const char *names[] = {
    "IOT_NONE",
    "IOT_REWARD_CHANCE_ALL",
    "IOT_REWARD_CHANCE_S",
    "IOT_REWARD_CHANCE_A",
    "IOT_REWARD_CHANCE_B",
    nullptr
  };
  return names;
}

inline const char *EnumNameItemOptionType(ItemOptionType e) {
  const size_t index = static_cast<int>(e);
  return EnumNamesItemOptionType()[index];
}

enum KeepAlive {
  KeepAlive_KEEP_ALIVE_TERM = 2000,
  KeepAlive_MIN = KeepAlive_KEEP_ALIVE_TERM,
  KeepAlive_MAX = KeepAlive_KEEP_ALIVE_TERM
};

inline KeepAlive (&EnumValuesKeepAlive())[1] {
  static KeepAlive values[] = {
    KeepAlive_KEEP_ALIVE_TERM
  };
  return values;
}

inline const char **EnumNamesKeepAlive() {
  static const char *names[] = {
    "KEEP_ALIVE_TERM",
    nullptr
  };
  return names;
}

inline const char *EnumNameKeepAlive(KeepAlive e) {
  const size_t index = static_cast<int>(e) - static_cast<int>(KeepAlive_KEEP_ALIVE_TERM);
  return EnumNamesKeepAlive()[index];
}

enum ContributeType {
  ContributeType_CONT_DEAL = 0,
  ContributeType_CONT_TANKING = 1,
  ContributeType_CONT_BUFF = 2,
  ContributeType_CONT_SUPER_ARMOR = 3,
  ContributeType_CONT_DEBUFF = 4,
  ContributeType_CONT_REACTION = 5,
  ContributeType_CONT_RESURRECTION = 6  /// 여기까지 전투 기여도
,
  ContributeType_CONT_GATHERING = 7,
  ContributeType_CONT_INTERACTION = 8,
  ContributeType_CONT_DESTRUCTION_OBJECT = 9,
  ContributeType_CONT_PK = 10,
  ContributeType_CONT_DEAL_TOWER = 11,
  ContributeType_CONT_MAX = 12,
  ContributeType_MIN = ContributeType_CONT_DEAL,
  ContributeType_MAX = ContributeType_CONT_MAX
};

inline ContributeType (&EnumValuesContributeType())[13] {
  static ContributeType values[] = {
    ContributeType_CONT_DEAL,
    ContributeType_CONT_TANKING,
    ContributeType_CONT_BUFF,
    ContributeType_CONT_SUPER_ARMOR,
    ContributeType_CONT_DEBUFF,
    ContributeType_CONT_REACTION,
    ContributeType_CONT_RESURRECTION,
    ContributeType_CONT_GATHERING,
    ContributeType_CONT_INTERACTION,
    ContributeType_CONT_DESTRUCTION_OBJECT,
    ContributeType_CONT_PK,
    ContributeType_CONT_DEAL_TOWER,
    ContributeType_CONT_MAX
  };
  return values;
}

inline const char **EnumNamesContributeType() {
  static const char *names[] = {
    "CONT_DEAL",
    "CONT_TANKING",
    "CONT_BUFF",
    "CONT_SUPER_ARMOR",
    "CONT_DEBUFF",
    "CONT_REACTION",
    "CONT_RESURRECTION",
    "CONT_GATHERING",
    "CONT_INTERACTION",
    "CONT_DESTRUCTION_OBJECT",
    "CONT_PK",
    "CONT_DEAL_TOWER",
    "CONT_MAX",
    nullptr
  };
  return names;
}

inline const char *EnumNameContributeType(ContributeType e) {
  const size_t index = static_cast<int>(e);
  return EnumNamesContributeType()[index];
}

enum ShopRewardState {
  ShopRewardState_SRS_DISABLED = 0,
  ShopRewardState_SRS_ACTIVATE = 1,
  ShopRewardState_SRS_DONE = 2,
  ShopRewardState_SRS_MAX = 3,
  ShopRewardState_MIN = ShopRewardState_SRS_DISABLED,
  ShopRewardState_MAX = ShopRewardState_SRS_MAX
};

inline ShopRewardState (&EnumValuesShopRewardState())[4] {
  static ShopRewardState values[] = {
    ShopRewardState_SRS_DISABLED,
    ShopRewardState_SRS_ACTIVATE,
    ShopRewardState_SRS_DONE,
    ShopRewardState_SRS_MAX
  };
  return values;
}

inline const char **EnumNamesShopRewardState() {
  static const char *names[] = {
    "SRS_DISABLED",
    "SRS_ACTIVATE",
    "SRS_DONE",
    "SRS_MAX",
    nullptr
  };
  return names;
}

inline const char *EnumNameShopRewardState(ShopRewardState e) {
  const size_t index = static_cast<int>(e);
  return EnumNamesShopRewardState()[index];
}

enum InfluenceRenewalType {
  InfluenceRenewalType_IRT_NONE = 0,
  InfluenceRenewalType_IRT_SAME = 1,
  InfluenceRenewalType_IRT_UP = 2,
  InfluenceRenewalType_IRT_DOWN = 3,
  InfluenceRenewalType_MIN = InfluenceRenewalType_IRT_NONE,
  InfluenceRenewalType_MAX = InfluenceRenewalType_IRT_DOWN
};

inline InfluenceRenewalType (&EnumValuesInfluenceRenewalType())[4] {
  static InfluenceRenewalType values[] = {
    InfluenceRenewalType_IRT_NONE,
    InfluenceRenewalType_IRT_SAME,
    InfluenceRenewalType_IRT_UP,
    InfluenceRenewalType_IRT_DOWN
  };
  return values;
}

inline const char **EnumNamesInfluenceRenewalType() {
  static const char *names[] = {
    "IRT_NONE",
    "IRT_SAME",
    "IRT_UP",
    "IRT_DOWN",
    nullptr
  };
  return names;
}

inline const char *EnumNameInfluenceRenewalType(InfluenceRenewalType e) {
  const size_t index = static_cast<int>(e);
  return EnumNamesInfluenceRenewalType()[index];
}

enum MailOwnerType {
  MailOwnerType_MOT_ACCOUNT = 0,
  MailOwnerType_MOT_PC = 1,
  MailOwnerType_MOT_MAX = 2,
  MailOwnerType_MIN = MailOwnerType_MOT_ACCOUNT,
  MailOwnerType_MAX = MailOwnerType_MOT_MAX
};

inline MailOwnerType (&EnumValuesMailOwnerType())[3] {
  static MailOwnerType values[] = {
    MailOwnerType_MOT_ACCOUNT,
    MailOwnerType_MOT_PC,
    MailOwnerType_MOT_MAX
  };
  return values;
}

inline const char **EnumNamesMailOwnerType() {
  static const char *names[] = {
    "MOT_ACCOUNT",
    "MOT_PC",
    "MOT_MAX",
    nullptr
  };
  return names;
}

inline const char *EnumNameMailOwnerType(MailOwnerType e) {
  const size_t index = static_cast<int>(e);
  return EnumNamesMailOwnerType()[index];
}

enum InfluenceReasonType {
  InfluenceReasonType_IFRT_CHEAT = 0,
  InfluenceReasonType_IFRT_QUEST = 1,
  InfluenceReasonType_IFRT_DAILY_DUNGEON = 2,
  InfluenceReasonType_IFRT_SOLO_DUNGEON = 3,
  InfluenceReasonType_IFRT_GOLD_DUNGEON = 4,
  InfluenceReasonType_IFRT_RAID = 5,
  InfluenceReasonType_IFRT_INFINITE_TOWER = 6,
  InfluenceReasonType_IFRT_FIELD_EVENT = 7,
  InfluenceReasonType_IFRT_MAIN_MISSION = 8,
  InfluenceReasonType_IFRT_RESURRECTION = 9,
  InfluenceReasonType_IFRT_INFINITE_TOWER_SWEEP = 10,
  InfluenceReasonType_IFRT_BE_PRAISED = 11,
  InfluenceReasonType_IFRT_PRAISE = 12,
  InfluenceReasonType_IFRT_FISHING = 13,
  InfluenceReasonType_IFRT_MINING = 14,
  InfluenceReasonType_IFRT_COLLECTING = 15,
  InfluenceReasonType_IFRT_SOLO_SWEEP = 16,
  InfluenceReasonType_IFRT_GUILD_ATTEND = 17,
  InfluenceReasonType_IFRT_GUILD_DUNGEON = 18,
  InfluenceReasonType_IFRT_MAX = 19,
  InfluenceReasonType_MIN = InfluenceReasonType_IFRT_CHEAT,
  InfluenceReasonType_MAX = InfluenceReasonType_IFRT_MAX
};

inline InfluenceReasonType (&EnumValuesInfluenceReasonType())[20] {
  static InfluenceReasonType values[] = {
    InfluenceReasonType_IFRT_CHEAT,
    InfluenceReasonType_IFRT_QUEST,
    InfluenceReasonType_IFRT_DAILY_DUNGEON,
    InfluenceReasonType_IFRT_SOLO_DUNGEON,
    InfluenceReasonType_IFRT_GOLD_DUNGEON,
    InfluenceReasonType_IFRT_RAID,
    InfluenceReasonType_IFRT_INFINITE_TOWER,
    InfluenceReasonType_IFRT_FIELD_EVENT,
    InfluenceReasonType_IFRT_MAIN_MISSION,
    InfluenceReasonType_IFRT_RESURRECTION,
    InfluenceReasonType_IFRT_INFINITE_TOWER_SWEEP,
    InfluenceReasonType_IFRT_BE_PRAISED,
    InfluenceReasonType_IFRT_PRAISE,
    InfluenceReasonType_IFRT_FISHING,
    InfluenceReasonType_IFRT_MINING,
    InfluenceReasonType_IFRT_COLLECTING,
    InfluenceReasonType_IFRT_SOLO_SWEEP,
    InfluenceReasonType_IFRT_GUILD_ATTEND,
    InfluenceReasonType_IFRT_GUILD_DUNGEON,
    InfluenceReasonType_IFRT_MAX
  };
  return values;
}

inline const char **EnumNamesInfluenceReasonType() {
  static const char *names[] = {
    "IFRT_CHEAT",
    "IFRT_QUEST",
    "IFRT_DAILY_DUNGEON",
    "IFRT_SOLO_DUNGEON",
    "IFRT_GOLD_DUNGEON",
    "IFRT_RAID",
    "IFRT_INFINITE_TOWER",
    "IFRT_FIELD_EVENT",
    "IFRT_MAIN_MISSION",
    "IFRT_RESURRECTION",
    "IFRT_INFINITE_TOWER_SWEEP",
    "IFRT_BE_PRAISED",
    "IFRT_PRAISE",
    "IFRT_FISHING",
    "IFRT_MINING",
    "IFRT_COLLECTING",
    "IFRT_SOLO_SWEEP",
    "IFRT_GUILD_ATTEND",
    "IFRT_GUILD_DUNGEON",
    "IFRT_MAX",
    nullptr
  };
  return names;
}

inline const char *EnumNameInfluenceReasonType(InfluenceReasonType e) {
  const size_t index = static_cast<int>(e);
  return EnumNamesInfluenceReasonType()[index];
}

enum DepartureChannelContentsType {
  DepartureChannelContentsType_DEPARTURE_CONTENTS_TYPE_TOWN = 0,
  DepartureChannelContentsType_DEPARTURE_CONTENTS_TYPE_FIELD = 1,
  DepartureChannelContentsType_DEPARTURE_CONTENTS_TYPE_MAX = 2,
  DepartureChannelContentsType_MIN = DepartureChannelContentsType_DEPARTURE_CONTENTS_TYPE_TOWN,
  DepartureChannelContentsType_MAX = DepartureChannelContentsType_DEPARTURE_CONTENTS_TYPE_MAX
};

inline DepartureChannelContentsType (&EnumValuesDepartureChannelContentsType())[3] {
  static DepartureChannelContentsType values[] = {
    DepartureChannelContentsType_DEPARTURE_CONTENTS_TYPE_TOWN,
    DepartureChannelContentsType_DEPARTURE_CONTENTS_TYPE_FIELD,
    DepartureChannelContentsType_DEPARTURE_CONTENTS_TYPE_MAX
  };
  return values;
}

inline const char **EnumNamesDepartureChannelContentsType() {
  static const char *names[] = {
    "DEPARTURE_CONTENTS_TYPE_TOWN",
    "DEPARTURE_CONTENTS_TYPE_FIELD",
    "DEPARTURE_CONTENTS_TYPE_MAX",
    nullptr
  };
  return names;
}

inline const char *EnumNameDepartureChannelContentsType(DepartureChannelContentsType e) {
  const size_t index = static_cast<int>(e);
  return EnumNamesDepartureChannelContentsType()[index];
}

enum DestinationChannelContentsType {
  DestinationChannelContentsType_DESTINATION_CONTENTS_TYPE_TOWN = 0,
  DestinationChannelContentsType_DESTINATION_CONTENTS_TYPE_FIELD = 1,
  DestinationChannelContentsType_DESTINATION_CONTENTS_TYPE_MISSION = 2,
  DestinationChannelContentsType_DESTINATION_CONTENTS_TYPE_RAID = 3,
  DestinationChannelContentsType_DESTINATION_CONTENTS_TYPE_GOLD_DUNGEON = 4,
  DestinationChannelContentsType_DESTINATION_CONTENTS_TYPE_GUILD_DUNGEON = 5,
  DestinationChannelContentsType_DESTINATION_CONTENTS_TYPE_MAX = 6,
  DestinationChannelContentsType_MIN = DestinationChannelContentsType_DESTINATION_CONTENTS_TYPE_TOWN,
  DestinationChannelContentsType_MAX = DestinationChannelContentsType_DESTINATION_CONTENTS_TYPE_MAX
};

inline DestinationChannelContentsType (&EnumValuesDestinationChannelContentsType())[7] {
  static DestinationChannelContentsType values[] = {
    DestinationChannelContentsType_DESTINATION_CONTENTS_TYPE_TOWN,
    DestinationChannelContentsType_DESTINATION_CONTENTS_TYPE_FIELD,
    DestinationChannelContentsType_DESTINATION_CONTENTS_TYPE_MISSION,
    DestinationChannelContentsType_DESTINATION_CONTENTS_TYPE_RAID,
    DestinationChannelContentsType_DESTINATION_CONTENTS_TYPE_GOLD_DUNGEON,
    DestinationChannelContentsType_DESTINATION_CONTENTS_TYPE_GUILD_DUNGEON,
    DestinationChannelContentsType_DESTINATION_CONTENTS_TYPE_MAX
  };
  return values;
}

inline const char **EnumNamesDestinationChannelContentsType() {
  static const char *names[] = {
    "DESTINATION_CONTENTS_TYPE_TOWN",
    "DESTINATION_CONTENTS_TYPE_FIELD",
    "DESTINATION_CONTENTS_TYPE_MISSION",
    "DESTINATION_CONTENTS_TYPE_RAID",
    "DESTINATION_CONTENTS_TYPE_GOLD_DUNGEON",
    "DESTINATION_CONTENTS_TYPE_GUILD_DUNGEON",
    "DESTINATION_CONTENTS_TYPE_MAX",
    nullptr
  };
  return names;
}

inline const char *EnumNameDestinationChannelContentsType(DestinationChannelContentsType e) {
  const size_t index = static_cast<int>(e);
  return EnumNamesDestinationChannelContentsType()[index];
}

enum Const {
  Const_RESERVED_NICK_NAME_CODE_LENGTH = 16,
  Const_MIN = Const_RESERVED_NICK_NAME_CODE_LENGTH,
  Const_MAX = Const_RESERVED_NICK_NAME_CODE_LENGTH
};

inline Const (&EnumValuesConst())[1] {
  static Const values[] = {
    Const_RESERVED_NICK_NAME_CODE_LENGTH
  };
  return values;
}

inline const char **EnumNamesConst() {
  static const char *names[] = {
    "RESERVED_NICK_NAME_CODE_LENGTH",
    nullptr
  };
  return names;
}

inline const char *EnumNameConst(Const e) {
  const size_t index = static_cast<int>(e) - static_cast<int>(Const_RESERVED_NICK_NAME_CODE_LENGTH);
  return EnumNamesConst()[index];
}

enum EventCounterSendType {
  EventCounterSendType_EVENT_COUNTER_SEND_TYPE_NONE = 0,
  EventCounterSendType_EVENT_COUNTER_SEND_TYPE_ASLAN = 1,
  EventCounterSendType_EVENT_COUNTER_SEND_TYPE_HARMION = 2,
  EventCounterSendType_EVENT_COUNTER_SEND_TYPE_ALL = 3,
  EventCounterSendType_MIN = EventCounterSendType_EVENT_COUNTER_SEND_TYPE_NONE,
  EventCounterSendType_MAX = EventCounterSendType_EVENT_COUNTER_SEND_TYPE_ALL
};

inline EventCounterSendType (&EnumValuesEventCounterSendType())[4] {
  static EventCounterSendType values[] = {
    EventCounterSendType_EVENT_COUNTER_SEND_TYPE_NONE,
    EventCounterSendType_EVENT_COUNTER_SEND_TYPE_ASLAN,
    EventCounterSendType_EVENT_COUNTER_SEND_TYPE_HARMION,
    EventCounterSendType_EVENT_COUNTER_SEND_TYPE_ALL
  };
  return values;
}

inline const char **EnumNamesEventCounterSendType() {
  static const char *names[] = {
    "EVENT_COUNTER_SEND_TYPE_NONE",
    "EVENT_COUNTER_SEND_TYPE_ASLAN",
    "EVENT_COUNTER_SEND_TYPE_HARMION",
    "EVENT_COUNTER_SEND_TYPE_ALL",
    nullptr
  };
  return names;
}

inline const char *EnumNameEventCounterSendType(EventCounterSendType e) {
  const size_t index = static_cast<int>(e);
  return EnumNamesEventCounterSendType()[index];
}

enum FollowerSoulStoneSpentReasonType {
  FollowerSoulStoneSpentReasonType_FOLLOWER_SPENT_NONE = 0,
  FollowerSoulStoneSpentReasonType_FOLLOWER_SPENT_ENCHANT = 1,
  FollowerSoulStoneSpentReasonType_MIN = FollowerSoulStoneSpentReasonType_FOLLOWER_SPENT_NONE,
  FollowerSoulStoneSpentReasonType_MAX = FollowerSoulStoneSpentReasonType_FOLLOWER_SPENT_ENCHANT
};

inline FollowerSoulStoneSpentReasonType (&EnumValuesFollowerSoulStoneSpentReasonType())[2] {
  static FollowerSoulStoneSpentReasonType values[] = {
    FollowerSoulStoneSpentReasonType_FOLLOWER_SPENT_NONE,
    FollowerSoulStoneSpentReasonType_FOLLOWER_SPENT_ENCHANT
  };
  return values;
}

inline const char **EnumNamesFollowerSoulStoneSpentReasonType() {
  static const char *names[] = {
    "FOLLOWER_SPENT_NONE",
    "FOLLOWER_SPENT_ENCHANT",
    nullptr
  };
  return names;
}

inline const char *EnumNameFollowerSoulStoneSpentReasonType(FollowerSoulStoneSpentReasonType e) {
  const size_t index = static_cast<int>(e);
  return EnumNamesFollowerSoulStoneSpentReasonType()[index];
}

enum ContentConfigType {
  ContentConfigType_CCT_RESERVED_NICK_NAME = 0,
  ContentConfigType_CCT_BATTLE_FIELD_AID = 1,
  ContentConfigType_CCT_BRAWL_BLOCK = 2,
  ContentConfigType_CCT_MAX = 3,
  ContentConfigType_MIN = ContentConfigType_CCT_RESERVED_NICK_NAME,
  ContentConfigType_MAX = ContentConfigType_CCT_MAX
};

inline ContentConfigType (&EnumValuesContentConfigType())[4] {
  static ContentConfigType values[] = {
    ContentConfigType_CCT_RESERVED_NICK_NAME,
    ContentConfigType_CCT_BATTLE_FIELD_AID,
    ContentConfigType_CCT_BRAWL_BLOCK,
    ContentConfigType_CCT_MAX
  };
  return values;
}

inline const char **EnumNamesContentConfigType() {
  static const char *names[] = {
    "CCT_RESERVED_NICK_NAME",
    "CCT_BATTLE_FIELD_AID",
    "CCT_BRAWL_BLOCK",
    "CCT_MAX",
    nullptr
  };
  return names;
}

inline const char *EnumNameContentConfigType(ContentConfigType e) {
  const size_t index = static_cast<int>(e);
  return EnumNamesContentConfigType()[index];
}

enum LiveEventDiaMissionState {
  LiveEventDiaMissionState_LEMS_PROGRESS = 0,
  LiveEventDiaMissionState_LEMS_ARCHIEVEMENT = 1,
  LiveEventDiaMissionState_LEMS_DONE = 2,
  LiveEventDiaMissionState_LEMS_MAX = 3,
  LiveEventDiaMissionState_MIN = LiveEventDiaMissionState_LEMS_PROGRESS,
  LiveEventDiaMissionState_MAX = LiveEventDiaMissionState_LEMS_MAX
};

inline LiveEventDiaMissionState (&EnumValuesLiveEventDiaMissionState())[4] {
  static LiveEventDiaMissionState values[] = {
    LiveEventDiaMissionState_LEMS_PROGRESS,
    LiveEventDiaMissionState_LEMS_ARCHIEVEMENT,
    LiveEventDiaMissionState_LEMS_DONE,
    LiveEventDiaMissionState_LEMS_MAX
  };
  return values;
}

inline const char **EnumNamesLiveEventDiaMissionState() {
  static const char *names[] = {
    "LEMS_PROGRESS",
    "LEMS_ARCHIEVEMENT",
    "LEMS_DONE",
    "LEMS_MAX",
    nullptr
  };
  return names;
}

inline const char *EnumNameLiveEventDiaMissionState(LiveEventDiaMissionState e) {
  const size_t index = static_cast<int>(e);
  return EnumNamesLiveEventDiaMissionState()[index];
}

enum LiveEventAttentionReceiveState {
  LiveEventAttentionReceiveState_LEAS_UNRECEIVABLE = 0,
  LiveEventAttentionReceiveState_LEAS_RECEIVABLE = 1,
  LiveEventAttentionReceiveState_LEAS_RECEIVED = 2,
  LiveEventAttentionReceiveState_LEAS_MAX = 3,
  LiveEventAttentionReceiveState_MIN = LiveEventAttentionReceiveState_LEAS_UNRECEIVABLE,
  LiveEventAttentionReceiveState_MAX = LiveEventAttentionReceiveState_LEAS_MAX
};

inline LiveEventAttentionReceiveState (&EnumValuesLiveEventAttentionReceiveState())[4] {
  static LiveEventAttentionReceiveState values[] = {
    LiveEventAttentionReceiveState_LEAS_UNRECEIVABLE,
    LiveEventAttentionReceiveState_LEAS_RECEIVABLE,
    LiveEventAttentionReceiveState_LEAS_RECEIVED,
    LiveEventAttentionReceiveState_LEAS_MAX
  };
  return values;
}

inline const char **EnumNamesLiveEventAttentionReceiveState() {
  static const char *names[] = {
    "LEAS_UNRECEIVABLE",
    "LEAS_RECEIVABLE",
    "LEAS_RECEIVED",
    "LEAS_MAX",
    nullptr
  };
  return names;
}

inline const char *EnumNameLiveEventAttentionReceiveState(LiveEventAttentionReceiveState e) {
  const size_t index = static_cast<int>(e);
  return EnumNamesLiveEventAttentionReceiveState()[index];
}

enum LiveEventReceiveState {
  LiveEventReceiveState_LERS_UNRECEIVABLE = 0,
  LiveEventReceiveState_LERS_RECEIVABLE = 1,
  LiveEventReceiveState_LERS_RECEIVED = 2,
  LiveEventReceiveState_LERS_MAX = 3,
  LiveEventReceiveState_MIN = LiveEventReceiveState_LERS_UNRECEIVABLE,
  LiveEventReceiveState_MAX = LiveEventReceiveState_LERS_MAX
};

inline LiveEventReceiveState (&EnumValuesLiveEventReceiveState())[4] {
  static LiveEventReceiveState values[] = {
    LiveEventReceiveState_LERS_UNRECEIVABLE,
    LiveEventReceiveState_LERS_RECEIVABLE,
    LiveEventReceiveState_LERS_RECEIVED,
    LiveEventReceiveState_LERS_MAX
  };
  return values;
}

inline const char **EnumNamesLiveEventReceiveState() {
  static const char *names[] = {
    "LERS_UNRECEIVABLE",
    "LERS_RECEIVABLE",
    "LERS_RECEIVED",
    "LERS_MAX",
    nullptr
  };
  return names;
}

inline const char *EnumNameLiveEventReceiveState(LiveEventReceiveState e) {
  const size_t index = static_cast<int>(e);
  return EnumNamesLiveEventReceiveState()[index];
}

enum LiveEventItemDropContentsType {
  LiveEventItemDropContentsType_LEIDCT_NONE = 0,
  LiveEventItemDropContentsType_LEIDCT_SOLO_DUNGEON = 1,
  LiveEventItemDropContentsType_LEIDCT_DAILY_DUNGEON = 2,
  LiveEventItemDropContentsType_LEIDCT_RAID = 3,
  LiveEventItemDropContentsType_LEIDCT_GOLD_DUNGEON = 4,
  LiveEventItemDropContentsType_LEIDCT_GUILD_DUNGEON = 5,
  LiveEventItemDropContentsType_LEIDCT_MISSION = 6,
  LiveEventItemDropContentsType_LEIDCT_FIELD_EVENT = 7,
  LiveEventItemDropContentsType_LEIDCT_ARENA = 8,
  LiveEventItemDropContentsType_LEIDCT_NORMAL_FIELD = 11,
  LiveEventItemDropContentsType_LEIDCT_BATTLE_FIELD = 12,
  LiveEventItemDropContentsType_LEIDCT_BRAWL = 13,
  LiveEventItemDropContentsType_LEIDCT_24HOUR_FIELD = 14,
  LiveEventItemDropContentsType_MIN = LiveEventItemDropContentsType_LEIDCT_NONE,
  LiveEventItemDropContentsType_MAX = LiveEventItemDropContentsType_LEIDCT_24HOUR_FIELD
};

inline LiveEventItemDropContentsType (&EnumValuesLiveEventItemDropContentsType())[13] {
  static LiveEventItemDropContentsType values[] = {
    LiveEventItemDropContentsType_LEIDCT_NONE,
    LiveEventItemDropContentsType_LEIDCT_SOLO_DUNGEON,
    LiveEventItemDropContentsType_LEIDCT_DAILY_DUNGEON,
    LiveEventItemDropContentsType_LEIDCT_RAID,
    LiveEventItemDropContentsType_LEIDCT_GOLD_DUNGEON,
    LiveEventItemDropContentsType_LEIDCT_GUILD_DUNGEON,
    LiveEventItemDropContentsType_LEIDCT_MISSION,
    LiveEventItemDropContentsType_LEIDCT_FIELD_EVENT,
    LiveEventItemDropContentsType_LEIDCT_ARENA,
    LiveEventItemDropContentsType_LEIDCT_NORMAL_FIELD,
    LiveEventItemDropContentsType_LEIDCT_BATTLE_FIELD,
    LiveEventItemDropContentsType_LEIDCT_BRAWL,
    LiveEventItemDropContentsType_LEIDCT_24HOUR_FIELD
  };
  return values;
}

inline const char **EnumNamesLiveEventItemDropContentsType() {
  static const char *names[] = {
    "LEIDCT_NONE",
    "LEIDCT_SOLO_DUNGEON",
    "LEIDCT_DAILY_DUNGEON",
    "LEIDCT_RAID",
    "LEIDCT_GOLD_DUNGEON",
    "LEIDCT_GUILD_DUNGEON",
    "LEIDCT_MISSION",
    "LEIDCT_FIELD_EVENT",
    "LEIDCT_ARENA",
    "",
    "",
    "LEIDCT_NORMAL_FIELD",
    "LEIDCT_BATTLE_FIELD",
    "LEIDCT_BRAWL",
    "LEIDCT_24HOUR_FIELD",
    nullptr
  };
  return names;
}

inline const char *EnumNameLiveEventItemDropContentsType(LiveEventItemDropContentsType e) {
  const size_t index = static_cast<int>(e);
  return EnumNamesLiveEventItemDropContentsType()[index];
}

enum LiveEventItemDropEventType {
  LiveEventItemDropEventType_LEIDET_NONE = 0,
  LiveEventItemDropEventType_LEIDET_MONSTER_DROP = 1,
  LiveEventItemDropEventType_LEIDET_CONTENTS_CLEAR = 2,
  LiveEventItemDropEventType_MIN = LiveEventItemDropEventType_LEIDET_NONE,
  LiveEventItemDropEventType_MAX = LiveEventItemDropEventType_LEIDET_CONTENTS_CLEAR
};

inline LiveEventItemDropEventType (&EnumValuesLiveEventItemDropEventType())[3] {
  static LiveEventItemDropEventType values[] = {
    LiveEventItemDropEventType_LEIDET_NONE,
    LiveEventItemDropEventType_LEIDET_MONSTER_DROP,
    LiveEventItemDropEventType_LEIDET_CONTENTS_CLEAR
  };
  return values;
}

inline const char **EnumNamesLiveEventItemDropEventType() {
  static const char *names[] = {
    "LEIDET_NONE",
    "LEIDET_MONSTER_DROP",
    "LEIDET_CONTENTS_CLEAR",
    nullptr
  };
  return names;
}

inline const char *EnumNameLiveEventItemDropEventType(LiveEventItemDropEventType e) {
  const size_t index = static_cast<int>(e);
  return EnumNamesLiveEventItemDropEventType()[index];
}

enum BattleFieldRealmType {
  BattleFieldRealmType_BATTLE_FIELD_REALM_NONE = 0,
  BattleFieldRealmType_BATTLE_FIELD_REALM_ASLAN = 1,
  BattleFieldRealmType_BATTLE_FIELD_REALM_HARMION = 2,
  BattleFieldRealmType_MIN = BattleFieldRealmType_BATTLE_FIELD_REALM_NONE,
  BattleFieldRealmType_MAX = BattleFieldRealmType_BATTLE_FIELD_REALM_HARMION
};

inline BattleFieldRealmType (&EnumValuesBattleFieldRealmType())[3] {
  static BattleFieldRealmType values[] = {
    BattleFieldRealmType_BATTLE_FIELD_REALM_NONE,
    BattleFieldRealmType_BATTLE_FIELD_REALM_ASLAN,
    BattleFieldRealmType_BATTLE_FIELD_REALM_HARMION
  };
  return values;
}

inline const char **EnumNamesBattleFieldRealmType() {
  static const char *names[] = {
    "BATTLE_FIELD_REALM_NONE",
    "BATTLE_FIELD_REALM_ASLAN",
    "BATTLE_FIELD_REALM_HARMION",
    nullptr
  };
  return names;
}

inline const char *EnumNameBattleFieldRealmType(BattleFieldRealmType e) {
  const size_t index = static_cast<int>(e);
  return EnumNamesBattleFieldRealmType()[index];
}

}  // namespace LeanType

#endif  // FLATBUFFERS_GENERATED_LEANTYPE_LEANTYPE_H_
