include "LeanType.fbs";

namespace LeanPacket;
//optimize_for = LITE_RUNTIME; // by default, all fields are optional in fbs.

///-----------------------------------------------------------------------------
/// COMMON
///-----------------------------------------------------------------------------

/// 패킷 버전(패킷이 수정되면 올리자.)
enum PacketVersion : int
{
	/// 패킷 버전 구조 10000자리 이상 major버전 이하 패치 버전
	/// 예) 10001 major: 1, patch: 1 버전
	NOW = 10004,
}

/// 사용할 수 있는 총 범위(넘어서면 기획 스트링 테이블 ID랑 겹친다.)
/// 1 ~ 9999999(7자리)

/// 시스템:	1		~ 99999
/// 성장:	100000	~ 199999
/// 전투:	200000	~ 299999
/// 월드:	300000	~ 399999

///- ErrorCode ----------
enum ErrorCode : int
{
	NONE = 0,

	///-----------------------------------------------------------------------------
	/// 시스템(1 - 99999)
	///-----------------------------------------------------------------------------
	OK = 1,
	FAILED,

	/// DB 처리 실패
	DB_FAILED,

	/// 존재하지 않는 account id
	AUTH_ACCOUNT_NAME_FAILED = 50,
	
	/// 패스워드 오류
	AUTH_PASSWORD_FAILED,
	
	/// 해당 콜로니에 접속할 수 없습니다.
	AUTH_NOT_SERVICE_COLONY,
	
	/// 계정 블럭
	AUTH_ACCOUNT_BLOCKED,

	/// 국가 차단
	AUTH_COUNTRY_BANNED,

	/// 서버 장애로 접속불가
	AUTH_CRASH_COLONY,
	
	/// 캐릭터 생성 이름 중복
	DUPLICATE_PC_NAME = 100,
	/// 사용할 수 없는 이름입니다.
	PROHIBIT_WORDS_PC_NAME = 101,

	// 현재 게임서버에 접속할 수 없습니다.
	CANNOT_JOIN_SERVICE = 120,
	// 신규 계정 생성제한 상태입니다.
	RESTRICT_COLONY = 121,

	/// 중복 접속
	DUPLICATE_LOGIN = 150,

	// 선택하신 렐름은 캐릭터생성 제한 렐름 입니다.
	LIMIT_REALM = 151,
	
	// 운영자에 의해 킥되었습니다.
	ADMIN_TOOL_KICK = 152,

	/// 알 수 없는 시스템 오류
	UNKNOWN_SYSTEM_ERROR = 153,
	
	/// 이미 지급된 아이템입니다.
	HIVE_ITEM_ALREADY_GIVEN = 160,
	
	/// 이미 연동된 계정입니다.
	ALREADY_LINKED = 170,

	/// 대기열 찾기에 실패했습니다.
	NOT_FOUND_WAITING_LIST = 180,

	/// 대기열 취소에 실패했습니다.
	FAILED_CANCEL_WAITING = 181,

	/// 대기열 등록에 실패했습니다.
	FAILED_ADD_WAITING = 182,

	/// 비정상적인 닉네임 사전 예약 코드입니다.
	INVALID_RESERVED_NICK_NAME_CODE = 183,

	/// 이미 사용된 닉네임 사전 예약 코드입니다.
	ALREADY_USED_RESERVED_NICK_NAME_CODE = 184,

	/// 등록되지 않은 닉네임 사전 예약 코드입니다.
	UNREGISTERED_RESERVED_NICK_NAME_CODE = 185,

	/// 선점한 캐릭터 렐름과 다른 렐름을 이미 선택하셨습니다.
	ALREADY_SELECTED_OTHER_REALM_RESERVED_NICK_NAME_CODE = 186,

	// 이미 선점 코드를 사용한 계정입니다.
	ALREADY_USED_RESERVED_NICK_NAME_ACCOUNT = 187,

	// 기존 캐릭터가 길드에 가입되어 삭제 할 수 없습니다.
	ALREADY_CHAR_JOIN_GUILD = 188,

	
	///-----------------------------------------------------------------------------
	/// 공통 에러코드
	///-----------------------------------------------------------------------------
	INVALID_PC_CONTROLLER = 5000,
	INVALID_TEMPLATE_DATA = 5001,
	
	///-----------------------------------------------------------------------------
	/// 성장(100000 ~ 199999)
	///-----------------------------------------------------------------------------
	/// INVENTORY
	FAILED_DELETE_ITEM = 50000,

	/// 아이템이 존재하지 않습니다.
	NOT_EXIST_ITEM = 50001,

	/// 사용불가능한 클래스
	INVALID_USE_CLASS = 50002,

	/// 장착 불가능한 아이템
	NOT_EQUIPABLE_ITEM = 50003,

	/// 중복착용 불가능 그룹 검출
	DUPLICATE_EQUIP_EXCLUSIVE_GROUP_ID = 50004,

	/// 강화 불가능한 아이템
	NOT_ENCHANTABLE_ITEM = 50005,

	/// 골드 부족
	NOT_ENOUGH_GOLD = 50006,

	/// 장착중인 아이템
	ALREADY_EQUIPED_ITEM = 50007,

	/// 분해 불가능한 아이템
	NOT_DISENCHANT_ITEM = 50008,

	/// 스토리지 공간 부족
	NOT_ENOUGH_STORAGE_SPACE = 50009,

	/// 재료 아이템 부족
	NOT_ENOUGH_MATERIAL_ITEM = 50010,

	/// 프리셋에 설정된 아이템
	ALREADY_PRESET_ITEM = 50011,

	/// 아이템 수량 부족
	NOT_ENOUGH_ITEM = 50012,

	/// 승급 불가능한 아이템
	NOT_UPGRADABLE_ITEM = 50013,

	/// 다이아가 부족합니다.
	NOT_ENOUGH_DIA = 50014,

	/// 레벨 부족
	INVALID_USE_LEVEL = 50015,

	/// 존재하지 않는 메일입니다.
	NOT_EXIST_MAIL = 50016,

	EXPIRED_MAIL = 50017,

	/// 존재하지 않는 상품입니다.
	NOT_EXIST_SHOP_PRODUCT = 50019,

	/// 구매가능 수량을 초과하였습니다.
	LIMIT_PURCHASABLE_COUNT  = 50020,

	/// 아직 충분한 시간이 지나지 않았습니다.
	NOT_ENOUGH_COOLTIME = 50021,

	/// 구매 가능 레벨에 도달하지 못했습니다
	PURCHASE_UNDER_RANGE_LEVEL  = 50022,

	/// 구매 가능 레벨을 초과했습니다
	PURCHASE_OVER_RANGE_LEVEL  = 50023,

	/// 기부 할 수 없는 아이템 타입입니다.
	NOT_DONATE_ITEM = 50024,

	/// 최대 마스터리 레벨을 초과하였습니다.
	OVERRANGE_MASTERY_LEVEL = 50025,

	/// 아이템 등급이 낮아 기부를 할 수 없습니다.
	NOT_ENOUGH_ITEM_GRADE	= 50026,

	/// 골드를 더 이상 획득할 수 없습니다.
	GOLD_IS_FULL = 50027,

	/// 요청한 기부 타입과 맞지 않은 아이템이 있습니다.
	NOT_EQUAL_DONATION_ITEM_TYPE = 50028,

	/// 해당 아이템의 구매 이력이 있습니다.
	EXIST_RECORD_PURCHASE_ITEM	= 50029,

	/// 갱신 시간이 초과되었습니다.
	OVERRANGE_SHOP_COOLTIME = 50030,

	// 티켓이 부족합니다.
	NOT_ENOUGH_TICKET = 50031,

	// 정의되지않은 티켓 타입입니다.
	INVALID_TICKET_TYPE = 50032,

	//수령할 수 있는 메일이 없습니다
	NOT_EXIST_RECEIVEABLE_MAIL = 50033,

	// 인벤토리가 가득 차서 우편의 일부만 수령하였습니다
	FAILED_ALL_RECEIVE_MAIL_NOT_ENOUGH_STORAGE = 50034,

	// 메일함이 비어있습니다.
	EMPTY_MAIL_BOX = 50035,

	// 보상 정보가 비어있습니다.
	EMPTY_REWARD_INFO = 50036,
	
	// 내 랭킹정보를 찾을 수 없습니다.
	NOT_FOUND_MY_RANK = 50037,

	// 아이템을 사용할 수 없는 상황입니다.
	CAN_NOT_USE_ITEM_STATE = 50038,

	// 인벤토리가 가득 차서 아이템의 일부만 사용하였습니다.
	FAILED_ALL_USE_ITEM_NOT_ENOUGH_STORAGE = 50039,

	// 일괄사용이 가능한 아이템 타입이 아닙니다.
	NOT_AVAILABLE_USED_ITEM_TYPE = 50040,

	// 최대 일괄사용 개수를 초과하였습니다.
	OVER_COUNT_ALL_USE_ITEM = 50041,

	// 쿨타임이 존재하는 아이템은 일괄사용 할 수 없습니다.
	CANT_USE_ITEM_WITH_COOLTIME = 50042,

	// 최고레벨에 도달하여 더이상 경험치를 획득할 수 없습니다.
	UNABLE_ACQUIRE_EXP = 50043,
	
	// 거래 세율이 일치하지 않습니다.
	NOT_MATCH_TRADE_TAX_RATE = 50100,
	
	//차원 결정
	// 희귀 등급보다 낮은 아이템에는 차원결정을 장착 할 수 없습니다.
	LOWER_THAN_RARE_RATINGS_ARE_NOT_POSSIBLE = 50151,
	
	// 슬롯카운트 초과 위치입니다.
	OVER_COUNT_SLOT_INDEX = 50152,
	
	// 차원 결정이 슬롯에 없습니다.
	NOT_EXIST_CRYSTAL_IN_SLOT = 50153,
	
	// 인벤토리에 아이템이 없습니다.
	NOT_EXIST_ITEM_IN_INVENTORY = 50154,
	
	// 차원결정 슬롯을 가질 수 없는 유형의 아이템 입니다.
	MISS_MATCH_ITEM_CATEGORY = 50155,
	
	// 이미 다른 슬롯에 장착 되어있습니다.
	ALREADY_EQUIPED_IN_SLOT = 50156,
	
	// 차원결정의 유형이 슬롯에 넣을 수 있는 유형과 맞지 않습니다.
	MISS_MATCH_CRYSTAL_TYPE = 50157,
	
	// 최대 레벨에 도달하지 못했습니다.
	NOT_REACHED_MAX_LEVEL = 50158,
	
	//최고 등급입니다.
	MAX_GRADE = 50159,
	
	//승급 시킬 수 없는 아이템 입니다.
	CAN_NOT_UPGRADE = 50160,
	
	// 레벨업 시킬 수 없는 아이템 입니다.
	CAN_NOT_LEVEL_UP = 50161,
	
	// 해당 등급의 최고 레벨입니다.
	HIGHEST_LEVEL_OF_THE_GRADE = 50162,

	/// 존재하지 않는 캐릭터입니다.
	NOT_EXIST_CHARACTER = 50200,
	
	/// 다음 입력까지 잠시만 기다려 주십시오.
	NOT_ENOUGH_CHAT_TERM = 50201,

	/// 동일한 캐릭터와 1:1 대화를 할 수 없습니다.
	CAN_NOT_SEND_MESSAGE_FOR_SAME_CHARACTER = 50202,

	/// 전쟁필드 밖에선 전쟁채팅을 할 수 없습니다.
	CAN_NOT_SEND_MESSAGE_AT_OUTSIDE_WARFIELD = 50203,

	/// 채팅메세지 최대길이를 넘었습니다 
	OVERRANGE_CHAT_MESSAGE_LENGTH = 50204,

	/// 정의되지않은 채팅 타입입니다
	INVALID_CHATTING_TYPE = 50205,

	/// 채팅을 할 수 없는 컨텐츠입니다.
	UNABLE_CHATTING_CONTENTS_TYPE = 50206,
	
	/// 영향력 일일 제한으로 더이상 획득할 수 없습니다.
	INFLUENCE_DAILY_COUNT_OVER = 50300,

	/// 추종자를 소유하고 있지 않습니다.
	NOT_EXIST_FOLLOWER = 100000,

	/// 임무를 수행할 수 있는 추종자의 수를 초과 하였습니다.
	FOLLOWER_JOIN_MISSION_OVER_COUNT = 100001,

	/// 추종자가 집결지 위치에 다른 추종자가 존재합니다.
	FOLLOWER_ALREADY_TO_BE_PLACED = 100002,

	/// 추종자가 이미 임무를 수행하지 않고 있습니다.
	FOLLOWER_ALREADY_HAS_NOT_MISSION = 100003,

	/// 프리즘이 부족합니다.
	NOT_ENOUGH_PRISM = 100004,

	/// 프리즘을 더 이상 획득할 수 없습니다.
	PRISM_IS_FULL = 100005,

	// 거래소 구매하려는아이템이 존재하지 않습니다.
	BUY_TRADE_ITEM_NOT_EXIST = 100006,

	// 등록가능한 거래소 판매아이템 수량이 초과되었습니다.
	REG_TRADE_ITEM_IS_FULL = 100007,

	// 거래소 구매에 실패했습니다. (기타상황)
	BUY_TRADE_ITEM_FAILED = 100008,

	// 상품을 구매할 수 있는 시간이 아닙니다.
	SHOP_PROUDCT_IS_DISABLED = 100009,

	// 재구매 불가능한 기간입니다.
	SHOP_PRODUCT_ALREADY_PURCHASED = 100010,

	// 구매 제한을 초과했습니다.
	SHOP_PRODUCT_PURCHASE_LIMIT_COUNT_OVER = 100011,

	/// 행운 포인트가 부족합니다.
	NOT_ENOUGH_FORTUNE_POINT = 100012,

	/// 행운포인트를 더 이상 획득할 수 없습니다.
	FORTUNE_POINT_IS_FULL = 100013,

	/// 거래소 등록 취소 아이템 없음
	CANCEL_TRADE_ITEM_NOT_EXIST = 100014,

	/// 길드주화가 부족합니다
	NOT_ENOUGH_GUILD_COIN = 100015,

	/// 군주포인트가 부족합니다
	NOT_ENOUGH_MONARCH_POINT = 100016,

	/// 구매 실패 - 캐릭터 상태
	SHOP_PRODUCT_PURCAHSE_FAILED_CHAR_STATE = 100017,

	/// 구매 실패 - 메인스트림 단계
	SHOP_PRODUCT_PURCAHSE_FAILED_MAINSTREAM = 100018,

	/// 구매 실패 - 캐릭터 레벨
	SHOP_PRODUCT_PURCAHSE_FAILED_CHAR_LEVEL = 100019,

	/// 구매 실패 - 길드 가입하지 않음
	SHOP_PRODUCT_PURCAHSE_FAILED_NO_GUILD = 100020,

	/// 구매 실패 - 길드 레벨 부족
	SHOP_PRODUCT_PURCAHSE_FAILED_GUILD_LEVEL = 100021,

	/// 구매 실패 - 길드 멤버 등급 부족
	SHOP_PRODUCT_PURCAHSE_FAILED_GUILD_MEMBER_RANK = 100022,

	/// 길드 코인을 더 이상 획득할 수 없습니다.
	GUILD_COIN_IS_FULL = 100023,
	
	/// 군주 포인트를 더 이상 획득할 수 없습니다.
	MONARCH_POINT_IS_FULL = 100024,

	/// __UNUSED = 100025,
	
	/// 가신의 영혼석 갯수가 부족합니다.
	NOT_ENOUGH_FOLLOWER_SOUL_STONE = 100026,
	
	/// 가신의 레벨이 만렙 입니다.
	FOLLOWER_ALREADY_FULL_LEVEL = 100027,
	
	/// 보너스 포인트가 부족합니다.
	SHOP_PRODUCT_NOT_ENOUGH_BONUS_POINT = 100028,
	
	/// 다이아를 더 이상 획득할 수 없습니다.
	DIA_IS_FULL = 100029,
	
	/// 라이브 이벤트 기간이 아닙니다.
	NOT_LIVE_EVET_PERIOD = 100030,

	/// 라이브 이벤트 정보를 업데이트 중입니다.
	UPDATING_LIVE_EVENT_DATA = 100031,

	/// 존재하지 않는 이벤트 상점 상품 입니다.
	NOT_EXIST_LIVE_EVENT_PRODUCT = 100032,

	/// 존재하지 않는 이벤트 미션입니다.
	NOT_EXIST_LIVE_EVENT_MISSION = 100033,

	// 라이브 이벤트 구매 가능한 횟수를 초과했습니다.
	EXCEEDED_LIVE_EVENT_PURCHASE_COUNT = 100034,

	// 특별출석부 보상정보가 존재하지않습니다.
	NOT_EXIST_LIVE_EVENT_ATTETION	= 100035,

	// 특별출석부 보상수령에 실패하였습니다.
	FAILED_TO_RECEIVE_ATTENTION_REWARD = 100036,

	// 특별출석부 보상 수령이 가능한 상태가 아닙니다.
	CANNOT_RECEIVE_ATTENTION_REWARD = 100037,

	// 존재하지 않는 특별출석 보상아이템 입니다.
	NOT_EXIST_LIVE_EVENT_ATTENTION_REWARD = 100038,

	// 이미 수령한 보상입니다.
	ALREADY_RECEIVE_ATTENTION_REWARD = 100039,

	// 외형장비 계승시 재료장비가 대상장비의 성장도보다 낮습니다.
	NOT_ENOUGH_GROWTH_INHERIT_MATERIAL_ITEM = 100040,

	// 계승하려는 외형장비의 부위가 다릅니다.
	CAN_NOT_INHERIT_DIFFERENT_COSTUME_TYPE = 100041,

	// 점핑 캐릭터 횟수가 부족합니다.
	NOT_ENOUGH_JUMPING_COUNT = 100042,

	/// PvP코인이 부족합니다
	NOT_ENOUGH_PVP_COIN = 100043,
	/// PvP코인을 더 이상 획득할 수 없습니다.
	PVP_COIN_IS_FULL = 100044,

	///-----------------------------------------------------------------------------
	/// 전투(200000 ~ 299999)
	///-----------------------------------------------------------------------------

	NOT_FOUND_EVENT_SET = 200001,
	INVALID_CHANNEL_STATE = 200002,

	INVALID_WEEK = 200004,
	/// __UNUSED = 200005,
	FAILED_ADDITIONAL_ENTER = 200006,

	INVALID_PAID_TYPE = 200008,
	FAILED_DAILY_DUNGEON_INVALID_CHAPTER = 200009,
	FAILED_SOLO_DUNGEON_LARGE_CONDITION = 200010,
	FAILED_SOLO_DUNGEON_MIDDLE_CONDITION = 200011,
	FAILED_SOLO_DUNGEON_STAGE_CONDITION = 200012,
	FAILED_SOLO_DUNGEON_TODAY_CLEAR_COUNT_OVER = 200013,
	FAILED_SOLO_DUNGEON_NOT_ENOUGH_TICKET = 200014,
	INVALID_SOLO_DUNGEON_STAGE_ID = 200016,

	ALREADY_DUNGEON_ENTER_PROCESSING = 200018,
	ARENA_PLEASE_APPLY_AGAIN_AFTER_A_WHILE = 200019,

	ARENA_NOT_ENOUGH_ENTER_COUNT = 200021,
	ARENA_REWARD_INFO_ERROR = 200022,




	///-----------------------------------------------------------------------------
	/// 월드(300000 ~ 399999)
	///-----------------------------------------------------------------------------

	// 월드 공통 300000 번대
	WORLD_INVALID_EVENT_SET_ID = 300001,
	WORLD_INVALID_EVENT_ID = 300002,
	
        // 유효하지 않은 CONTEXT 데이터

	WORLD_INVALID_CHANNEL = 300004,

	WORLD_NO_FIELD_CONTENTS = 300006,

	/// 알 수 없는 채널이동 에러
	CHANNEL_UNKNOWN = 300010,

	/// 채널이 존재하지 않습니다
	CHANNEL_NOT_EXIST = 300011,

	/// 채널이동을 할 수 없는 지역입니다.
	CHANNEL_CAN_NOT_MOVE_SMAP = 300012,

	/// 현재는 채널 이동을 할 수 없습니다. (이동중이거나 스폰중이거나)
	CHANNEL_CAN_NOT_MOVE_NOW = 300013,

	/// 채널 인원 제한으로 입장 할 수 없습니다.
	CHANNEL_USER_COUNT_LIMIT = 300014,

	/// 채널이동 시간 제한으로 이동할 수 없음
	CHANNEL_MOVE_TIME_LIMIT = 300015,


	// 이벤트300050 번대
	EVENT_NO_EVENT_INSTANCE = 300050,
	EVENT_INVALID_DEST_POS = 300053,
	
	// 위치 복귀
	EVENT_RETURN_NO_SAVE_POS = 300054,
	EVENT_RETURN_DISCORD_ID = 300055,
	EVENT_RETURN_DISCORD_SMAP_ID = 300056,
	EVENT_RETURN_NO_FIELD_CONTENT = 300057,

	// 퀘스트 300100 번대
	QUEST_INVALID_ID_FAIL = 300101,			// ID가 유효하지 않음.
	QUEST_LACK_COUNT_FAIL = 300102,			// 카운트가 MAX에 도달하지 않음.
	QUEST_ACCEPTED_REWARD_FAIL = 300103,	// 이미 보상을 받았음.
	QUEST_PROCESSING_REWARD_FAIL = 300104,	// 보상을 진행중에 있음.
	QUEST_DB_UPDATE_FAIL = 300105,			// 업데이터에 실패함.

	/// 퀘스트의 보너스 보상 300200 번대
	ALREADY_HAD_A_QUEST_BONUS_REWARD = 300201,
	INVALID_QUEST_BONUS_ID = 300202,
	FAILED_CONDITION_QUEST_BONUS = 300203,

	// 챕터 에러 코드 300300 번대
	CHAPTER_FAIL_INVALID_CHAPTER_INDEX = 300301,	// 잘못 할당된 챕터 인덱스
	CHAPTER_FAIL_INVALID_ASSIGN_SMAP_ID = 300302, 	// 잘못 할당된 SMAP ID
	CHAPTER_FAIL_INVALID_ASSIGN_CINEMA_ID = 300303,	// 잘못 할당된 SMAP ID
	CHAPTER_FAIL_CLEAR_PREVIOUS_CHAPTER = 300304,	// 이전 챕터를 클리어 하지 않음
	CHAPTER_FAIL_LACK_FIGHT_POWER = 300305,			// 전투력이 부족함.
	CHAPTER_FAIL_LACK_SMAP_RATE = 300306,			// SMAP 달성율 부족
	CHAPTER_FAIL_NO_SEE_CINEMA = 300307,			// 시작 연출을 보지 않음.
	CHAPTER_FAIL_LACK_LEVEL = 300308,				// 레벨이 부족함
	CHAPTER_FAIL_LACK_MMAP_RATE = 300309, 			// MMAP 달성율 부족
	CHAPTER_FAIL_UPDATE_DB = 300310,				// DB 갱신에 실패
	CHAPTER_FAIL_INVALID_TEMPLTE = 300311,			// 데이터 템플릿 참조 실패.
	CHAPTER_FAIL_INVALID_PER_DATA = 300312,			// 개별 데이터 참조 실패
	CHAPTER_LESS_LEVEL = 300313,					// 레벨이 필요레벨보다 작다
	CHAPTER_LESS_ACHIEVEMENT_RATE = 300314,			// 달성률이 부족하다
	CHAPTER_NOT_CLEARED_QUEST = 300315,				// 조건 퀘스트를 완료하지 못했다
	CHAPTER_NO_NEXT_SMAP = 300316,					// 다음 챕터smap이 없다. 마지막 챕터를 오픈 시도하면 발생
	CHAPTER_NOT_FOUND_SMAP_CLEAR_TEMPLATE = 300317,	// 현재 챕터/SMapIndex에 해당하는 템플릿이 없음. 나오면 안됨
	CHAPTER_LOCKED_SMAP = 300318,					// 잠겨있는 SMAP이라서 입장할 수 없다
	CHAPTER_NOT_CLEARED_MAIN_STREAM = 300319,		// 조건 메인 스트림을 완료하지 못했다

	// 추천 시스템 300400 번대
	RECOMMEND_NO_LIST = 300401, 				// 현재 추천 리스트가 없음 (서버에게 문의)
	RECOMMEND_EXPIRED_TIME = 300402,			// 시간 만료
	RECOMMEND_VOTED_INVALID_PC_DB_ID = 300403,  // 잘못된 PC DBID로 투표함.
	RECOMMEND_ALREADY_VOTED = 300404, 			// 이미 투표함.

	// 거래소 300500번대
	TRADE_FAIL_ALREADY_TRYING_SEARCH = 300501,	// 이미 검색중
	TRADE_FAIL_SET_ITEM_INVALID_CREATE_TYPE = 300502,	// 거래 불가능한 아이템 생성타입니다

	// 던전 공통
	DUNGEON_NOT_ENOUGH_CLEAR_COUNT = 300550,	// 이미 최대횟수만큼 클리어해서 입장불가능합니다
	
	// 사령부 300600번대
	PUSH_JOIN_FAILED_NOT_ENOUGH_MATCHING_COUNT = 300600,	// 더 이상 매칭신청할 수 없습니다. (현재 최대 1개만 신청가능)

	// 레이드 300700번대
	RAID_JOIN_FAILED_NOT_ENOUGH_COUNT = 300700,				// 입장횟수가 부족합니다.
	RAID_JOIN_FAILED_NOT_ENOUGH_COST_ITEM = 300701,			// 입장아이템이 부족합니다.
	RAID_JOIN_FAILED_INVALID_CHAPTER = 300702,				// 입장 불가능한 챕터 난이도입니다.

	/// 일일과제
	/// 활약도 보상 아이디가 잘못됐다
	DAILY_HW_INVALID_POINT_REWARD_ID = 300800,
	DAILY_HW_NOT_ENOUGH_POINT_REWARD = 300801,

	// 이미 보상을 수령하였습니다 (완료된 활약도 보상)
	DAILY_HW_COMPLETED_REWARD = 300802,

	///  보너스-일일충전
	BONUS_DAILY_RECHARGE_FAILED_ALREADY_REWARDED = 300810,	// 충전 실패, 오늘은 이미 받았습니다.	
	
	/// 무한의 탑
	INFINITE_TOWER_INVALID_STAGE = 300820,						// 이전 층을 클리어하지 않았습니다.
	INFINITE_TOWER_INVALID_STAGE_ALREADY_CLEARED = 300821,		// 이미 클리어한 층은 재도전 불가능합니다.
	INFINITE_TOWER_ALREADY_REWARDED = 300822,					// 오늘 토벌 보상은 이미 받았습니다.	
	INFINITE_TOWER_INVALID_PAID_TYPE = 300823,					// 지불타입이 잘못되었습니다.
	INFINITE_TOWER_INVALID_SWEEP_STAGE = 300824,				// 토벌 요청온 stage가 잘못되었습니다.
	
	/// 출석체크	
	ATTENDANCE_ALREADY_STAMPED = 300830,	// 오늘은 이미 출석도장을 찍었습니다.
	ATTENDANCE_INVALID_BOARD = 300831,		// 잘못된 출석판 정보
	
	/// 접속보상
	ACCESS_TIME_INVALID_TIME = 300833,				 // 요청 온 시간값이 잘못되었습니다(서버접속시간<클라접속시간일때)
	ACCESS_TIME_ALREADY_TODAY_ALL_REWARDED = 300834, // 오늘 보상은 모두 받았습니다.	
	ACCESS_TIME_ALREADY_REWARDED = 300835,			 // 현재 접속시간에 해당하는 보상 이미 받았습니다
	ACCESS_TIME_NOT_ENOUGH_TIME = 300836,			 // 최소보상을 받을만큼도 접속하지 않았습니다	
	
	/// 휴식보상
	REST_TIME_NOT_ENOUGH_REST_POINT = 300838,	// 휴식 점수가 부족합니다
	
	///
	/// SMAP 조인 관련 에러
	///

	///
	JOIN_FAIL_UNKNOWN = 300900,

	/// 채널 이동중이다
	JOIN_FAIL_CHANNELING = 300901,		// JOIN_CHANNEL_REASON_FAIL_ACTIVATE

	/// 스폰이 아직 안되서 채널이동이 불가
	JOIN_FAIL_NO_SPAWNED = 300902,		// JOIN_CHANNEL_REASON_FAIL_NO_SPAWNED

	/// 데이터가 잘못됨
	JOIN_FAIL_NO_DATA = 300903,			// JOIN_CHANNEL_REASON_FAIL_NO_DATA

	/// SMAP ID가 잘못됨. 데이터 문제
	JOIN_FAIL_INVALID_SMAPID = 300904,	// JOIN_CHANNEL_REASON_FAIL_INVALID_SMAPID

	/// 동일한 SMAP으로 이동하려고 했다
	JOIN_FAIL_SAME_SMAPID = 300905,

	///
	/// #골드던전
	///	
	/// 골드던전 템플릿 아이디가 잘못됨
	GOLD_DUNGEON_INVALID_ID = 301001,

	/// 입장 횟수 제한으로 입장 불가
	GOLD_DUNGEON_LIMIT_ENTER_COUNT= 301002,

	/// 입장아이템 부족
	GOLD_DUNGEON_NOT_ENOUGH_ITEM = 301003,

	/// 입장 조건을 만족하지 못함
	GOLD_DUNGEON_LIMIT_ENTER = 301004,

	///
	/// 인터랙션
	///

	/// 알수 없는 에러
	INTERACT_UNKNOWN = 301010,

	/// 취소함
	INTERACT_CANCEL = 301011,

	/// 알 수 없는 오브젝트
	INTERACT_INVALID_OBJECT = 301012,

	/// 인터렉션 할 수 없음
	INTERACT_CANNOT_INTERACTION = 301013,

	/// 거리가 멀어 인터랙션 할 수 없음
	INTERACT_TOO_FAR_DISTANCE = 301014,

	/// 공동 채집인원 초과
	INTERACT_OVER_MAX_USER = 301015,

	/// 비용이 부족함
	INTERACT_NOT_ENOUGH_COST = 301016,

	/// 인벤에 공간이 부족함
	INTERACT_NOT_ENOUGH_INVEN_SLOT = 301017,

	/// 메인 스트림 때문에 할수 없음.
	INTERACT_CANNOT_BY_MAINSTREAM = 301018,
	
	/// 점유시간 충분하지 않음.
	INTERACT_NOT_ENOUGH_OCCUPIED_TIME = 301019,

	/// 전쟁필드 채집횟수 제한으로 채집할 수 없음
	INTERACT_BATTLE_FIELD_COLLECTION_COUNT_OVER = 301020,
	
	/// 유효하지 않은 데이터
	INTERACT_INVALID_DATA = 301021,
	
	/// 인터랙션 할 대상을 찾을 수 없다
	INTERACT_CANNOT_FIND_TARGET_OBJECT = 301022,
	
	/// pc가 죽거나 죽어갈땐 인터랙션 할 수 없다
	INTERACT_CANNOT_ON_DEAD = 301023,
	
	/// pc가 다른 행동중엔 인터랙션 할 수 없다
	INTERACT_CANNOT_ON_DOING_SOMETHING = 301024,
	
	/// 다른 대상과 인터랙션 중이어서, 추가로 할 수 없다
	INTERACT_CANNOT_ALREADY_DOING_WITH_OTHER = 301025,
	
	/// 이미 동일 대상과 인터랙션 중이다
	INTERACT_CANNOT_ALREADY_DOING_WITH_THIS = 301026,
	
	/// 다른 유저가 점유중인 오브젝트여서 인터랙션 할 수 없다
	INTERACT_CANNOT_OCCUPIED_OBJECT = 301027,	
	
	/// 대상이 스폰상태가 아니라서 인터랙션 할 수 없다
	INTERACT_CANNOT_OBJECT_NOT_SPAWNED = 301028,
	
	/// pc가 사망상태라 인터랙션 보상받기에 실패했다
	INTERACT_CANNOT_REWARDED_ON_DEAD = 301029,
	
	/// pc가 대상과 거리가 멀어져 인터랙션 보상받기에 실패했다
	INTERACT_CANNOT_REWARDED_TOO_FAR_DISTANCE = 301030,		
	
	///
	/// #길드
	///

	GUILD_UNKNOWN = 301100,


	/// 사용자 입력 데이터가 잘못됨
	GUILD_INVALID_PARAM = 301102,

	/// 길드를 생성할 수 없음
	GUILD_CANNOT_CREATE_GUILD = 301103,

	/// 길드를 가입할 수 없음
	GUILD_CANNOT_JOIN_BY_CONDITION = 301104,

	/// 이미 길드에 가입되어 있다
	GUILD_ALREADY_JOINED = 301105,

	/// 길드 최대 인원을 초과해서 가입할 수 없음
	GUILD_CANNOT_JOIN_LIMIT_COUNT = 301106,

	/// 이미 가입 신청을 했음
	GUILD_ALREADY_JOIN_REQUEST = 301107,

	/// 길드장은 탈퇴를 할 수 없음
	GUILD_CANNOT_LEAVE_LEADER = 301108,

	/// 길드장을 강퇴할 수 없음
	GUILD_CANNOT_KICK_LEADER = 301109,
	
	/// 길드장은 캐릭터를 삭제할 수 없다
	GUILD_CANNOT_LEADER_DELETE_PC = 301110,

	/// 권한이 없습니다.
	GUILD_DO_NOT_HAVE_PERMISSION = 301111,

	/// 길드명 중복 (길드 생성시 발생)
	GUILD_NAME_DUPLICATED = 301112,

	/// 길드에 가입되어 있지 않음.
	GUILD_NOT_JOIN = 301113,

	/// 길드에 멤버가 있어 해산 불가
	GUILD_MEMBER_NOT_EMPTY = 301114,

	/// 내 길드를 찾을 수 없음 (내길드)
	GUILD_NOT_FOUND_MY_GUILD = 301115,

	/// 길드원이 아님
	GUILD_NOT_MEMBER = 301116,

	/// 이미 출석했음
	GUILD_ALREADY_ATTEND = 301117,

	/// 길드를 찾을 수 없음 (다른 길드 정보를 요청했을 때 발생할 수 있음)
	GUILD_NOT_FOUND = 301118,
	
	/// 같은 등급으로 변경할 수 없음
	GUILD_CAN_NOT_CHANGE_SAME_MEMBER_GRADE = 301119,

	/// 길드 버프가 최대치이다 (최대치인데 레벨업 할 경우)
	GUILD_BUFF_MAX_LEVEL = 301120,

	/// 구매할 수 없는 길드 버프
	GUILD_BUFF_CAN_NOT_PURCHASE = 301121,

	/// 잘못된 페이지 번호 (음수 또는 페이지 번호 초과)
	GUILD_INVALID_PAGE_NUMBER = 301122,

	/// 길드 가입 or 창설이 아직 안됨. 탈퇴 후 24시간이 지나야 할 수 있다
	GUILD_CAN_NOT_JOIN_OR_CREATE_YET = 301123,

	/// 길드장으로 위임할 수 없는 대상이다
	GUILD_INVALID_CADIDATE_LEADER = 301124,

	/// 내 계급을 변경할 수 없다
	GUILD_CAN_NOT_CHANGE_MY_GRADE = 301125,

	/// 길드에 가입요청이 최대치라 가입 신청 불가
	GUILD_MAX_APPLICANT = 301126,

	/// 유저의 가입 요청이 최대라 가입 신청 불가
	GUILD_MAX_JOIN_REQUEST = 301127,

	/// 길드 레벨 제한이 걸림
	GUILD_LEVEL_LIMIT = 301128,

	/// 길드 레벨이 최대 레벨이다 (레벨업 불가)
	GUILD_MAX_LEVEL = 301129,

	/// 길드 경험치가 부족하다 (레벨업 불가)
	GUILD_NOT_ENOUGH_EXP = 301130,

	/// 비용이 부족함
	GUILD_NOT_ENOUGH_COST = 301131,

	/// 리더의 계급을 변경할 수 없다
	GUILD_CAN_NOT_CHANGE_LEADER_GRADE = 301132,

	/// 길드명에 금칙어가 포함되어 있다
	GUILD_PROHIBIT_WORDS_IN_NAME = 301133,

	/// 길드 메시지(소개문, 공지)에 금칙어가 포함되어 있다
	GUILD_PROHIBIT_WORDS_IN_MESSAGE = 301134,

	/// 길드명이 길거나 짧다.
	GUILD_INVALID_NAME_LENGTH = 301135,

	/// 소개문이 길거나 짧다
	GUILD_INVALID_INTRO_LENGTH = 301136,

	/// 공지문이 길거나 짧다
	GUILD_INVALID_NOTICE_LENGTH = 301137,

	/// 가입 요청이 취소됐거나 PcDbId가 잘못됐다.
	GUILD_NOT_FOUND_JOIN_REQ = 301138,

	/// 자신을 추방할 수 없다
	GUILD_CAN_NOT_KICK_SELF = 301139,

	/// 계급 인원 제한으로 계급을 변경할 수 없다
	GUILD_LIMIT_MEMBER_GRADE_COUNT = 301140,

	/// 프리징 기간에는 길드탈퇴를 할 수 없습니다.
	GUILD_CAN_NOT_LEAVE_IN_SEASON_OFF = 301141,

	/// 프리징 기간에는 할 수 없습니다.
	GUILD_CAN_NOT_ACTION_IN_SEASON_OFF = 301142,

	/// 높은 계급은 강퇴할 수 없습니다.
	GUILD_CAN_NOT_KICK_HIGHER_GRADE_MEMBER = 301143,

	/// 높은 계급의 길드원 계급을 변경할 수 없습니다
	GUILD_CAN_NOT_CHANGE_HIGHER_GRADE_MEMBER = 301144,

	/// 자신보다 높은 계급으로 설정할 수 없습니다.
	GUILD_CAN_NOT_CHANGE_GRADE_TO_HIGHER = 301145,

	/// 길드명 변경 대상 길드가 아닙니다.
	GUILD_CAN_NOT_CHANGE_NAME = 301146,

	/// 플레이어와 길드의 렐름이 상이함
	GUILD_CAN_NOT_JOIN_DIFFERENT_REALM = 301147,
	
	///
	/// #RVR 전쟁필드
	///

	/// 전쟁필드 요청가능한 채널컨텐츠타입이 아님(마을,필드에서만 신청가능)
	RVR_NOT_JOINABLE_CONTENTS_TYPE = 301301,
	
	/// 전쟁필드 입장가능 메인스트림 아이디 조건에 맞지않음
	RVR_NOT_JOINABLE_MAINSTREAM_ID = 301302,
	
	/// 보유한 전쟁필드 시간이 없어서 입장할 수 없음
	RVR_NOT_ENOUGH_TIME = 301303,
 
        /// 컨트롤러 오브젝트 참조 불가
	RVR_INVALID_CONTROLLER_OBJECT = 301304,

        /// 이미 진행중 
	RVR_ALREADY_RPOCESSING = 301305,

        /// 잘못된 RVR ID
	RVR_INVALID_RVRID = 301306,
    
	/// 배틀 서버와 접속이 끓어짐.
	RVR_DISCONNECT_BATTLE_SERVER = 301307,
	
	/// 신청한 데이터가 존재 하지 않음
	RVR_NOT_EXIST_INFO = 301308,
	
	/// 신청했던 RVRID와 불일치
        RVR_DISCORD_EXIST_RVRID = 301309,

	/// 참여 가능한 순번이 아니다
        RVR_NOT_JOINABLE_ORDER = 301310,

	// 렐름 정보가 없다.
      	RVR_NOT_EXIST_REALM_CONTEXT = 301311,
	
  	/// __UNUSED = 301312,

	// 배틀 필드가 닫힌 상태
  	RVR_CLOSED_BATTLE_FIELD = 301313,

	// 다른 배틀 필드에서 등록한 상태
  	RVR_JOINED_OTHER_BATTLE_FIELD = 301314,

	// RVR 실패
  	RVR_DEFAULT_FAILED = 301315,

	// 난투장이 닫힌 상태
  	RVR_CLOSED_BATTLE_FIELD_BRAWL= 301316,

	// 난투장 임시점검
  	RVR_TEMPORARY_INSPECT_BRAWL= 301321,
			
	// 이미 보유 친구수가 최대입니다
	BUDDY_ALREADY_MAX_BUDDY_COUNT = 301401,
	
	// 이미 친구사이입니다
	BUDDY_ALREADY_BUDDY = 301402,
	// 이미 친구요청을 보낸 PC입니다
	BUDDY_ALREADY_INVITATION_SEND_BUDDY = 301403,
	// 이미 친구요청을 받은 PC입니다
	BUDDY_ALREADY_INVITATION_RECEIVE_BUDDY = 301404,
	
	// 해당 PC로부터 받은 요청이 없습니다	
	BUDDY_CANNOT_FIND_IVNITATION_FROM_PC = 301405,
	// 해당 PC에게 보낸 요청이 없습니다
	BUDDY_CANNOT_FIND_IVNITATION_TO_PC = 301406,
	
	// 친구 삭제하기 실패 - 친구사이가 아니다
	BUDDY_DELETE_FAILED_NOT_BUDDY = 301407,

	// 만료된 요청입니다
	BUDDY_INVITATION_EXPIRED = 301410,
	
	// 보낸 요청이 가득 찼습니다
	BUDDY_SEND_INVITATION_MAX_COUNT = 301411,
	// 받은 요청이 가득 찼습니다
	BUDDY_RECEIVE_INVITATION_MAX_COUNT = 301412,
	
	// 상대방 친구수가 최대입니다
	BUDDY_OTHER_BUDDY_COUNT_ALREADY_MAX = 301413,
	
	// 해당 PC와 친구가 아닙니다.
	BUDDY_INVALID_BUDDY = 301415,
	
	///
	/// 친구소환	
	/// 
	// 소환할 수 있는 이벤트 상태가 아닙니다(N초 이후 or 이벤트결과나옴)
	SUMMON_REQUEST_FAILED_INVALID_EVENT_STATE = 301419,
	
	// 소환하기 요청할 PC를 찾을 수 없습니다(온라인아닌경우)
	SUMMON_REQUEST_FAILED_CANNOT_FIND_BUDDY = 301420,
	
	// 소환하기 실행할 내 채널이 없습니다
	SUMMON_REQUEST_FAILED_INVALID_CHANNEL = 301421,
	
	// 내 좌표가 유효하지 않습니다
	SUMMON_REQUEST_FAILED_INVALID_POS = 301422,
	
	// 소환하기 요청할 수 없는 채널컨텐츠 타입
	SUMMON_REQUEST_FAILED_INVALID_CONTENTS_TYPE = 301423,
	
	// 채널 인원이 가득차, 소환할 수 없습니다	
	SUMMON_REQUEST_FAILED_MAX_PC_COUNT_IN_CHANNEL = 301424,

	/// 잘못된 요청 (친구나, 길드원이 아님)
	SUMMON_REQUEST_INVALID_TARGET = 301425,
	
	/// 소환하기 요청 개수가 이미 최대입니다
	SUMMON_REQUEST_FAILED_MAX_COUNT = 301426,
	
	/// 이미 해당 유저에게 소환하기 요청을 보냈습니다
	SUMMON_REQUEST_FAILED_ALREADY_SEND_BUDDY = 301427,
	
	/// 해당 유저에게 받은 소환하기 요청이 있습니다
	SUMMON_REQUEST_FAILED_ALREADY_RECEIVE_BUDDY = 301428,
	
	// 소환하기 요청받을 수 없는 채널컨텐츠 타입
	SUMMON_RECEIVE_FAILED_INVALID_CONTENTS_TYPE = 301429,
	
	// 상대방이 올 수 없는 SMAP입니다
	SUMMON_RECEIVE_FAILED_CANNOT_ENTER_SMAP = 301430,
	
	// 상대방이 받은 요청개수가 많아 더이상 요청할 수 없습니다	
	SUMMON_RECEIVE_FAILED_MAX_COUNT = 301431,

	// 받은 소환요청 정보를 찾을 수 없습니다(만료로 삭제)
	SUMMON_ACCEPT_FAILED_CALL_EXPIRED = 301432,
	
	// 해당 채널을 찾을 수 없습니다(채널소멸시)
	SUMMON_ACCEPT_FAILED_CANNOT_FIND_CHANNEL = 301433,
	
	// 소환요청을 보낸 PC를 찾을 수 없습니다
	SUMMON_ACCEPT_FAILED_CANNOT_FIND_CALLER = 301434,
	
	// 입장아이템이 없어, 들어갈 수 없습니다
	MOVE_TO_PC_FAILED_NOT_ENOUGH_TICKET = 301435,
	
	// 메인스트림 조건 때문에, 소환하기 불가능합니다.
	SUMMON_REQUEST_FAILED_INVALID_MAINSTREAM_ID = 301436,
	
	// 상대방의 메인스트림 조건 때문에, 소환 요청받기가 불가능합니다.
	SUMMON_ACCEPT_FAILED_INVALID_MAINSTREAM_ID = 301437,
	
	// Dying, Dead 상태에서는 소환요청을 수락할 수 없습니다.
	SUMMON_ACCEPT_FAILED_NOT_ALIVE_STATE = 301438,	
	
	// 이동하려는 곳의 이벤트 상태가 유효하지 않습니다(N초 이후 or 이벤트결과나옴)
	SUMMON_ACCEPT_FAILED_INVALID_EVENT_STATE = 301439,
	
	///
	/// 친구위치로 이동하기
	/// 
	// 해당 친구를 찾을 수 없습니다(온라인 아닐경우)
	MOVE_TO_PC_FAILED_CANNOT_FIND_BUDDY = 301440,
	
	/// 친구의 채널이 없는경우(친구가 스폰되지 않았을때도)
	MOVE_TO_PC_FAILED_INVALID_CHANNEL_STATE = 301441,
	
	// 이동할 수 없는 채널컨텐츠타입(출발지) 입니다
	MOVE_TO_PC_FAILED_INVALID_CONTENTS_TYPE_SRC = 301442,
	
	// 이동할 수 없는 채널컨텐츠타입(목적지) 입니다
	MOVE_TO_PC_FAILED_INVALID_CONTENTS_TYPE_DES = 301443,
	
	// 이동할 수 없는 SMap입니다
	MOVE_TO_PC_FAILED_INVALID_SMAP = 301444,

	// 메인스트림 조건 때문에, 이동하기 불가능 합니다.
	MOVE_TO_PC_FAILED_INVALID_MAINSTREAM_ID = 301445,
	
	// 상대방의 메인스트림 조건 때문에, 이동하기 불가능 합니다.
	MOVE_TO_PC_FAILED_TARGET_INVALID_MAINSTREAM_ID = 301446,
	
	// Dying, Dead 상태에서는 이동할 수 없습니다.
	MOVE_TO_PC_FAILED_NOT_ALIVE_STATE = 301447,	
	
	// 상대방의 채널인원이 가득차, 이동할 수 없습니다.
	MOVE_TO_PC_FAILED_MAX_PC_COUNT_IN_CHANNEL = 301448,
	
	// 이동하려는 곳의 이벤트 상태가 유효하지 않습니다(N초 이후 or 이벤트결과나옴)
	MOVE_TO_PC_FAILED_INVALID_EVENT_STATE = 301449,
	
	/// 
	/// 차단
	///

	// 이미 차단된 캐릭터입니다.
	ALREADY_DENIED_CHARACTER = 301500,

	// 이미 차단해제된 캐릭터입니다.
	ALREADY_UNDENIED_CHARACTER = 301501,
	
	///
	/// 매칭
	///
	
	/// 인원 미달 매칭 취소
	MATCHING_CANCEL_MIN_USER_TIMEOUT = 301600,
		
	/// 인원이 가득차서 더이상 매칭 홍보할 수 없습니다.
	MATCHING_PROMOTION_FAILED_ALREADY_MAX_PC = 301601,
	
	/// 홍보 가능한 시간이 아닙니다 (쿨타임 중)
	MATCHING_PROMOTION_FAILED_COOLTIME = 301602,	
	
	/// 마을, 필드에서만 매칭 참여신청 가능합니다.
	MATCHING_FAILED_INVALID_CHANNEL_CONTENTS_TYPE = 301610,
	
	/// 푸시 정보를 찾을 수 없을때 (푸시가 종료된 경우 OR 푸시알림 받지않은 PC가 요청올 때)
	PUSH_JOIN_FAILED_CANNOT_FIND_PUSH = 301620,
	
	/// 이미 다른 매칭 진행중입니다.
	PUSH_JOIN_FAILED_ALREADY_JOINED_OTHER_MATCH = 301621,	
		
	/// 해당 방을 찾을 수 없습니다.(존재하지 않는 매칭)
	PUSH_JOINED_FAILED_CANNOT_FIND_MATCHING = 301630,
	
	/// 이미 방이 가득차서 입장할 수 없습니다.
	PUSH_JOINED_FAILED_ALREADY_FULL = 301631,

	/// 그룹매칭에 초대할 상대방을 찾을 수 없다.
	GROUP_MATCHING_FAILED_CANNOT_FIND_TARGET = 301632,
	
	/// 그룹매칭 초대자가 없다.(오프라인)
	GROUP_MATCHING_CANNOT_FIND_INVITER_PC = 301633,
	
	/// 그룹매칭 받은 초대장을 찾을 수 없다. (시간이 만료됐거나, 취소된 경우)
	GROUP_MATCHING_CANNOT_FIND_INVITATION = 301634,
	
	/// 그룹매칭 그룹원끼리 시작하기 실패. 최소인원을 만족하지 않음
	GROUP_MATCHING_START_FAILED_MIN_PC = 301635,

	// 그룹장이 방을 해체하여 매칭 취소
	MATCHING_CANCEL_GROUP_LEADER_LEAVE = 301636,	

	// 그룹장의 재매칭 가능시간이 지나서 재매칭 불가
	GROUP_MATCHING_REMATCHING_FAILED_EXPIRED = 301637,
	
	///
	/// #길드던전
	///	
	/// 길드던전 길드가 맞지 않음
	GUILD_DUNGEON_GUILD_NOT_JOIN = 301701,

	/// 길드던전 템플릿 아이디가 잘못됨
	GUILD_DUNGEON_INVALID_ID = 301702,

	/// 입장 횟수 부족
	GUILD_DUNGEON_LIMIT_ENTER_COUNT= 301703,

	/// 입장 아이템 부족
	GUILD_DUNGEON_NOT_ENOUGH_ITEM = 301704,

	/// 입장 조건을 만족하지 못함(해금 조건)
	GUILD_DUNGEON_LIMIT_ENTER = 301705,

	/// 길드던전 시즌 종료
	GUILD_DUNGEON_SEASON_CLOSED = 301706,
	
	/// 길드던전에서는 길드원만 소환가능하다
	GUILD_DUNGEON_INVALID_SUMMON_TARGET = 301707,
	
	/// 다른 길드 친구의 길드던전으로 이동할 수 없다.
	GUILD_DUNGEON_INVALID_MOVE_TARGET = 301708,
	
	
	///
	/// 난투장
	///
	
	// 난투장 포인트를 더 이상 획득할 수 없습니다.
	BRAWL_POINT_FULL = 301709, 

	// 난투장 시간이 부족합니다
	RVR_NOT_ENOUGH_BRAWL_TIME = 301710,	
	
	// 난투장 레벨업 실패 - 소지한 대난투 포인트가 부족합니다
	BRAWL_ENHANCE_FAILED_NOT_ENOUGH_BRAWL_POINT = 301711,
	
	// 난투장 레벨업 실패 - 소지한 확률 아이템 개수가 부족합니다
	BRAWL_ENHANCE_FAILED_NOT_ENOUGH_CHANCE_ITEM = 301712,
	
	// 난투장 레벨업 실패 - 확률 아이템 최대개수 이상을 넣을 수 없습니다
	BRAWL_ENHANCE_FAILED_CHANCE_ITEM_COUNT_OVERFLOW = 301713,
	
	// 난투장 레벨업 실패 - 이미 최대 레벨이라 더이상 강화할 수 없습니다
	BRAWL_ENHANCE_FAILED_ALREADY_MAX_LEVEL = 301714,
	
	// 난투장 레벨업 실패 - 이미 기원하기 진행중입니다
	BRAWL_ENHANCE_FAILED_ALREADY_PROCESS = 301715,
	
	/// 
	// 난투장 레벨업 실패 - 레벨 정보가 맞지 않음(서버레벨정보 클라레벨정보가 다른경우)
	BRAWL_ENHANCE_FAILED_INVALID_LEVEL = 301716,
	
	///
	/// 스크롤 퀘스트
	///
	
	// 해당 스크롤퀘스트 데이터를 찾을 수 없다
	SCROLL_QUEST_INVALID_DATA = 301720,
	
	// 잘못된 스크롤퀘스트 ID(진행중인 스크롤퀘스트ID와 다를경우)
	SCROLL_QUEST_INVALID_SCROLL_ID = 301721,
	
	// 이미 활성화된 스크롤퀘스트가 있어서, 스크롤퀘스트 생성에 실패
	SCROLL_QUEST_CREATE_FAILED_ALREADY_HAVE_ANOTHER = 301722, 
	
	// 오늘의 수행횟수를 이미 채워서 스크롤퀘스트 생성에 실패
	SCROLL_QUEST_CREATE_FAILED_LIMIT_DAILY_COUNT = 301723, 
	
	// 메인스트림 조건을 만족하지 못함
	SCROLL_QUEST_CREATE_FAILED_MAINSTERAM = 301724,
	
	// 진행중인 스크롤퀘스트가 없는데 취소요청이 왔다
	SCROLL_QUEST_REMOVE_FAILED_ALREADY_HAVE_NOTING = 301725,
	
	// 현재 상태에서 취소할 수 없다(보상받기 단계만 남은 경우, 취소불가)
	SCROLL_QUEST_REMOVE_FAILED_INVALID_STATE_TO_CANCEL = 301726,
	
	// 현재 상태에서 취소할 수 없다(이미 취소한 스크롤퀘스트)
	SCROLL_QUEST_REMOVE_FAILED_ALREADY_REMOVED = 301727,
	
	// 난투장 재입장 딜레이 중입니다(퇴장 이후 일정시간 이후에 다시 입장가능)
	BRAWL_ENTER_FAILED_REENTER_DELAY = 301728,
	
	
	///
	/// 펫 시스템
	///	
	// 펫 가방이 가득차서 펫을 획득할 수 없습니다
	PET_INVEN_FULL = 301729,
	
	// 해당 펫 정보를 찾을 수 없습니다
	PET_INVALID_PET = 301730,
	
	// 펫 데이터 테이블 참고에 실패했습니다
	PET_INVALID_PET_DATA = 301731,	
	
	// 소환 실패 - 더이상 소환할 수 없습니다(소환 최대개수 체크)
	PET_SUMMON_FAILED_LIMIT = 301750,
	
	// 지원 실패 - 더이상 지원할 수 없습니다(지원 최대개수 체크)
	PET_SUPPORT_FAILED_LIMIT = 301751,
	
	// 이미 소환/지원중인 펫을 소환/지원 하려고 시도함
	PET_SUMMON_SUPPORT_FAILED_ALREADY_DOING = 301752,
		
	// 소환 취소 실패 - 이 펫은 소환중이 아닙니다
	PET_SUMMON_RELEASE_FAILED_NOT_SUMMONED = 301753,
	
	// 지원 취소 실패 - 이 펫은 지원중이 아닙니다
	PET_SUPPORT_RELEASE_FAILED_NOT_SUPPORTED = 301754,
	
	// 펫 먹이기 실패 - 이미 펫이 최대레벨입니다
	PET_FEED_FAILED_ALREADY_MAX_LEVEL = 301769,
	
	// 펫 먹이기 실패 - 펫 먹이 아이템이 아닙니다
	PET_FEED_FAILED_NOT_FOOD = 301770,
	
	// 펫 먹이기 실패 - 펫이 소환/지원 중이 아닙니다
	PET_FEED_FAILED_NOT_EQUIPED = 301771,
	
	// 펫 먹이기 실패 - 아직 소화중입니다
	PET_FEED_FAILED_COOLTIME = 301772,
	
	// 라피의 제단 스킬 레벨업 실패 - 잘못된 레벨로 레벨업 요청
	// . 현재레벨보다 1 초과 높은 레벨로 요청 오는경우
	// . 제단레벨에 개방된 최대 스킬레벨보다 높은 레벨로 요청 오는 경우
	PET_ALTAR_ACTIVE_SKILL_LEVEL_UP_FAILED_INVALID_LEVEL = 301773,
	
	// 오픈되지 않은 부화소에 액션을 시도함
	PET_HATCHERY_NOT_OPENED_HATCHERY = 301789,
	
	// 부화소 부화요청 실패 - 해당 id의 부화소는 현재 부화가능상태가 아니다
	PET_HATCHERY_SUMMON_FAILED_INVALID_STATE = 301790,
	
	// 부화소 펫 수령 실패 - 해당 id의 부화소는 현재 수령가능 상태가 아니다
	PET_HATCHERY_HATCH_FAILED_INVALID_STATE = 301791,
	
	// 소모할 제단포인트(라피의 구슬)이 부족합니다
	PET_NOT_ENOUGH_ALTAR_POINT = 301800,
	
	// 제단포인트를 더 이상 획득할 수 없습니다
	PET_ALTAR_POINT_FULL = 301801,
	
	// 펫 합성 실패 - 요청한 펫들의 등급이 일치하지 않습니다
	PET_FUSION_FAILED_NOT_EQUAL_GRADE = 301802,
	
	// 펫 합성 실패 - 재료 개수가 데이터와 일치하지 않습니다
	PET_FUSION_FAILED_INVALID_PET_COUNT = 301803,

	// 분쟁지역 채널이 아닙니다.
	CONFLICT_FILED_IS_NOT_CONFLICT_CHANNEL = 301900,

	// 배틀 서버에서는 SMAP을 이동할 수 없다.
	BATTLE_SERVER_CAN_NOT_MOVE_SMAP = 301901,
}

/// 스폰 이유
enum SpawnReason : int
{
	/// 스폰됨
	SP_ON_SPAWNED = 0,
	/// 시야에 나타남
	SP_ON_VIEWIN,
}

/// 디스폰 이유
enum DespawnReason : int
{
	/// 디스폰됨
	DP_ON_DESPAWNED = 0,
	/// 시야에서 벗어남
	DP_ON_VIEWOUT,
}

/// 컨텐츠 타입
enum ContentsType : int
{
	CONTENTS_TYPE_NONE = 0,
	CONTENTS_TYPE_TOWN,					// 마을
	CONTENTS_TYPE_FIELD,				// 돌발임무
	CONTENTS_TYPE_MISSION,				// 필수임무
	CONTENTS_TYPE_DAILY_DUNGEON,		// 요일던전
	CONTENTS_TYPE_SINGLE_EVENT,			// 토벌던전
	CONTENTS_TYPE_ARENA,				// 아레나
	CONTENTS_TYPE_RAID,					// 레이드
	CONTENTS_TYPE_TUTORIAL,				// 튜토리얼
	CONTENTS_TYPE_BOSS,					// 챕터보스
	CONTENTS_TYPE_GOLD_DUNGEON,			// 황금던전
	CONTENTS_TYPE_ILLIMITABLE_TOWER,	// 무한의 탑	
	CONTENTS_TYPE_BATTLE_FIELD,			// 전쟁필드
	CONTENTS_TYPE_GUILD_DUNGEON,		// 길드던전
	CONTENTS_TYPE_BRAWL,				// 난투장
	CONTENTS_TYPE_CONFLICT_FIELD, // 분쟁지역
	CONTENTS_TYPE_MAX,
}

enum ArenaSpendType : short
{
	ArenaSpendType_freeTicket = 0,
	ArenaSpendType_paidTicket,
	ArenaSpendType_dia,
}

enum TeamType : short
{
	TeamType_None = 0,
	TeamType_AreanTeamA,
	TeamType_AreanTeamB,
}

enum AreanPlayInfoType : short
{
	AreanPlayInfoType_None = 0,
	AreanPlayInfoType_Killed,
}

enum RedisRankType : short
{
	COMBAT_POWER = 0, //전투력
	INFLUENCE,        // 영향력
	DEEDS_OF_ARMS,    // 아레나
	MONARCH_POINT,	  // 군주포인트
	PVP_POINT,		  // PvP포인트
	RANK_TYPE_MAX, 
}

///- Pos ----------
table Pos
{
	x : float;
	y : float;
	z : float;
}

table ReactionInfo
{
	type : int;
	destPos : Pos (required);
	time : int;
	key : int;
}

table EffectTargetInfo
{
	objectId : long;
	pos : Pos (required);
	reaction : ReactionInfo (required);
}

///-----------------------------------------------------------------------------
/// PROTOCOL
///-----------------------------------------------------------------------------

///- PROTOCOL ----------
enum Protocol : int
{
	START									= 0,
	PING_NOTIFY								= 1,
	KEEP_ALIVE_NOTIFY						= 2,


	/////////////////////////////////////////
	/// Game Agent <-> Auth
	/////////////////////////////////////////
	GAME_AGENT_REGISTER_REQUEST				= 11,
	GAME_AGENT_REGISTER_RESPONSE			= 12,
	GAME_AGENT_LOGINED_USER_LIST_NOTIFY		= 13,

	GAME_AGENT_CHANGE_MAX_USER_COUNT_NOTIFY	= 14,

	GAME_AGENT_INFO_NOTIFY					= 15,

	CHECK_ACCOUNT_AUTH_REQUEST				= 21,
	CHECK_ACCOUNT_AUTH_RESPONSE				= 22,

	DB_UPDATE_REALM_NOTIFY					= 30,
	DB_UPDATE_PC_COUNT_NOTIFY				= 31,

	GAME_AGENT_LOGOUT_REQUEST				= 32,

	GAME_AGENT_PC_RENAME_NOTIFY				= 33,

	GAME_AGENT_SELECT_RESERVED_CHAR_REQUEST	= 34,
	GAME_AGENT_SELECT_RESERVED_CHAR_RESPONSE= 35,

	GAME_AGENT_GOTO_SERVER_LIST_REQUEST		= 40,
	GAME_AGENT_GOTO_SERVER_LIST_RESPONSE	= 41,

	GAME_AGENT_UPDATE_PLAYER_INFO_REQUEST	= 42,


	GAME_AGENT_CHARACTER_CREATION			= 44,

	GAME_AGENT_NAME_CHECK_REQUEST			= 45,
	GAME_AGENT_NAME_CHECK_RESPONSE			= 46,

	ACCOUNT_CACHE_EXPIRATION_RESERVE_REQUEST= 47,
	
	GAME_AGENT_HIVE_TOP_PC_INFO_REQUEST		= 48,
	GAME_AGENT_HIVE_TOP_PC_INFO_RESPONSE	= 49,

	GAME_AGENT_PLAYER_DELETE_NOTIFY			= 50,
	GAME_AGENT_PLAYER_CANCEL_DELETE_NOTIFY	= 51,

	GAME_AGENT_GIFTEVENT_MODIFY_NOTIFY		= 52,
	GAME_AGENT_NOTICE_NOTIFY				= 53,
	GAME_AGENT_ALL_KICK_NOTIFY				= 54,
	GAME_AGENT_MAINTENANCE_NOTIFY			= 55,
	GAME_AGENT_UPDATE_GAME_LANGUAGE_REQUEST = 56,

	/////////////////////////////////////////
	/// Auth Agent <-> Auth
	/////////////////////////////////////////
	AUTH_AGENT_SERVER_REGISTER_REQUEST		= 60,
	AUTH_AGENT_SERVER_REGISTER_RESPONSE		= 61,

	AUTH_AGENT_AUTH_REQUEST					= 62,
	AUTH_AGENT_AUTH_RESPONSE				= 63,

	AUTH_AGENT_LOGOUT_REQUEST				= 64,

	AUTH_AGENT_APKHASH_UPDATE_NOTIFY		= 65,

	AUTH_AGENT_AUTH_TICKET_REQUEST			= 70,
	AUTH_AGENT_AUTH_TICKET_RESPONSE			= 71,

	AUTH_AGENT_SELECT_RESERVED_NICK_NAME_REQUEST = 72,
	AUTH_AGENT_SELECT_RESERVED_NICK_NAME_RESPONSE = 73,
	
	AUTH_AGENT_HIVE_TOP_PC_INFO_REQUEST		= 74,
	AUTH_AGENT_HIVE_TOP_PC_INFO_RESPONSE	= 75,

	AUTH_AGENT_BAN_COUNTRY_REGIST_NOTIFY	= 76,
	AUTH_AGENT_BAN_COUNTRY_UNREGIST_NOTIFY	= 77,

	/////////////////////////////////////////
	/// Client <-> Auth Agent
	/////////////////////////////////////////
	CHECK_CLIENT_VERSION_REQUEST			= 101,
	CHECK_CLIENT_VERSION_RESPONSE			= 102,

	/// 일반 인증
	ACCOUNT_AUTH_REQUEST					= 103,
	ACCOUNT_AUTH_RESPONSE					= 104,

	/// 서버 선택창으로 이동 인증
	ACCOUNT_AUTH_AGENT_TICKET_REQUEST		= 105,

	COLONY_LIST_REQUEST						= 111,
	COLONY_LIST_RESPONSE					= 112,

	CHARACTER_LIST_REQUEST					= 113,
	CHARACTER_LIST_RESPONSE					= 114,

	HIVE_AUTH_REQUEST						= 115,
	HIVE_AUTH_RESPONSE						= 116,

	SELECT_COLONY_REQUEST					= 131,
	SELECT_COLONY_RESPONSE					= 132,

	/// server -> client
	SELECT_REALM_REQUEST					= 133,
	SELECT_REALM_RESPONSE					= 134,
	SELECT_REALM_BOT_RESPONSE				= 135,
	SELECT_COLONY_BOT_REQUEST				= 136,	// 봇 테스트 전용

	// 대기열
	COLONY_WAITING_NOTIFY					= 137,
	INQUIRE_WAITING_REQUEST					= 138,
	INQUIRE_WAITING_RESPONSE				= 139,
	CANCEL_WAITING_REQUEST					= 140,
	CANCEL_WAITING_RESPONSE					= 141,

	// 사전 닉네임 선정
	FIND_RESERVED_NICK_NAME_REQUEST			= 142,
	FIND_RESERVED_NICK_NAME_RESPONSE		= 143,

	SELECT_RESERVED_NICK_NAME_REQUSET		= 144,
	SELECT_RESERVED_NICK_NAME_RESPONSE		= 145,

	// 글로벌 서버 이전 관련
	FIND_RESERVED_CHAR_REQUEST				= 146,
	FIND_RESERVED_CHAR_RESPONSE				= 147,

	SELECT_RESERVED_CHAR_REQUEST			= 148,
	SELECT_RESERVED_CHAR_RESPONSE			= 149,

	
	// 운영툴 상점 지급
	SHOP_EVENT_DATA_UPDATE_NOTIFY			= 150,

	/// Common Packet
	STRING_MESSAGE_NOTIFY					= 1001,
	USER_KICK_NOTIFY						= 1002,
	CONTENT_CONFIG_UPDATE_NOFITY			= 1003,


	/////////////////////////////////////////
	/// Client <-> Agent
	/////////////////////////////////////////
	ACCOUNT_LOGIN_REQUEST					= 2001,
	ACCOUNT_LOGIN_RESPONSE					= 2002,
	SERVER_LOCAL_TIME_NOTIFY				= 2004,	// 서버의 로컬타임
	DEVICE_PERFORMANCE_POINT_NOTIFY			= 2005,	// 디바이스 점수(Upc 호스트 선정시 사용)

	/// 계정당 한번 보내준다
	SEASON_INFO_NOTIFY						= 2006,

	SERVER_LOCAL_TIME_REQUEST				= 2007,	// 서버의 로컬타임(클라 요청)
	SERVER_LOCAL_TIME_RESPONSE				= 2008,	// 서버의 로컬타임(클라 요청)

	SLOT_LIST_REQUEST						= 2011,
	SLOT_LIST_RESPONSE						= 2012,

	PC_TUTORIAL_SKIP_REQUEST				= 2013,
	PC_TUTORIAL_SKIP_RESPONSE				= 2014,

	PC_LOGIN_REQUEST						= 2015,
	PC_LOGIN_RESPONSE						= 2016,

	PC_CREATION_REQUEST						= 2021,
	PC_CREATION_RESPONSE					= 2022,

	PC_CHECK_NEW_NAME_REQUEST				= 2023,
	PC_CHECK_NEW_NAME_RESPONSE				= 2024,

	PC_RENAME_REQUEST						= 2025,
	PC_RENAME_RESPONSE						= 2026,

	PC_DELETE_REQUEST						= 2031,
	PC_DELETE_RESPONSE						= 2032,

	PC_CANCEL_DELETE_REQUEST				= 2033,
	PC_CANCEL_DELETE_RESPONSE				= 2034,

	PC_GOTO_LOBBY_REQUEST					= 2101,
	PC_GOTO_LOBBY_RESPONSE					= 2102,

	ACCOUNT_LOGOUT_REQUEST					= 2111,
	ACCOUNT_LOGOUT_RESPONSE					= 2112,

	GOTO_SERVER_LIST_REQUEST				= 2113,
	GOTO_SERVER_LIST_RESPONSE				= 2114,

	ACCOUNT_RECONNECT_REQUEST				= 2130,
	ACCOUNT_RECONNECT_RESPONSE				= 2131,
	
	HIVE_TOP_PC_INFO_REQUEST				= 2140,
	HIVE_TOP_PC_INFO_RESPONSE				= 2141,
	
	HIVE_COMPANION_COUNT_REQUEST			= 2142,
	HIVE_COMPANION_COUNT_RESPONSE			= 2143,
	
	HIVE_SHOP_PURCHASE_PRODUCT_NOTIFY		= 2144,

	DELAY_PING_NOTIFY						= 2150,
	
	/////////////////////////////////////////
	/// Server <-> Server
	/////////////////////////////////////////
	BYPASS_FROM_CLIENT_NOTIFY				= 3001,
	BYPASS_TO_CLIENT_NOTIFY					= 3002,
	BYPASS_BROADCAST_TO_CLIENT_NOTIFY			= 3003,


	/////////////////////////////////////////
	/// Agent <-> Game
	/////////////////////////////////////////
	GAME_SERVER_REGISTER_REQUEST			= 5001,
	GAME_SERVER_REGISTER_RESPONSE			= 5002,

	PC_ENTER_WORLD_READY_REQUEST			= 5003,
	PC_ENTER_WORLD_READY_RESPONSE			= 5004,
	PC_START_NOTIFY							= 5005,

	PC_LEAVE_WORLD_REQUEST					= 5007,
	PC_LEAVE_WORLD_RESPONSE					= 5008,

	PC_TRY_TO_LEAVE_WORLD_NOTIFY			= 5010,

	PC_DISCONNECT_NOTIFY					= 5011,
	PC_RECONNECT_REQUEST					= 5012,

	//
	// 길드
	//
	// 길드 정보 전달 요청 (GameAgent <- GameServer)
	SERVER_GUILD_REQUEST					= 5013,

	// 길드 정보 전달 (GameAgent -> GameServer)
	SERVER_GUILD_DATA_LOAD					= 5014,
	SERVER_GUILD_MEMBER_LOAD				= 5015,

	// 길드 정보 전달 완료 (GameAgent -> GameServer)
	SERVER_GUILD_RESPONSE					= 5016,

	SERVER_GUILD_CREATE						= 5017,
	SERVER_GUILD_DESTROY					= 5018,
	SERVER_GUILD_DATA_UPDATE				= 5019,

	// 길드 멤버 추가/삭제
	SERVER_GUILD_MEMBER_ADD					= 5020,
	SERVER_GUILD_MEMBER_REMOVE				= 5021,
	SERVER_GUILD_MEMBER_UPDATE				= 5022,

	SERVER_GUILD_BUFF_ADD					= 5023,
	SERVER_GUILD_BUFF_REMOVE				= 5024,

	/// 군주길드 변경 (치트를 위해 사용됨)
	SERVER_GUILD_LEADER_GUILD_UPDATE		= 5025,

	/// 길드 가입요청 변경
	SERVER_GUILD_APPLICANT_UPDATE			= 5026,

	//
	// 시즌
	//
	// 시즌 설정 동기화 (GameAgent -> GameServer)
	SERVER_SEASON_INFO_UPDATE				= 5030,

	// 시즌 리셋
	SERVER_SEASON_RESET_REQUEST				= 5031,
	SERVER_SEASON_RESET_RESPONSE			= 5032,
	
	PC_NEW_MAIL_NOTIFY						= 5040,
	PC_SHOP_PURCHASE_PRODUCT_REQUEST		= 5041,

	// 난투장에서 디스폰됐을때 Game->Agent로 보내서 퇴장시간을 기록한다
	PC_LEAVED_BRAWL_NOTIFY 					= 5042,	

	/////////////////////////////////////////
	/// Client <-> Game
	/////////////////////////////////////////

	NOTICE_NOTIFY							= 6000,
	
	CLIENT_DEBUG_MESSAGE_NOTIFY				= 6001,

	SMAP_CHANNEL_LIST_REQUEST				= 6002,
	SMAP_CHANNEL_LIST_RESPONSE				= 6003,

	SMAP_CHANNEL_MOVE_REQUEST				= 6004,
	SMAP_CHANNEL_MOVE_RESPONSE				= 6005,

	JOIN_EVENTSET_CHANNEL_REQUEST           = 6013,
	JOIN_EVENTSET_CHANNEL_RESPONSE          = 6014,
	ADMIN_COMMAND_NOTIFY					= 6015,
	SYSTEM_DEBUG_MESSAGE_NOTIFY				= 6016,
	PC_SPAWN_COMPLETE_NOTIFY				= 6017,
	UPC_SPAWN_COMPLETE_NOTIFY				= 6018,
	BOT_ADMIN_COMMAND_NOTIFY				= 6019,

	TELEPORT_NOTIFY_OTHER_PC_IN_VIEW		= 6020,
	TELEPORT_REQUEST						= 6021,
	TELEPORT_RESPONSE						= 6022,	
	
	/// 이벤트 1
	ENTER_EVENT_AREA_REQUEST				= 6023,
	ENTER_EVENT_AREA_RESPONSE				= 6024,
	EVENT_MESSAGE_NOTIFY                    = 6025,

	SAFE_ZONE_IN_REQUEST = 6026,
	SAFE_ZONE_IN_RESPONSE = 6027,
	SAFE_ZONE_OUT_REQUEST = 6028,
	SAFE_ZONE_OUT_RESPONSE = 6029,

	CLIENT_CREATURE_MOVE_NOTIFY				= 6030,
	SERVER_CREATURE_MOVE_NOTIFY				= 6031,
	CLIENT_SHORT_TERM_MOVE_NOTIFY			= 6032,
	CLIENT_LONG_TERM_MOVE_NOTIFY			= 6033,
	SERVER_SHORT_TERM_MOVE_NOTIFY			= 6034,
	SERVER_LONG_TERM_MOVE_NOTIFY			= 6035,
	GAME_PING_REQUEST						= 6036,
	GAME_PING_RESPONSE						= 6037,
	GAME_CONTENTS_CONFIG_NOTIFY             = 6038,
	
    EVENT_DIRECTION_BEGIN_NOTIFY          	= 6050,
    EVENT_DIRECTION_FINISH_NOTIFY           = 6051,
	
	EVENT_BATTLE_REALM_CONTRIBUTION_NOTIFY = 6052,
	EVENT_BATTLE_REALM__END_NOTIFY = 6053,
	NOTIFY_EVENT_CONTRIBUTION				= 6054,
	NOTIFY_EVENT_REWARD						= 6055,
	NOTIFY_EVENT_START						= 6056,
	NOTIFY_EVENT_END						= 6057,
	NOTIFY_NEXT_NORMAL_EVENTSET_INFO		= 6058,
	EVENT_DISAPPEAR_BARRIER_NOTIFY			= 6059,
	//RESERVED								= 6060
	NOTIFY_EVENT_TOTAL_REWARD				= 6061,

	EVENT_SPEECH_BUBBLE_NOTIFY              = 6062,
	EVENT_CHANNEL_CLOSE_NOTIFY              = 6063,
	EVENT_GO_TOWN_REQUEST					= 6064,
	EVENT_GO_TOWN_RESPONSE					= 6065,

	NOTIFY_EVENT_PHASE_START				= 6067,
	NOTIFY_EVENT_COUNTER_INFO				= 6068,
	NOTIFY_EVENT_COUNTER_PROGRESS_INFO		= 6069,

	// 히든컨텐츠
	NOTIFY_EVENT_HIDDEN_CONTENTS_START		= 6070,
	NOTIFY_EVENT_HIDDEN_CONTENTS_END		= 6071,
	NOTIFY_EVENT_HIDDEN_GATHERING_COLLECTED	= 6072,
	EVENT_OUT_OF_PLAY_NOTIFY = 6073,
	EVENT_MIDDLE_NOTIFY = 6074,

	// 업적, 달성도, 챕터
	QUEST_REWARD_NOTIFY				= 6101,
	QUEST_RECEIVE_REWARD_REQUEST			= 6109, // 삭제 예정
	QUEST_RECEIVE_REWARD_RESPONSE			= 6120, // 삭제 예정
	QUEST_CONTEXT_DATA_SET_NOTIFY			= 6121,
	QUEST_CONTEXT_DATA_NOTIFY				= 6122,
	CHAPTER_JOIN_REQUEST					= 6123, // 삭제 예정. CHAPTER_JOIN_SMAP_REQUEST 로 교체
	CHAPTER_JOIN_RESPONSE					= 6124, // 삭제 예정. CHAPTER_JOIN_SMAP_RESPONSE 로 교체
	CHAPTER_DATA_NOTIFY						= 6125,	// 삭제 예정
	QUEST_BONUS_REWARD_REQUEST				= 6128,
	QUEST_BONUS_REWARD_RESPONSE     		= 6129,
	QUEST_BONUS_REWARD_NOTIFY     			= 6130,

	///
	/// 챕터
	///
	CHAPTER_NOTIFY							= 6140,
	/// smap clear로 chapterId가 변경될 수 있다
	CHAPTER_CLEAR_SMAP_REQUEST				= 6141,
	CHAPTER_CLEAR_SMAP_RESPONSE				= 6142,
	CHAPTER_JOIN_SMAP_REQUEST				= 6143, // 챕터내 smap 이동 요청
	CHAPTER_JOIN_SMAP_RESPONSE				= 6144, // 챕터내 smap 이동 응답

	// 나가기
	EXIT_INSTANCE_DUNGEON_REQUEST			= 6150,
	EXIT_INSTANCE_DUNGEON_RESPONSE			= 6151,

	// 이벤트 시작 위치 처리
        EVENT_MOVE_START_LOC_REQUEST = 6152,
        EVENT_MOVE_START_LOC_RESPONSE = 6153,

	EVENT_RETURN_LAST_LOC_REQUEST = 6154,
        EVENT_RETURN_LAST_LOC_RESPONSE = 6155,

	// 메인 스트림 (이벤트 참가)
	MAIN_STREAM_EVENT_JOIN_SWITCH_STATE_NOTIFY = 6157,
	MAIN_STREAM_EVENT_JOIN_SWITCH_REQUEST = 6158,
	MAIN_STREAM_EVENT_JOIN_SWITCH_RESPONSE = 6159,

	// 메인 스트림
	MAINSTREAM_STATE_NOTIFY					= 6160,
	MAIN_STREAM_DATA_NOTIFY					= 6161,
	MAIN_STREAM_DATA_SET_NOTIFY				= 6162,
	MAIN_STREAM_DIRECT_NOTIFY				= 6163,
	MAIN_STREAM_PRE_ACTION_REQUEST			= 6164,
	MAIN_STREAM_PRE_ACTION_RESPONSE 		= 6165,
	MAIN_STREAM_FINISHED_BACK_NOTIFY		= 6166,
	MAIN_STREAM_DO_BUTTON_ACTION_REQUEST	= 6167,
	MAIN_STREAM_DO_BUTTON_ACTION_RESPONSE	= 6168,
	MAIN_STREAM_ON_REWARD_UI_NOTIFY			= 6169,

	// #일일과제
	DAILY_HOMEWORK_DATA_ALL_NOTIFY			= 6171,	// 모든 정보 전달
	DAILY_HOMEWORK_DATA_UPDATE_NOTIFY		= 6172,	// 항목 변경 전달
	DAILY_HOMEWORK_RESERVED					= 6173,	// 안씀.
	DAILY_HOMEWORK_GET_REWARD_REQUEST		= 6174,	// 활약도 보상 요청
	DAILY_HOMEWORK_GET_REWARD_RESPONSE		= 6175,	// 활약도 보상 응답

	/// #골드던전
	GOLD_DUNGEON_INFO_REQUEST				= 6180,	// 입장횟수 정보 요청
	GOLD_DUNGEON_INFO_RESPONSE				= 6181,	// 입장횟수 정보 응답
	GOLD_DUNGEON_ENTER_FAILED				= 6182,	// 입장 실패 알림 패킷

	// NOTE: 골드던전 입장은 푸시시스템을 이용하기 때문에 다음 패킷으로 입장 요청 처리가 된다.
	// PUSH_MAIN_MISSION_JOIN_ACCEPT_REQUEST

	// 추천 시스템
	RECOMMEND_GET_PRAISER_REQUEST			= 6201,
	RECOMMEND_GET_PRAISER_RESPONSE			= 6202,
	RECOMMEND_CHOICE_PRAISER_REQUEST		= 6203,
	RECOMMEND_CHOICE_PRAISER_RESPOSE		= 6204,
	RECOMMEND_PRAISER_RESULT_NOTIFY			= 6205,
	RECOMMEND_CHOICE_RESULT_NOTIFY			= 6206,
	
	// 씬맵에서 보여질 정보
	NPC_SCENEMAP_INFO_UPDATE_NOTIFY			= 6901,
	NPC_SCENEMAP_INFO_DESTROY_NOTIFY		= 6902,
	PC_SCENEMAP_INFO_UPDATE_NOTIFY			= 6903,
	PC_SCENEMAP_INFO_DESTROY_NOTIFY			= 6904,

	FIELD_JOIN_REQUEST						= 7010,
	FIELD_JOIN_RESPONSE						= 7011,
	DAILY_DUNGEON_CLEAR_NOTIFY				= 7017,
	DAILY_DUNGEON_JOIN_REQUEST				= 7018,
	DAILY_DUNGEON_JOIN_RESPONSE				= 7019,
	DAILY_DUNGEON_INFO_REQUEST				= 7021,
	DAILY_DUNGEON_INFO_RESPONSE				= 7022,
	DAILY_DUNGEON_OTHER_JOIN_REQUEST		= 7023,
	DAILY_DUNGEON_OTHER_JOIN_RESPONSE		= 7024,

	ARENA_TEAM_REQUEST					= 7030,
	ARENA_TEAM_RESPONSE					= 7031,
	ARENA_TEAM_REFRESH_REQUEST				= 7032,
	ARENA_TEAM_REFRESH_RESPONSE				= 7033,
	ARENA_JOIN_REQUEST					= 7034,
	ARENA_JOIN_RESPONSE					= 7035,
	ARENA_FINISH_REQUEST					= 7036, // CG 시간 만료 시, 무조건 실패
	ARENA_FINISH_NOTIFY					= 7037, // GC 승패가 결정되었을 경우, 시간 만료 시
	ARENA_PLAY_INFO_NOTIFY					= 7038, // 킬 정보 전달
	ARENA_REWARD_REQUEST					= 7039,
	ARENA_REWARD_RESPONSE					= 7040,
	ARENA_EXIT_REQUEST						= 7041,
	UPDATE_ITEM_COOLTIME_NOTIFY				= 7042,
	ARENA_FINISH_NOTIFY_REQUEST                             = 7043,
	
	SOLO_DUNGEON_RELOAD_REQUEST				= 7098,		// [솔로잉던전] Client -> GameServer 솔로던전 정보 요청
	SOLO_DUNGEON_RELOAD_RESPONSE			= 7099,		// [솔로잉던전] GameServer -> Client 솔로던전 정보 응답
	SOLO_DUNGEON_LOAD_NOTIFY				= 7100,		// [솔로잉던전] GameServer -> Client 솔로던전 정보 노티
	SOLO_DUNGEON_JOIN_REQUEST				= 7101,		// [솔로잉던전] Client -> GameServer 솔로던전 참여 요청
	SOLO_DUNGEON_JOIN_RESPONSE				= 7102,		// [솔로잉던전] GameServer -> Client 솔로던전 참여 응답
	SOLO_DUNGEON_CLEAR_NOTIFY				= 7103,		// [솔로잉던전] GameServer -> Client 솔로던전 클리어


	INFLUENCE_POINT_UP_NOTIFY				= 7120,
	INFLUENCE_DATA_NOTIFY					= 7121,
	INFLUENCE_AFTER_REFRESH_NOTIFY			= 7122,
	ADMIN_UPDATE_REFRESH_INFLUENCE			= 7123,
	DB_ADMIN_UPDATE_INFLUENCE_TIER_LEVEL_REQUEST	= 7124,
	DB_ADMIN_UPDATE_INFLUENCE_TIER_LEVEL_RESPONSE	= 7125,

	MAIL_RECEIVE_NOTIFY						= 7220,
	MAIL_REWARD_RECEIVE_REQUEST				= 7221,
	MAIL_REWARD_RECEIVE_RESPONSE			= 7222,
	MAIL_REMOVE_NOTIFY						= 7223,
	
	CHAT_REQUEST							= 7250,												
	CHAT_WHISPER_REQUEST					= 7251,
	CHAT_ERROR_NOTIFY						= 7252,
	CHAT_COMMON_NOTIFY						= 7253,
	CHAT_GUILD_NOTIFY						= 7254,
	CHAT_WHISPER_NOTIFY						= 7255,												
	CHAT_GUILD_MSG_LIST_REQUEST				= 7256,
	CHAT_GUILD_MSG_LIST_RESPONSE			= 7257,												
	CHAT_WHISPER_MSG_LIST_REQUEST			= 7258,
	CHAT_WHISPER_MSG_LIST_RESPONSE			= 7259,												
	CHAT_NEW_MESSAGE_NOTIFY					= 7260,				
	CHAT_WORLD_REQUEST						= 7261,
	CHAT_LOCAL_REQUEST						= 7262,
	CHAT_WARFIELD_REQUEST					= 7263,												
	CHAT_CHECK_RECEIVER_REQUEST				= 7264,
	CHAT_CHECK_RECEIVER_RESPONSE			= 7265,												
	CHAT_READ_WHISPER_NOTIFY				= 7266,
	CHAT_READ_GUILD_NOTIFY					= 7267,												
	CHAT_DELETE_ROOM						= 7268,
	NEW_WHISPER_MESSAGE_NOTIFY				= 7269,
	NEW_GUILD_MESSAGE_NOTIFY				= 7270,
	
	//pc 상세정보 보기
	TARGET_PC_DETAIL_INFO_REQUEST			= 7271,
	TARGET_PC_DETAIL_INFO_RESPONSE			= 7272,

	//차단
	PLAYER_DENIED_REQUEST					= 7273,
	PLAYER_DENIED_RESPONSE					= 7274,
	PLAYER_UNDENIED_REQUEST					= 7275,
	PLAYER_UNDENIED_RESPONSE				= 7276,
	PLAYER_DENIED_LIST_NOTIFY				= 7277,

	

	///----- 거래소 -----------------
	TRADE_GET_TRADE_ITEM_LIST_REQUEST		= 7301,
	TRADE_GET_TRADE_ITEM_LIST_RESPONSE		= 7302,
	TRADE_SET_TRADE_ITEM_REQUEST			= 7303,
	TRADE_SET_TRADE_ITEM_RESPONSE			= 7304,
	TRADE_BUY_TRADE_ITEM_REQUEST			= 7305,
	TRADE_BUY_TRADE_ITEM_RESPONSE			= 7306,
	TRADE_MY_SALE_LIST_REQUEST				= 7307,
	TRADE_MY_SALE_LIST_RESPONSE				= 7308,
	TRADE_SALE_LOG_LIST_REQUEST				= 7309,
	TRADE_SALE_LOG_LIST_RESPONSE			= 7310,
	TRADE_CANCEL_TRADE_ITEM_REQUEST			= 7311,
	TRADE_CANCEL_TRADE_ITEM_RESPONSE		= 7312,

	///----- 레이드 -----------------
	RAID_JOIN_FAILED_NOTIFY					= 7401,
	RAID_INFO_REQUEST						= 7402,
	RAID_INFO_RESPONSE						= 7403,
	RAID_RANDOM_REWARD_PC_NOTIFY			= 7404,

	///----- 보너스_일일 충전 -----------------
	BONUS_DAILY_RECHARGE_MANUAL_REQUEST		= 7410, 
	BONUS_DAILY_RECHARGE_MANUAL_RESPONSE	= 7411,
	BONUS_DAILY_RECHARGE_INFO_REQUEST 		= 7413,
	BONUS_DAILY_RECHARGE_INFO_RESPONSE 		= 7414,	
	
	///----- 무한의 탑 -----------------
	INFINITE_TOWER_INFO_REQUEST				= 7420,
	INFINITE_TOWER_INFO_RESPONSE			= 7421,
	INFINITE_TOWER_JOIN_REQUEST				= 7422,
	INFINITE_TOWER_JOIN_RESPONSE			= 7423,
	INFINITE_TOWER_SWEEP_REQUEST			= 7424,
	INFINITE_TOWER_SWEEP_RESPONSE			= 7425,
	INFINITE_TOWER_CLEAR_NOTIFY				= 7426,

	///----- 출석체크 -----------------
	ATTENDANCE_INFO_REQUEST					= 7430,
	ATTENDANCE_INFO_RESPONSE				= 7431,
	ATTENDANCE_STAMP_REQUEST				= 7432,
	ATTENDANCE_STAMP_RESPONSE				= 7433,
	
	///----- 접속보상 -----------------
	ACCESS_TIME_INFO_REQUEST				= 7435,
	ACCESS_TIME_INFO_RESPONSE				= 7436,
	ACCESS_TIME_REWARD_REQUEST				= 7437,
	ACCESS_TIME_REWARD_RESPONSE				= 7438,

	///----- 휴식보상 -----------------
	REST_TIME_INFO_REQUEST					= 7440,
	REST_TIME_INFO_RESPONSE					= 7441,
	REST_TIME_REWARD_REQUEST				= 7442,
	REST_TIME_REWARD_RESPONSE				= 7443,
	
	
	///----- 상점 -----------------
	SHOP_PURCHASE_PRODUCT_REQUEST				= 7500,
	SHOP_PURCHASE_PRODUCT_RESPONSE				= 7501,
	SHOP_PURCHASE_PRODUCT_REWARD_REQUEST		= 7502,
	SHOP_PURCHASE_PRODUCT_REWARD_RESPONSE		= 7503,
	SHOP_PURCHASE_PRODUCT_BONUS_REWARD_REQUEST	= 7504,
	SHOP_PURCHASE_PRODUCT_BONUS_REWARD_RESPONSE	= 7505,
	SHOP_PURCHASE_PRODUCT_LIST_NOTIFY			= 7506,
	SHOP_PURCHASE_PRODUCT_EXPIRE_DATE_NOTIFY	= 7507,
	SHOP_PURCHASE_PRODUCT_MISSION_UPDATE_NOTIFY	= 7508,
	SHOP_PURCHASE_PRODUCT_BONUS_POINT_UPDATE_NOTIFY	= 7509,
	SHOP_PURCHASE_PRODUCT_PROMOTION_UPDATE_NOTIFY	= 7510,
	SHOP_PURCHASE_PRODUCT_PROMOTION_REWARD_REQUEST	= 7511,
	SHOP_PURCHASE_PRODUCT_PROMOTION_REWARD_RESPONSE	= 7512,


	///----- #길드던전 --------------
	GUILD_DUNGEON_INFO_REQUEST					= 7601,
	GUILD_DUNGEON_INFO_RESPONSE					= 7602,
	GUILD_DUNGEON_ENTER_FAILED					= 7603,
	GUILD_DUNGEON_CLEAR_NOTIFY					= 7604,
	GUILD_DUNGEON_REWARD_REQUEST				= 7605,
	GUILD_DUNGEON_REWARD_RESPONSE				= 7606,

	
	/// DB Transaction (Game <-> Agent)
	///------------------------------
	DB_USER_DATA_REQUEST					= 11001,
	DB_USER_DATA_RESPONSE					= 11002,
	DB_ADD_ITEM_REQUEST						= 11003,
	DB_ADD_ITEM_RESPONSE					= 11004,
	DB_DEL_ITEM_REQUEST						= 11005,
	DB_DEL_ITEM_RESPONSE					= 11006,
	DB_UPDATE_LEVEL_EXP_REQUEST				= 11009,
	DB_UPDATE_LEVEL_EXP_RESPONSE			= 11010,
	DB_DISENCHANT_ITEM_REQUEST				= 11011,
	DB_DISENCHANT_ITEM_RESPONSE				= 11012,
	DB_ENCHANT_ITEM_REQUEST					= 11013,
	DB_ENCHANT_ITEM_RESPONSE				= 11014,
	DB_UPGRADE_ITEM_REQUEST					= 11015,
	DB_UPGRADE_ITEM_RESPONSE				= 11016,
	DB_SALE_ITEM_REQUEST					= 11017,
	DB_SALE_ITEM_RESPONSE					= 11018,

	DB_TRANSCEND_ITEM_REQUEST				= 11019,
	DB_TRANSCEND_ITEM_RESPONSE				= 11020,
	DB_CHANGE_TRANSCEND_STAT_REQUEST		= 11021,
	DB_CHANGE_TRANSCEND_STAT_RESPONSE		= 11022,

	DB_CRAFT_ITEM_REQUEST					= 11023,
	DB_CRAFT_ITEM_RESPONSE					= 11024,
	DB_PRESET_INSERT_REQUEST				= 11025,
	DB_PRESET_INSERT_RESPONSE				= 11026,
	DB_PRESET_UPDATE_REQUEST				= 11027,
	DB_PRESET_UPDATE_RESPONSE				= 11028,
	DB_SKILL_GROWTH_UPDATE_REQUEST			= 11029,
	DB_SKILL_GROWTH_UPDATE_RESPONSE			= 11030,

	DB_PURSE_REQUEST						= 11033,
	DB_PURSE_RESPONSE						= 11034,
	DB_CHANGE_PRISM_REQUEST					= 11035,
	DB_CHANGE_PRISM_RESPONSE				= 11036,
	DB_SET_DIAMOND_CHEAT_REQUEST			= 11037,
	DB_SET_DIAMOND_CHEAT_RESPONSE			= 11038,

	DB_TRANSMUTE_CRYSTAL_REQUEST			= 11039,
	DB_TRANSMUTE_CRYSTAL_RESPONSE			= 11040,

	// 천상석 변환
	DB_CHANGE_CRYSTAL_REQUEST				= 11041,
	DB_CHANGE_CRYSTAL_RESPONSE				= 11042,

	DB_UPDATE_SKILL_POINT_REQUEST			= 11043,
	DB_UPDATE_SKILL_POINT_RESPONSE          = 11044,
	DB_TOGGLE_SAFE_GUARD_REQUEST			= 11045,
	DB_TOGGLE_SAFE_GUARD_RESPONSE			= 11046,
	DB_SKILL_FEATURE_INITIALIZE_REQUEST     = 11047,
	DB_SKILL_FEATURE_INITIALIZE_RESPONSE    = 11048,
	DB_DAILY_DUNGEON_COMPLETE_REQUEST		= 11055,
	DB_DAILY_DUNGEON_COMPLETE_RESPONSE		= 11056,
	DB_MOVE_ITEM_REQUEST					= 11057,
	DB_MOVE_ITEM_RESPONSE					= 11058,

	DB_PRESET_TYPE_UPDATE_REQUEST			= 11061,
	DB_PRESET_TYPE_UPDATE_RESPONSE			= 11062,

	DB_QUEST_SET_DATA_MULTI_REQUEST			= 11071,
	DB_QUEST_SET_DATA_MULTI_RESPONSE		= 11072,

	DB_CHAPTER_UPDATE_REQUEST				= 11075,
	DB_CHAPTER_UPDATE_RESPONSE				= 11076,

	DB_INVEN_REWARD_MAIL_REQUEST			= 11077,
	DB_INVEN_REWARD_MAIL_RESPONSE			= 11078,

	DB_RECV_MAIL_REWARD_REQUEST				= 11081,
	DB_RECV_MAIL_REWARD_RESPONSE			= 11082,

	DB_SOLO_DUNGEON_SET_DATA_REQUEST		= 11087,
	DB_SOLO_DUNGEON_SET_DATA_RESPONSE		= 11088,
	DB_SOLO_DUNGEON_SET_TICKET_REQUEST		= 11089,
	DB_SOLO_DUNGEON_SET_TICKET_RESPONSE		= 11090,

	DB_QUEST_BONUS_SET_DATA_REQUEST			= 11095,
	DB_QUSET_BONUS_SET_DATA_RESPONSE		= 11096,

	DB_PC_UPDATE_REQUEST					= 11120,
	DB_PC_UPDATE_RESPONSE					= 11121,

	DB_USE_ITEM_REQUEST						= 11130,
	DB_USE_ITEM_RESPONSE					= 11131,

	DB_USE_ITEM_CONTENTS_EFFECT_REQUEST		= 11132,
	DB_USE_ITEM_CONTENTS_EFFECT_RESPONSE	= 11133,

	DB_NEW_MAIL_LOAD_REQUEST				= 11134,
	DB_NEW_MAIL_LOAD_RESPONSE				= 11135,

	DB_REWARD_REQUEST						= 11160,
	DB_REWARD_RESPONSE 						= 11161,

	DB_FOLLOWER_ADD_SOUL_STONE_REQUEST      = 11168,
	DB_FOLLOWER_ADD_SOUL_STONE_RESPONSE     = 11169,
	DB_FOLLOWER_ENCHANT_REQUEST				= 11170,
	DB_FOLLOWER_ENCHANT_RESPONSE			= 11171,
	DB_FOLLOWER_START_MISSION_REQUEST		= 11172,
	DB_FOLLOWER_START_MISSION_RESPONSE		= 11173,
	DB_FOLLOWER_END_MISSION_REQUEST			= 11174,
	DB_FOLLOWER_END_MISSION_RESPONSE		= 11175,

	DB_FOLLOWER_MISSION_REWARD_REQUEST		= 11182,
	DB_FOLLOWER_MISSION_REWARD_RESPONSE		= 11183,

	DB_QUEST_SET_REWARD_REQUEST				= 11184,
	DB_QUEST_SET_REWARD_RESPONSE			= 11185,

	// arena
	ARENA_STATE_NOTIFY 					= 11191,
	ARENA_MEMBER_LIST_REQUEST				= 11192,
	ARENA_MEMBER_LIST_RESPONSE				= 11193,
	DB_ARENA_REWARD_REQUEST					= 11194,
	DB_ARENA_REWARD_RESPONSE				= 11195,
	DB_ARENA_FINISH_REQUEST					= 11196,
	DB_ARENA_FINISH_RESPONSE				= 11197,
	ARENA_INFO_REQUEST						= 11198,
	ARENA_INFO_RESPONSE						= 11199,

	DB_LOAD_UPC_DATA_REQUEST				= 11200,
	DB_LOAD_UPC_DATA_RESPONSE				= 11201,
	
	DB_ITEM_COOL_TIME_SAVE_REQUEST  		= 11202,
	DB_ITEM_COOL_TIME_SAVE_RESPONSE 		= 11203,
	DB_LOAD_ITEM_COOLTIME_RESPONSE			= 11204,
	DB_ITEM_COOL_TIME_UPDATE_REQUEST		= 11205,
	DB_ITEM_COOL_TIME_UPDATE_RESPONSE		= 11206,

	// 다이아 차감 및 아레나 정보 업데이트
	

	DB_INFLUENCE_REFRESH_REQUEST			= 11210,
	DB_INFLUENCE_REFRESH_RESPONSE			= 11211,
	DB_INFLUENCE_POINT_UP_REQUEST			= 11212,
	DB_INFLUENCE_POINT_UP_RESPONSE			= 11213,

	DB_TICKET_UPDATE_REQUEST				= 11220,
	DB_TICKET_UPDATE_RESPONSE				= 11221,
	DB_TICKET_REFILL_REQUEST				= 11222,
	DB_TICKET_REFILL_RESPONSE				= 11223,

	DB_DAILY_HOMEWORK_UPDATE_REQUEST		= 11234,
	DB_DAILY_HOMEWORK_UPDATE_RESPONSE		= 11235,

	DB_MAIN_STREAM_UPDATE_REQUEST			= 11236,
	DB_MAIN_STREAM_UPDATE_RESPONSE			= 11237,

	DB_MAIN_STREAM_UPDATE_ALL_REQUEST		= 11238,
	DB_MAIN_STREAM_UPDATE_ALL_RESPONSE		= 11239,

	// 활약도 점수 업데이트
	DB_DAILY_HOMEWORK_POINT_UPDATE_REQUEST	= 11240,
	DB_DAILY_HOMEWORK_POINT_UPDATE_RESPONSE	= 11241,

	// 활약도 보상 지급 완료 처리
	DB_DAILY_HOMEWORK_POINT_REWARD_REQUEST	= 11242,
	DB_DAILY_HOMEWORK_POINT_REWARD_RESPONSE	= 11243,

	// trade
	DB_SET_TRADE_ITEM_REQUEST 				= 11250,
	DB_SET_TRADE_ITEM_RESPONSE				= 11251,

	DB_GET_TRADE_ITEM_LIST_REQUEST 			= 11252,
	DB_GET_TRADE_ITEM_LIST_RESPONSE			= 11253,

	DB_GET_TRADE_MY_SALE_LIST_REQUEST 		= 11254,
	DB_GET_TRADE_MY_SALE_LIST_RESPONSE		= 11255,

	DB_BUY_TRADE_ITEM_REQUEST 				= 11256,
	DB_BUY_TRADE_ITEM_RESPONSE				= 11257,

	DB_CANCEL_TRADE_ITEM_REQUEST 			= 11258,
	DB_CANCEL_TRADE_ITEM_RESPONSE			= 11259,

	DB_GET_TRADE_SALE_LOG_LIST_REQUEST 		= 11260,
	DB_GET_TRADE_SALE_LOG_LIST_RESPONSE		= 11261,

	/// #일일과제
	// 일일과제 챕터 변경
	DB_DAILY_HOMEWORK_CHANGE_CHAPTER_REQUEST	= 11262,
	DB_DAILY_HOMEWORK_CHANGE_CHAPTER_RESPONSE	= 11263,

	// 일일과제 일일 리셋
	DB_DAILY_HOMEWORK_RESET_REQUEST			= 11264,
	DB_DAILY_HOMEWORK_RESET_RESPONSE		= 11265,

	// 일일과제 테스트용 리셋
	DB_DAILY_HOMEWORK_TEST_RESET_REQUEST	= 11266,
	DB_DAILY_HOMEWORK_TEST_RESET_RESPONSE	= 11267,

	// 보너스 - 일일충전
	DB_BONUS_DAILY_RECHARGE_REQEUST 		= 11275,
	DB_BONUS_DAILY_RECHARGE_RESPONSE 		= 11276,

	
	// 무한의 탑
	DB_INFINITE_TOWER_CLEAR_REQUEST			= 11282,
	DB_INFINITE_TOWER_CLEAR_RESPONSE		= 11283,
	DB_INFINITE_TOWER_SWEEP_REQUEST			= 11284,
	DB_INFINITE_TOWER_SWEEP_RESPONSE		= 11285,

	// 출석체크
	DB_ATTENDANCE_STAMP_REQUEST 			= 11286,
	DB_ATTENDANCE_STAMP_RESPONSE 			= 11287,

	// 다이아 차감, 입장 횟수 변경(set)
	DB_DIA_ENTER_COUNT_UPDATE_REQUEST		= 11290,
	DB_DIA_ENTER_COUNT_UPDATE_RESPONSE,

	// 아이템 차감, 입장 횟수 변경(set)
	DB_ITEM_ENTER_COUNT_UPDATE_REQUEST,
	DB_ITEM_ENTER_COUNT_UPDATE_RESPONSE,

	// 입장 횟수 변경(set)
	DB_ENTER_COUNT_UPDATE_REQUEST,
	DB_ENTER_COUNT_UPDATE_RESPONSE,
	DB_ENTER_SET_COUNT_UPDATE_REQUEST,
	DB_ENTER_SET_COUNT_UPDATE_REPONSE,

	// 합성
	DB_ITEM_FUSION_REQUEST,
	DB_ITEM_FUSION_RESPONSE,
	
	

	

	///////////////////////////////////////////////
	///
	///			초기 PC 로그인 데이터
	///
	/// 게임 서버에서 DB_USER_DATA_REQUEST를 보내면 아래 패킷을 쭉 받는다
	///
	///////////////////////////////////////////////
	DB_LOAD_PC_DATA_RESPONSE					= 11300,
	DB_LOAD_PC_SKILL_DATA_RESPONSE				= 11302,
	DB_LOAD_PC_PRESET_DATA_RESPONSE				= 11303,
	DB_LOAD_PC_PC_PURSE_DATA_RESPONSE			= 11304,
	DB_LOAD_PC_MAIL_DATA_RESPONSE				= 11305,
	DB_LOAD_PC_DAILY_DUNGEON_DATA_RESPONSE		= 11306,
	DB_LOAD_PC_SHOP_PURCHASED_DATA_RESPONSE		= 11307,
	DB_LOAD_PC_STORAGE_DATA_RESPONSE			= 11308,
	DB_LOAD_PC_ITEM_DATA_RESPONSE				= 11309,
	DB_LOAD_PC_FOLLOWER_DATA_RESPONSE			= 11310,
	DB_LOAD_PC_QUEST_DATA_RESPONSE				= 11311,
	DB_LOAD_PC_CHAPTER_DATA_RESPONSE			= 11313,
	DB_LOAD_PC_SOLO_DUNGEON_DATA_RESPONSE		= 11314,
	DB_LOAD_PC_TICKET_DATA_RESPONSE				= 11315,
	DB_LOAD_PC_ARENA_DATA_RESPONSE				= 11316,
	DB_LOAD_PC_INFLUENCE_DATA_RESPONSE			= 11317,
	DB_LOAD_PC_MAIN_STREAM_DATA_RESPONSE		= 11319,
	DB_LOAD_PC_DAILY_HOMEWORK_DATA_RESPONSE		= 11320,
	DB_LOAD_PC_INFINITE_TOWER_DATA_RESPONSE		= 11322,
	DB_LOAD_PC_ENTER_COUNTS_RESPONSE			= 11323,
	DB_LOAD_PC_ATTENDANCE_RESPONSE 				= 11324,
	DB_LOAD_PC_ACCESS_TIME_RESPONSE				= 11325,
	DB_LOAD_PC_REST_TIME_RESPONSE				= 11326,
	DB_LOAD_PC_INFLUENCE_RESPONSE				= 11327,
	DB_LOAD_PC_SPECIAL_GROWTH_RESPONSE			= 11328,
	DB_LOAD_PC_BUDDY_RESPONSE 					= 11329,
	DB_LOAD_PC_SHORT_TERM_DATA_RESPONSE 			= 11330,
	
	DB_LOAD_PC_ACCOUNT_PURSE_DATA_RESPONSE		= 11331,
	DB_LOAD_PC_ACCOUNT_DEPOT_DATA_RESPONSE		= 11332,
	DB_LOAD_PC_ACCOUNT_ARTIFACT_DATA_RESPONSE	= 11333,
	DB_LOAD_PC_ACCOUNT_SHOP_PURCHASE_LIMIT_COUNT_RESPONSE	= 11334,
	DB_LOAD_PC_ACCOUNT_SHOP_PURCHASE_DATA_RESPONSE = 11335,
	DB_LOAD_PC_BUFF_LIST_RESPONSE					= 11336,
	DB_LOAD_PC_ACCOUNT_MAIL_DATA_RESPONSE		= 11337,

    DB_LOAD_PC_KILLER_LIST_DATA_RESPONSE = 11338,
	DB_LOAD_PC_KILL_ASSIST_COUNT_DATA_RESPONSE = 11339,

	DB_LOAD_PC_BATTLE_FIELD_COLLECTION_RESPONSE = 11341,
	DB_LOAD_PC_GUILD_DUNGEON_RESPONSE			= 11342,
	DB_LOAD_PC_COSTUME_PRESET_DATA_RESPONSE = 11343,

	DB_LOAD_PC_LIVE_EVENT_TRADE_RESPONSE = 11344,
	DB_LOAD_PC_LIVE_EVENT_DIA_BUY_RESPONSE = 11345,
	DB_LOAD_PC_LIVE_EVENT_DIA_SPENT_RESPONSE = 11346,
	DB_LOAD_PC_LIVE_EVENT_LIMIT_SELL_SHOP_RESPONSE = 11347,
	DB_LOAD_PC_ACCOUNT_LIVE_EVENT_LIMIT_SELL_SHOP_RESPONSE = 11348,
	DB_LOAD_PC_ACCOUNT_LIVE_EVENT_ATTENTION_RESPONSE = 11349,
	DB_LOAD_PC_BRAWL_SHORT_TERM_DATA_RESPONSE = 11350,
	DB_LOAD_PC_BRAWL_DAILY_ACQUIRED_DATA_RESPONSE = 11351,
	DB_LOAD_PC_BRAWL_ENHANCE_DATA_RESPONSE = 11352,
	DB_LOAD_PC_SCROLL_QUEST_DATA_RESPONSE = 11353,
	DB_LOAD_PC_BRAWL_LAST_LEAVED_TIME_DATA_RESPONSE = 11354,
	DB_LOAD_PC_LIVE_EVENT_LEVELUP_RESPONSE = 11355,
	DB_LOAD_PC_ACCOUNT_PET_DATA_RESPONSE = 11356,
	DB_LOAD_PC_ACCOUNT_PET_ALTAR_DATA_RESPONSE = 11357,
	DB_LOAD_PC_ACCOUNT_PET_HATCHERY_DATA_RESPONSE = 11358,
	DB_LOAD_PC_CRYSTAL_CHANGE_COUNT_DATA_RESPONSE = 11359,
	DB_LOAD_PC_ACCOUNT_LAST_LOGOUT_BY_MY_PCS_RESPONSE = 11360,
	DB_LOAD_PC_PVPCOIN_DAILY_ACQUIRED_DATA_RESPONSE = 11361,
	
	///////////////////////////////////////////////
	///
	///			PC 업데이트 데이터
	///
	///////////////////////////////////////////////
	DB_UPDATE_PC_UPDATE_DATA_NOTIFY				= 11500,
	DB_UPDATE_QUEST_UPDATE_DATA_NOTIFY			= 11501,
	DB_UPDATE_ACCESS_TIME_DATA_NOTIFY			= 11502,
	DB_UPDATE_REST_TIME_DATA_NOTIFY				= 11503,
	
	///////////////////////////////////////////////
	///
	/// DB Transaction (Game <-> Agent)
	/// 번호가 부족해서 일단 여기 추가했습니다.
	/// 
	///////////////////////////////////////////////	

	// 접속보상
	DB_ACCESS_TIME_REWARD_REQUEST 			= 12000,
	DB_ACCESS_TIME_REWARD_RESPONSE			= 12001,
	DB_ACCESS_TIME_SET_REQUEST 				= 12002,
	DB_ACCESS_TIME_SET_RESPONSE 			= 12003,
	
	// 휴식보상
	DB_REST_TIME_REWARD_REQUEST 			= 12005,
	DB_REST_TIME_REWARD_RESPONSE 			= 12006,
	DB_REST_TIME_SET_REQUEST 				= 12007,
	DB_REST_TIME_SET_RESPONSE 				= 12008,
	
	// UPC
	DB_UPC_CACHE_DATA_REQUEST 					= 12010,
	DB_UPC_CACHE_DATA_RESPONSE 					= 12011,	
	
	//아레나 점수
	DB_ARENA_SCORE_UPDATE_REQUEST				= 12012,
	
	// 채널 이동
	DB_CHANNEL_MOVE_TIME_UPDATE_REQUEST			= 12013,
	DB_CHANNEL_MOVE_TIME_UPDATE_RESPONSE		= 12014,

	// 전쟁 필드
	DB_BATTLE_FIELD_SET_TIME_REQUEST		= 12020,
	DB_BATTLE_FIELD_SET_TIME_RESPONSE		= 12021,
	DB_BATTLE_FIELD_DAILY_RESET_REQUEST		= 12022,
	DB_BATTLE_FIELD_DAILY_RESET_RESPONSE		= 12023,
	
        // 전쟁 필드 - 단기 보상 카운팅 데이터
	DB_BATTLE_FIELD_SET_SHORT_TERM_REQUEST		= 12024,
	DB_BATTLE_FIELD_SET_SHORT_TERM_RESPONSE		= 12025,

	// 아레나 오늘 플레이 카운트 업데이트
	DB_ARENA_TODAY_PLAY_COUNT_UPDATE_REQUEST 	= 12026,
	DB_ARENA_TODAY_PLAY_COUNT_UPDATE_RESPONSE	= 12027,
	DB_ARENA_TODAY_PLAY_COUNT_RESET_REQUEST		= 12028,
	DB_ARENA_TODAY_PLAY_COUNT_RESET_RESPONSE	= 12029,

 	// 전쟁 필드 - 단기 보상 보상 데이터
	DB_BATTLE_FIELD_SET_SHORT_TERM_MAIL_REQUEST	= 12030,
	DB_BATTLE_FIELD_SET_SHORT_TERM_MAIL_RESPONSE	= 12031,
	

	// 나를 죽인 대상
	DB_KILLER_INFO_SET_REQUEST = 12041,
	DB_KILLER_INFO_SET_RESPONSE = 12042,
	
	// 킬 어시스트 카운트
	DB_KILL_ASSIST_COUNT_SET_REQUEST = 12047,
	DB_KILL_ASSIST_COUNT_SET_RESPONSE = 12048,
	
	// 이벤트 보상
	DB_EVENT_REWARD_REQUEST = 12050,
	DB_EVENT_REWARD_RESPONSE = 12051,
	
	//유저 스탯 저장
	DB_PLAYER_STAT_SAVE_REQUEST = 12052,
	DB_PLAYER_STAT_SAVE_RESPONSE = 12053,

	// 길드던전
	DB_GUILD_DUNGEON_CLEAR_REQUEST = 12061,
	DB_GUILD_DUNGEON_CLEAR_RESPONSE = 12062,
	DB_GUILD_DUNGEON_REWARD_REQUEST = 12063,
	DB_GUILD_DUNGEON_REWARD_RESPONSE = 12064,

	// 외형장비
	DB_COSTUME_PRESET_TYPE_UPDATE_REQUEST = 12065,
	DB_COSTUME_PRESET_TYPE_UPDATE_RESPONSE = 12066,
	DB_COSTUME_PRESET_UPDATE_REQUEST = 12067,
	DB_COSTUME_PRESET_UPDATE_RESPONSE = 12068,

	DB_ENCHANT_COSTUME_REQUEST = 12069,
	DB_ENCHANT_COSTUME_RESPONSE = 12070,
	DB_UPGRADE_COSTUME_REQUEST = 12071,
	DB_UPGRADE_COSTUME_RESPONSE = 12072,

	// 외형장비 계승
	DB_INHERIT_COSTUME_REQUEST = 12073,
	DB_INHERIT_COSTUME_RESPONSE = 12074,


	// 라이브 이벤트
	DB_LIVE_EVENT_TRADE_PURCHAES_REQUEST = 12100,
	DB_LIVE_EVENT_TRADE_PURCHAES_RESPONSE = 12101,

	DB_LIVE_EVENT_LIMIT_SELL_SHOP_PURCHAES_REQUEST = 12102,
	DB_LIVE_EVENT_LIMIT_SELL_SHOP_PURCHAES_RESPONSE = 12103,

	DB_LIVE_EVENT_DIA_BUY_REWARD_REQUEST = 12104,
	DB_LIVE_EVENT_DIA_BUY_REWARD_RESPONSE = 12105,
	DB_LIVE_EVENT_DIA_BUY_UPDATE_AMOUNT_NOTIFY = 12106,

	DB_LIVE_EVENT_DIA_SPENT_REWARD_REQUEST = 12107,
	DB_LIVE_EVENT_DIA_SPENT_REWARD_RESPONSE = 12108,
	DB_LIVE_EVENT_DIA_SPENT_UPDATE_AMOUNT_NOTIFY = 12109,

	DB_LIVE_EVENT_ATTENTION_RECEIVE_STATE_REQUEST = 12110,
	DB_LIVE_EVENT_ATTENTION_RECEIVE_STATE_RESPONSE = 12111,
	DB_LIVE_EVENT_RETURN_ATTENTION_RECEIVE_STATE_REQUEST = 12112,
	DB_LIVE_EVENT_RETURN_ATTENTION_RECEIVE_STATE_RESPONSE = 12113,
	DB_LIVE_EVENT_NEWBIE_ATTENTION_RECEIVE_STATE_REQUEST = 12114,
	DB_LIVE_EVENT_NEWBIE_ATTENTION_RECEIVE_STATE_RESPONSE = 12115,

	DB_LIVE_EVENT_ATTENTION_REWARD_REQUEST = 12116,
	DB_LIVE_EVENT_ATTENTION_REWARD_RESPONSE = 12117,
	DB_LIVE_EVENT_RETURN_ATTENTION_REWARD_REQUEST = 12118,
	DB_LIVE_EVENT_RETURN_ATTENTION_REWARD_RESPONSE = 12119,
	DB_LIVE_EVENT_NEWBIE_ATTENTION_REWARD_REQUEST = 12120,
	DB_LIVE_EVENT_NEWBIE_ATTENTION_REWARD_RESPONSE = 12121,

	DB_LIVE_EVENT_ATTENTION_END_RECEIVE_STATE_REQUEST = 12122,
	DB_LIVE_EVENT_ATTENTION_END_RECEIVE_STATE_RESPONSE = 12123,
	DB_LIVE_EVENT_RETURN_ATTENTION_END_RECEIVE_STATE_REQUEST = 12124,
	DB_LIVE_EVENT_RETURN_ATTENTION_END_RECEIVE_STATE_RESPONSE = 12125,
	DB_LIVE_EVENT_NEWBIE_ATTENTION_END_RECEIVE_STATE_REQUEST = 12126,
	DB_LIVE_EVENT_NEWBIE_ATTENTION_END_RECEIVE_STATE_RESPONSE = 12127,

	DB_LIVE_EVENT_ATTENTION_END_REWARD_REQUEST = 12128,
	DB_LIVE_EVENT_ATTENTION_END_REWARD_RESPONSE = 12129,
	DB_LIVE_EVENT_RETURN_ATTENTION_END_REWARD_REQUEST = 12130,
	DB_LIVE_EVENT_RETURN_ATTENTION_END_REWARD_RESPONSE = 12131,
	DB_LIVE_EVENT_NEWBIE_ATTENTION_END_REWARD_REQUEST = 12132,
	DB_LIVE_EVENT_NEWBIE_ATTENTION_END_REWARD_RESPONSE = 12133,

	// 라이브 이벤트 - 레벨업
	DB_LIVE_EVENT_LEVELUP_RECEIVE_STATE_REQUEST = 12134,
	DB_LIVE_EVENT_LEVELUP_RECEIVE_STATE_RESPONSE = 12135,

	DB_LIVE_EVENT_LEVELUP_REWARD_REQUEST = 12136,
	DB_LIVE_EVENT_LEVELUP_REWARD_RESPONSE = 12137,


	// 저장소 슬롯 확장
	DB_STORAGE_SLOT_EXPANSION_REQUEST	= 12150,
	DB_STORAGE_SLOT_EXPANSION_RESPONSE	= 12151,
	
	// 난투장
	DB_BRAWL_SET_TIME_REQUEST		= 12160,
	DB_BRAWL_SET_TIME_RESPONSE		= 12161,	
	DB_BRAWL_SET_SHORT_TERM_REQUEST = 12162,
	DB_BRAWL_SET_SHORT_TERM_RESPONSE = 12163,
	DB_BRAWL_SHORT_TERM_REWARD_REQUEST = 12164,
	DB_BRAWL_SHORT_TERM_REWARD_RESPONSE = 12165,
	
	DB_BRAWL_SET_POINT_REQEUST = 12170,
	DB_BRAWL_SET_POINT_RESPONSE = 12171,
	
	DB_BRAWL_ENHANCE_LEVEL_UP_REQUEST = 12172,
	DB_BRAWL_ENHANCE_LEVEL_UP_RESPONSE = 12173,

	DB_BRAWL_SET_DAILY_ACQUIRED_REQEUST = 12174,
	DB_BRAWL_SET_DAILY_ACQUIRED_RESPONSE = 12175,
	
	// 스크롤퀘스트
	DB_SCROLL_QUEST_USE_SCROLL_GROUP_ITEM_REQUEST = 12178,
	DB_SCROLL_QUEST_USE_SCROLL_GROUP_ITEM_RESPONSE = 12179,
	
	DB_SCROLL_QUEST_PROGRESS_SET_REQUEST = 12180,
	DB_SCROLL_QUEST_PROGRESS_SET_RESPONSE = 12181,
	
	DB_SCROLL_QUEST_DAILY_SET_REQUEST = 12182,
	DB_SCROLL_QUEST_DAILY_SET_RESPONSE = 12183,
	
	DB_SCROLL_QUEST_REWARD_REQUEST = 12184,
	DB_SCROLL_QUEST_REWARD_RESPONSE = 12185,

	// PvP	
	DB_UPDATE_PVP_POINT_REQEUST = 12191,
	DB_UPDATE_PVP_POINT_RESPONSE = 12192,
	DB_SET_PVP_COIN_DAILY_ACQUIRED_REQEUST = 12193,
	DB_SET_PVP_COIN_DAILY_ACQUIRED_RESPONSE = 12194,

	/////////////////////////////////////////
	/// Client <-> Game
	/////////////////////////////////////////

	PC_LOGIN_DATA_NOTIFY					= 20000,

	LOAD_DATA_REQUEST						= 20001,
	LOAD_DATA_RESPONSE						= 20002,

	WORLDOBJECT_DESPAWN_NOTIFY				= 20003,
	PC_SPAWN_NOTIFY							= 20004,
	NPC_SPAWN_NOTIFY						= 20005,
	PROJECTILE_SPAWN_NOTIFY					= 20006,
	INSTANTSHOT_SPAWN_NOTIFY				= 20007,
	INSTANTSHOT_DESPAWN_NOTIFY				= 20008,
	PROJECTILE_EFFECT_NOTIFY				= 20009,
	REACTION_ENTER_NOTIFY					= 20010,
	REACTION_LEAVE_NOTIFY					= 20011,
	REACTION_UPDATE_NOTIFY					= 20012,
	ENTER_STATE_NOTIFY						= 20013,
	LEAVE_STATE_NOTIFY						= 20014,
	PLAYER_REVIVE_REQUEST					= 20015,
	PLAYER_REVIVE_RESPONSE					= 20016,
	UPC_SPAWN_NOTIFY						= 20017,

	PLAYER_IMMEDIATELY_DEAD_REQUEST         = 20018,
	PC_GUILD_INFO_UPDATE_NOTIFY				= 20019,
	AGGRO_TICKER_INFO_NOTIFY				= 20020,

	UPC_LOAD_START_NOTIFY					= 20021,
	UPC_LOAD_FINISH_NOTIFY					= 20022,
	
	UPC_HOST_REQUEST						= 20023,	// upc 호스트 설정 요청(GameServer -> Client)
	UPC_HOST_RESPONSE						= 20024,	// upc 호스트 설정 응답(Client -> GameServer)
	
	UPC_UNHOST_NOTIFY						= 20025,	// upc 호스트 해제
	
	PC_STAT_HARDCAP_DATA_NOTIFY				= 20026, // 클래스 타입별 이동속도, 공격속도 하드캡 전달

	STORAGE_DATA_NOTIFY						= 20027,
	STORAGE_ITEM_DATA_NOTIFY				= 20028,
	EQUIP_DATA_NOTIFY						= 20029,
	UPC_LOAD_START_NOTIFY_REQUEST = 20030,

	PC_PK_HONOR_INFO_REQUEST = 20034,
	PC_PK_HONOR_INFO_RESPONSE = 20035,
	KILL_ASSIST_COUNT_NOTIFY = 20036,

	PLAYER_DESPAWN_NOTIFY					= 20050,	// PC 디스폰 알림 -> 해당 클라이언트에게만 unicast 된다.

	SKILL_USE_NOTIFY						= 21000,
	SKILL_START_NOTIFY						= 21001,
	SKILL_END_NOTIFY						= 21002,
	SKILL_EFFECT_NOTIFY						= 21003,
	SKILL_EFFECT_RESULT_NOTIFY				= 21004,
	SKILL_SLOT_NOTIFY						= 21005,
	SKILL_OPEN_SHIELD_NOTIFY				= 21006,
	STAT_UPDATE_NOTIFY						= 21007,
	SKILL_ERROR_NOTIFY						= 21008,
	SKILL_CLOSED_SHIELD_NOTIFY				= 21009,

	/// Effect Result
	SKILL_EFFECT_RESULT_DAMAGE_NOTIFY		= 21011,
	SKILL_EFFECT_RESULT_HEAL_NOTIFY			= 21012,
	SKILL_SLOT_PLACE_REQUEST				= 21013,
	SKILL_SLOT_PLACE_RESPONSE				= 21014,
	SKILL_LEVEL_UP_REQUEST					= 21015,
	SKILL_LEVEL_UP_RESPONSE					= 21016,
	CHANGE_IFF_NOTIFY						= 21017,
	UPDATE_ENERGYPOINT_NOTIFY				= 21018,
	PRESET_CHANGE_REQUEST					= 21019,
	PRESET_CHANGE_RESPONSE					= 21020,
	PRESET_ITEMSLOT_UPDATE_NOTIFY			= 21021,
	SKILL_FEATURE_INITIALIZE_REQUEST		= 21022,
	SKILL_FEATURE_INITIALIZE_RESPONSE       = 21023,
	UPDATE_SKILL_POINT_NOTIFY               = 21024,
	PLAYER_REVIVE_INFO_NOTIFY          		= 21025,
	SWITCH_SKILL_SLOT_REQUEST				= 21026,

	/// BUFF
	ADD_BUFF_NOTIFY							= 21100,
	UPDATE_BUFF_NOTIFY						= 21101,
	

	CREATURE_HP_CHANGE_NOTIFY				= 21200,
	CHANGED_SUPER_ARMOR_GAUGE_NOTIFY		= 21201,
	PENALTY_SKILL_NOTIFY					= 21202,
	PENALTY_SKILL_CANCEL_NOTIFY				= 21203,
	CHANGE_REACTION_IMMUNE_INFO_NOTIFY		= 21204,


	/// 몬스터 관련
	/// 몬스터 어그로 타이머 정보 통지
	NPC_AGGRO_TIMER_NOTIFY					= 21300,
	/// 어떤 대상이 타겟되었음을 통지
	CREATURE_TARGETED_NOTIFY				= 21301,
	/// 몬스터 리턴 주의 통지
	NPC_RETURN_WARNING_NOTIFY				= 21302,
	AI_ACTION_START_NOTIFY					= 21303,
	AI_ACTION_END_NOTIFY					= 21304,
	CREATURE_DETECT_TARGET_NOTIFY			= 21305,

	/// 소셜모션
	SOCIAL_MOTION_START_REQUEST				= 21350,
	SOCIAL_MOTION_START_NOTIFY				= 21351,

	/// INVENTORY : Client <-> Game
	///INSERT_ITEM_REQUEST							= 22000,
	INSERT_ITEM_RESPONSE							= 22001,
	DELETE_ITEM_REQUEST								= 22002,
	DELETE_ITEM_RESPONSE							= 22003,
	EQUIP_ITEM_OBJECT_REQUEST						= 22005,
	EQUIP_ITEM_RESPONSE								= 22006,
	UNEQUIP_ITEM_REQUEST							= 22007,
	UNEQUIP_ITEM_RESPONSE							= 22008,
	REFRESH_INVEN_REQUEST							= 22009,
	REFRESH_INVEN_RESPONSE							= 22010,
	SERVER_TIME_REQUEST								= 22011,
	SERVER_TIME_RESPONSE							= 22012,
	UPDATE_ITEM_NOTIFY								= 22013,
	TOGGLE_SAFE_GUARD_REQUEST						= 22014,
	TOGGLE_SAFE_GUARD_RESPONSE						= 22015,
	USE_ITEM_REQUEST								= 22016,
	USE_ITEM_RESPONSE								= 22017,
	ITEM_BOUND_STATE_UPDATE_NOTIFY					= 22018,

	ADD_ITEM_NOTIFY									= 22019,
	REMOVE_ITEM_NOTIFY								= 22020,
	CHANGE_ITEM_STACK_COUNT_NOTIFY					= 22021,
	UPDATE_ITEM_GRADE_LEVEL_NOTIFY					= 22022,
	UPDATE_ITEM_OPTION_NOTIFY						= 22023,
	MOVE_ITEM_NOTIFY								= 22024,
	UPDATE_ARTIFACT_NOTIFY							= 22025,

	FOLLOWER_ADD_SOUL_STONE_NOTIFY					= 22026,
	FOLLOWER_ENCHANT_REQUEST						= 22027,
	FOLLOWER_ENCHANT_RESPONSE						= 22028,
	FOLLOWER_START_MISSION_REQUEST					= 22029,
	FOLLOWER_START_MISSION_NOTIFY					= 22030,
	FOLLOWER_END_MISSION_REQUEST					= 22031,
	FOLLOWER_END_MISSION_RESPONSE					= 22032,
	FOLLOWER_MISSION_REMAIN_TIME_REQUEST			= 22033,
	FOLLOWER_MISSION_REMAIN_TIME_RESPONSE			= 22034,
	FOLLOWER_LOAD_INFO_NOTIFY						= 22035,
	FOLLOWER_MISSION_REWARD_RESPONSE				= 22036,
	FOLLOWER_MISSION_COMPLETE_REQUEST				= 22037,
	FOLLOWER_MISSION_COMPLETE_RESPONSE				= 22038,

	/// ENCHANT : Client <-> Game
	DISENCHANT_ITEM_REQUEST							= 22100,
	DISENCHANT_ITEM_RESPONSE						= 22101,
	ENCHANT_ITEM_REQUEST							= 22104,
	ENCHANT_ITEM_RESPONSE							= 22105,
	EQUIPMENT_TRANSMUTATION_ITEM_REQUEST			= 22106,
	EQUIPMENT_TRANSMUTATION_ITEM_RESPONSE			= 22107,
	UPGRADE_ITEM_REQUEST							= 22108,
	UPGRADE_ITEM_RESPONSE							= 22109,

	/// CRAFTING
	CRAFT_ITEM_REQUEST								= 22116,
	CRAFT_ITEM_RESPONSE								= 22117,

	/// PRISM TRANSMUTATION
	PRISM_TRANSMUTATION_REQUEST						= 22118,
	PRISM_TRANSMUTATION_RESPONSE					= 22119,

	/// ITEM MOVE
	MOVE_ITEM_REQUEST								= 22120,
	MOVE_ITEM_RESPONSE								= 22121,

	// 천상석 합성
	TRANSMUTE_CRYSTAL_ITEM_REQUEST					= 22122,
	TRANSMUTE_CRYSTAL_ITEM_RESPONSE					= 22123,

	// 천상석 변환
	CHANGE_CRYSTAL_ITEM_REQUEST						= 22124,
	CHANGE_CRYSTAL_ITEM_RESPONSE					= 22125,

	// 천상석 변환 횟수 (천상석 보유 변환한 적이 있는 해당 유저에게만 전송)
	CRYSTAL_ITEM_CHANGE_COUNT_NOTIFY				= 22126,


	/// TICKET
	TICKET_NOTIFY									= 22132,
	TICKET_ALL_NOTIFY								= 22133,

	//기여도
	ACQUIRE_CONTRIBUTION_NOTIFY						= 22134,

	// 번들박스
	BUNDLE_BOX_RESULT_NOTIFY						= 22135,

	// 합성
	ITEM_FUSION_REQUEST								= 22136,
	ITEM_FUSION_RESPONSE							= 22137,

	// 아이템 컨텐츠 효과 사용
	USE_ITEM_CONTENTS_EFFECT_REQUEST				= 22138,
	USE_ITEM_CONTENTS_EFFECT_RESPONSE				= 22139,

	// 초월
	TRANSCEND_ITEM_REQUEST							= 22140,
	TRANSCEND_ITEM_RESPONSE							= 22141,
	TRANSCEND_CHANGE_STAT_REQUEST					= 22142,
	TRANSCEND_CHANGE_STAT_RESPONSE					= 22143,


	/// PC PROGRESSION
	/// - level up
	/// - progression(성장)
	///   (1) promotion(진급)
	///   (2) advancement(전직)

	/// PC LEVEL UP AND EXP NOTIFY
	PC_LEVEL_UP_EXP_NOTIFY								= 22200,
	PC_EXP_UP_NOTIFY									= 22201,

	/// 보상 알림
	DROP_REWARD_NOTIFY									= 22300,

	/// STORE : Client <-> Game
	SALE_ITEM_REQUEST									= 22500,
	SALE_ITEM_RESPONSE									= 22501,
	UPDATE_PURSE_NOTIFY									= 22502,

	/// 워크 오브젝트 스폰
	WORKOBJECT_SPAWN_NOTIFY								= 23001,
	/// 워크 오브젝트 정보 업데이트
	WORKOBJECT_UPDATE_NOTIFY							= 23002,

	/// 인터랙션 상태 통지
	INTERACTION_STATE_NOTIFY							= 23011,

	/// 인터렉션 시작요청
	START_INTERACTION_REQUEST							= 23021,

	START_RESURRECTION_REQUEST							= 23022,
	START_RESURRECTION_NOTIFY							= 23023,
	END_RESURRECTION_NOTIFY								= 23024,
	CANCEL_RESURRECTION_REQUEST							= 23025,
	CANCEL_RESURRECTION_NOTIFY							= 23026,

	/// 미니게임 인터렉션 시작
	START_MINIGAME_INTERACTION_NOTIFY					= 23031,
	/// 다이얼로그 인터랙션 시작
	START_DIALOG_INTERACTION_NOTIFY						= 23032,

	/// 다른 유저 인터렉션 시작 알림
	OTHER_PC_START_INTERACTION_NOTIFY					= 23039,

	/// MiniGame 결과 통지(Client -> Server)
	MINIGAME_INTERACTION_RESULT_NOTIFY					= 23041,

	/// 인터렉션 취소 통지(Client -> Server)
	CANCEL_INTERACTION_NOTIFY							= 23051,
	/// 인터렉션 종료 통지
	END_INTERACTION_NOTIFY								= 23052,
	/// 다른 유저 인터렉션 종료 알림
	OTHER_PC_END_INTERACTION_NOTIFY						= 23059,

	// Pc가 신청할 수 있는 컨텐츠(ex.레이드 1챕터)의 정보를 알려준다.
	PUSH_CREATE_NOTIFY = 23100,
	
	// 컨텐츠의 정보가 변경되었을때 알려준다.
	// (데이터 설정에 따라 PUSH가 시간이 지나면 소멸되는데 그런상황에서 사용합니다)
	PUSH_UPDATE_NOTIFY = 23101,
	
	// 혼자 즉시입장 요청/응답(필수임무에서 1인 입장시 사용)
	PUSH_ALONE_JOIN_REQUEST = 23103,
	PUSH_ALONE_JOIN_RESPONSE = 23104,
	
	// 특정 컨텐츠에 개인매칭(빠른입장) 요청/응답
	PUSH_QUICK_MATCHING_JOIN_REQUEST = 23105,
	PUSH_QUICK_MATCHING_JOIN_RESPONSE = 23106,
	
	// 내가 참여했던 방에서 빠지기 요청
	PUSH_QUICK_MATCHING_LEAVE_REQUEST = 23107,
	
	// 내가 방에 참여했을 때/빠졌을 때
	PUSH_MATCHING_ADDED_NOTIFY = 23110,
	PUSH_MATCHING_REMOVED_NOTIFY = 23111,
	
	// 내가 참여한 방에 다른 유저가 들어오고/나갈때 
	PUSH_MATCHING_JOINED_PC_CLASS_UPDATE = 23115,
	
	// 어떤 이유로 참여자모집에 실패하여, 방이 해체된 상태
	PUSH_MATCHING_FAILED_NOTIFY = 23120,

	// 방이 참여자 모집을 성공적으로 마감해서, 대기시간 후 이벤트 시작할 상태
	PUSH_MATCHED_SUCCESS_NOTIFY = 23121,	
	
	/// 연출 카메라 시작
	CAMERA_OBJECT_START_NOTIFY							= 24200,
	/// 연출 카메라 종료
	CAMERA_OBJECT_END_NOTIFY							= 24201,
	/// 연출 카메라 이동
	CAMERA_OBJECT_MOVE_NOTIFY							= 24210,
	
	// 차원결정 			
	DIMENSION_CRYSTAL_INSERT_REQUEST					= 24250,
	DIMENSION_CRYSTAL_INSERT_RESPONSE					= 24251,
	DB_DIMENSION_CRYSTAL_INSERT_REQUEST					= 24252,
	DB_DIMENSION_CRYSTAL_INSERT_RESPONSE				= 24253,
	DIMENSION_CRYSTAL_REMOVE_REQUEST					= 24254,
	DIMENSION_CRYSTAL_REMOVE_RESPONSE					= 24255,
	DB_DIMENSION_CRYSTAL_REMOVE_REQUEST					= 24256,
	DB_DIMENSION_CRYSTAL_REMOVE_RESPONSE				= 24257,	
	DIMENSION_CRYSTAL_LEVELUP_REQUEST					= 24258,
	DIMENISON_CRYSTAL_LEVELUP_RESPONSE					= 24259,
	DB_DIMENSION_CRYSTAL_LEVELUP_REQUEST				= 24260,
	DB_DIMENSION_CRYSTAL_LEVELUP_RESPONSE				= 24261,
	DIMENSION_CRYSTAL_UPGRADE_REQUEST					= 24262,
	DIMENSION_CRYSTAL_UPGRADE_RESPONSE					= 24363,
	DB_DIMENSION_CRYSTAL_UPGRADE_REQUEST				= 24364,
	DB_DIMENSION_CRYSTAL_UPGRADE_RESPONSE				= 24365,

	/// 재연결
	GAME_RECONNECT_REQUEST								= 25000,
	GAME_RECONNECT_RESPONSE								= 25001,
	RECONNECT_LOAD_DATA_REQUEST							= 25002,
	RECONNECT_LOAD_DATA_RESPONSE						= 25003,
	LOAD_DATA_COMPLETE_NOTIFY							= 25005,

	PC_LOGIN_DATA_COMPLETE_NOTIFY						= 25010,
	PC_LOGIN_DATA_START_NOTIFY							= 25011,

	REDIS_GET_RANGE_RANK_INFO_REQUEST					= 25021,
	REDIS_GET_RANGE_RANK_INFO_RESPONSE					= 25022,
	REDIS_GET_MY_RANK_REQUEST							= 25023,
	REDIS_GET_MY_RANK_RESPONSE							= 25024,

	REDIS_RANK_LOOKUP_REQUEST							= 25026,

	RANK_GET_PC_DEATIL_INFO_REQUEST						= 25028,
	REDIS_RANK_LOOKUP_RESPONSE							= 25030,

	// 상점 DB
	DB_SHOP_PRODUCT_PURCHASE_REQUEST					= 25050,
	DB_SHOP_PRODUCT_PURCHASE_RESPONSE					= 25051,
	DB_SHOP_PROUDCT_UPDATE_MISSION_REQUEST				= 25052,
	DB_SHOP_PROUDCT_UPDATE_MISSION_RESPONSE				= 25053,
	DB_SHOP_PRODUCT_MISSION_REWARD_REQUEST				= 25054,
	DB_SHOP_PRODUCT_MISSION_REWARD_RESPONSE				= 25055,
	DB_SHOP_PRODUCT_PROMOTION_REWARD_REQUEST			= 25056,
	DB_SHOP_PRODUCT_PROMOTION_REWARD_RESPONSE			= 25057,

	// 영약
	ELIXIR_LIST_NOTIFY									= 25070,
	ELIXIR_EHCNAHT_REQUEST								= 25071,
	ELIXIR_EHCNAHT_RESPONSE								= 25072,

	DB_ELIXIR_ENCHANT_REQUEST							= 25073,
	DB_ELIXIR_ENCHANT_RESPONSE							= 25074,

	// 테라스톤
	TERRASTONE_LIST_NOTIFY								= 25080,
	TERRASTONE_ENCHANT_REQUEST							= 25081,
	TERRASTONE_ENCHANT_RESPONSE							= 25082,

	DB_TERRASTONE_ENCHANT_REQUEST						= 25083,
	DB_TERRASTONE_ENCHANT_RESPONSE						= 25084,

	// 몬스터 연구
	RESEARCH_LIST_NOTIFY								= 25090,
	RESEARCH_ENCHANT_REQUEST							= 25091,
	RESEARCH_ENCHANT_RESPONSE							= 25092,

	DB_RESEARCH_ENCHANT_REQUEST							= 25093,
	DB_RESEARCH_ENCHANT_RESPONSE						= 25094,

	// 수호성
	GUARDIAN_STAR_LIST_NOTIFY							= 25100,
	GUARDIAN_STAR_ENCHANT_REQUEST						= 25101,
	GUARDIAN_STAR_ENCHANT_RESPONSE						= 25102,
	GUARDIAN_STAR_UPGRADE_REQUEST						= 25103,
	GUARDIAN_STAR_UPGRADE_RESPONSE						= 25104,

	DB_GUARDIAN_STAR_ENCHANT_REQUEST					= 25105,
	DB_GUARDIAN_STAR_ENCHANT_RESPONSE					= 25106,

	DB_GUARDIAN_STAR_UPGRADE_REQUEST					= 25107,
	DB_GUARDIAN_STAR_UPGRADE_RESPONSE					= 25108,

	// 패시브 스킬
	PASSIVE_SKILL_LIST_NOTIFY							= 25109,
	PASSIVE_SKILL_ENCHANT_REQUEST						= 25110,
	PASSIVE_SKILL_ENCHANT_RESPONSE						= 25111,

	DB_PASSIVE_SKILL_ENCHANT_REQUEST					= 25112,
	DB_PASSIVE_SKILL_ENCHANT_RESPONSE					= 25113,
	DB_BUFF_SAVE_REQUEST								= 25114,
	DB_BUFF_SAVE_RESPONSE								= 25115,
	
	DB_BUFF_UPDATE_REQUEST								= 25116,
	DB_BUFF_UPDATE_RESPONSE								= 25117,
	DB_BUFF_REMOVE_REQUEST								= 25118,
	DB_BUFF_REMOVE_RESPONSE								= 25119,

	// 물약 성장
	POTION_GROWTH_LIST_NOTIFY							= 25120,
	POTION_GROWTH_UPDATE_NOTIFY							= 25121,
	POTION_GROWTH_LEVEL_UP_REQUEST						= 25122,
	POTION_GROWTH_LEVEL_UP_RESPONSE						= 25123,

	DB_POTION_GROWTH_LEVEL_EXP_CHANGE_REQUEST			= 25124,
	DB_POTION_GROWTH_LEVEL_EXP_CHANGE_RESPONSE			= 25125,

	// 클라이언트 설정 저장
	PC_CLIENT_CONFIG_NOTIFY								= 25130,
	PC_CLIENT_CONFIG_SAVE_REQUEST						= 25131,

	DB_UPDATE_PC_CLIENT_CONFIG_NOTIFY					= 25132,

	// 공지 티커
	NOTICE_ITEM_NOTIFY									= 25140,
	NOTICE_USER_NOTIFY									= 25141,
	NOTICE_SHOP_PURCHASE_NOTIFY							= 25142,
	NOTICE_PET_NOTIFY									= 25143,
	NOTICE_ELITE_MONSTER_KILL_NOTIFY					= 25144,
	
	//
	// #길드
	//

	// 내 길드 정보 전달 (로그인시 전달됨)
	GUILD_INFO_NOTIFY = 25200,

	/// 미구현을 알리기 위한 패킷
	/// 서버에서 구현 안된 요청이 오면 이 패킷이 갑니다
	GUILD_NOT_IMPL_NOTIFY = 25201,

	// 내 길드 정보 요청
	GUILD_INFO_REQUEST = 25202,
	GUILD_INFO_RESPONSE = 25203,

	/// 길드 생성
	GUILD_CREATE_REQUEST = 25204,
	GUILD_CREATE_RESPONSE = 25205,

	/// 생성 전 길드명 체크
	GUILD_CHECK_NAME_REQUEST = 25206,
	GUILD_CHECK_NAME_RESPONSE = 25207,

	/// 길드 해산
	GUILD_DESTROY_REQUEST = 25208,
	GUILD_DESTROY_RESPONSE = 25209,

	/// 길드 찾기 (길드명으로)
	GUILD_FIND_REQUEST = 25210,
	GUILD_FIND_RESPONSE = 25211,

	/// 가입 신청 (request request..)
	GUILD_JOIN_REQ_REQUEST = 25212,
	GUILD_JOIN_REQ_RESPONSE = 25213,

	/// 가입 신청 변경 알림
	GUILD_APPLICANT_UPDATE_NOTIFY = 25214,

	/// 새로운 멤버 들어옴
	GUILD_NEW_MEMBER_NOTIFY = 25215,

	/// 멤버 나감
	GUILD_LEAVE_MEMBER_NOTIFY = 25216,

	/// 탈퇴 (강퇴는 밑에 따로 있음)
	GUILD_LEAVE_REQUEST = 25217,
	GUILD_LEAVE_RESPONSE = 25218,

	/// 길드 가입됨
	GUILD_JOIN_NOTIFY = 25219,

	/// 길드 탈퇴됨
	GUILD_LEAVE_NOTIFY = 25220,

	/// 길드 멤버 조회
	GUILD_MEMBER_LIST_REQUEST = 25221,
	GUILD_MEMBER_LIST_RESPONSE = 25222,

	/// 길드 출석
	GUILD_ATTEND_REQUEST = 25223,
	GUILD_ATTEND_RESPONSE = 25224,

	/// 길드 기부
	GUILD_DONATE_REQUEST = 25225,
	GUILD_DONATE_RESPONSE = 25226,
	
	/// 길드 랭킹 요청
	GUILD_RANKING_LIST_REQUEST = 25227,
	GUILD_RANKING_LIST_RESPONSE = 25228,

	/// 길드 목록 요청 (변경될 수 있음. 일단 임시)
	GUILD_LIST_REQUEST = 25229,
	GUILD_LIST_RESPONSE = 25230,

	// 길드 상세 정보 요청 (미가입 길드의 상세 정보)
	GUILD_DETAIL_INFO_REQUEST = 25231,
	GUILD_DETAIL_INFO_RESPONSE = 25232,

	/// 가입 신청한 목록 요청 (내가 가입신청한 것을 확인)
	GUILD_MY_JOIN_REQ_LIST_REQUEST = 25233,
	GUILD_MY_JOIN_REQ_LIST_RESPONSE = 25234,

	/// 가입 요청 취소
	GUILD_REMOVE_JOIN_REQ_REQUEST = 25235,
	GUILD_REMOVE_JOIN_REQ_RESPONSE = 25236,

	///
	/// #길드 관리 관련
	///

	/// 가입 요청 목록 요청  (길드 관리자가 확인하는 용도)
	GUILD_JOIN_REQ_LIST_REQUEST = 25237,
	GUILD_JOIN_REQ_LIST_RESPONSE = 25238,

	/// 가입 수락
	GUILD_ACCEPT_JOIN_REQ_REQUEST = 25239,
	GUILD_ACCEPT_JOIN_REQ_RESPONSE = 25240,

	/// 가입 요청 거절
	GUILD_REJECT_JOIN_REQ_REQUEST = 25241,
	GUILD_REJECT_JOIN_REQ_RESPONSE = 25242,
	// GUILD_REJECT_JOIN_REQ_NOTIFY 밑에 있음

	/// 가입 조건 변경
	GUILD_CHANGE_JOIN_CONDITION_REQUEST = 25243,
	GUILD_CHANGE_JOIN_CONDITION_RESPONSE = 25244,

	/// 소개글 or 공지글 변경
	GUILD_CHANGE_MSG_REQUEST = 25245,
	GUILD_CHANGE_MSG_RESPONSE = 25246,

	/// 강퇴처리
	GUILD_KICK_MEMBER_REQUEST = 25247,
	GUILD_KICK_MEMBER_RESPONSE = 25248,

	/// 레벨업
	GUILD_LEVEL_UP_NOTIFY = 25249,

	/// 멤버 등급 변경
	GUILD_CHANGE_MEMBER_GRADE_REQUEST = 25250,
	GUILD_CHANGE_MEMBER_GRADE_RESPONSE = 25251,
	GUILD_CHANGE_MEMBER_GRADE_NOTIFY = 25252,

	/// 길드 히스토리 조회
	GUILD_HISTORY_REQUEST = 25253,
	GUILD_HISTORY_RESPONSE = 25254,

	/// 길드 버프 구매 (개인 버프)
	GUILD_BUFF_PURCHASE_REQUEST = 25255,
	GUILD_BUFF_PURCHASE_RESPONSE = 25256,

	/// 길드 전체 적용 버프는
	/// SERVER_GUILD_BUFF_ADD / REMOVE 패킷으로 서버간 동기화 됨

	/// 길드장 위임
	GUILD_CHANGE_LEADER_REQUEST = 25257,
	GUILD_CHANGE_LEADER_RESPONSE = 25258,

	/// 길드장 후보 목록
	GUILD_CANDIDATE_LEADER_LIST_REQUEST = 25259,
	GUILD_CANDIDATE_LEADER_LIST_RESPONSE = 25260,

	/// 길드 문장 변경
	GUILD_CHANGE_CREST_REQUEST = 25261,
	GUILD_CHANGE_CREST_RESPONSE = 25262,

	/// 분배 설정 정보 요청
	GUILD_SHARE_SETTING_INFO_REQUEST = 25263,
	GUILD_SHARE_SETTING_INFO_RESPONSE = 25264,

	/// 분배 설정 저장 요청
	GUILD_SAVE_SHARE_SETTING_REQUEST = 25265,
	GUILD_SAVE_SHARE_SETTING_RESPONSE = 25266,

	// 길드 초대(1:1 대화방)
	GUILD_INVITE_MESSAGE_REQUEST = 25267,
	GUILD_INVITE_MESSAGE_RESPONSE = 25268,

	/// 길드원 상세정보 요청
	GUILD_MEMBER_DETAIL_INFO_REQUEST = 25269,
	GUILD_MEMBER_DETAIL_INFO_RESPONSE = 25270,

	/// 가입 신청 거절 알림 (거절 당한 사람에게 패킷이 간다)
	GUILD_REJECT_JOIN_REQ_NOTIFY = 25271,

	/// 길드이름 변경
	GUILD_CHANGE_NAME_REQUEST = 25272,
	GUILD_CHANGE_NAME_RESPONSE = 25273,
	GUILD_CHANGE_NAME_NOTIFY = 25274,

	/// 길드던전 내 순위  정보 요청
	GUILD_DUNGEON_SCORE_REQUEST = 25275,
	GUILD_DUNGEON_SCORE_RESPONSE = 25276,

	/// 길드 전체 서버 랭킹 요청
	GUILD_UNITY_RANKING_LIST_REQUEST = 25277,
	GUILD_UNITY_RANKING_LIST_RESPONSE = 25278,


	///
	/// #길드 DB관련 패킷
	///
	DB_GUILD_CREATE_REQUEST = 25300,
	DB_GUILD_CREATE_RESPONSE,

	DB_GUILD_DESTROY_REQUEST,
	DB_GUILD_DESTROY_RESPONSE,

	/// 길드 출석
	DB_GUILD_ATTEND_REQUEST,
	DB_GUILD_ATTEND_RESPONSE,

	/// 길드 기부
	DB_GUILD_DONATE_REQUEST,
	DB_GUILD_DONATE_RESPONSE,

	/// 길드 문장 변경
	DB_GUILD_CHANGE_CREST_REQUEST,
	DB_GUILD_CHANGE_CREST_RESPONSE,

	/// 길드 출석 시간 리셋 (테스트용)
	DB_GUILD_ATTEND_RESET_REQUEST,
	DB_GUILD_ATTEND_RESET_RESPONSE,

	// 길드 이름 변경
	DB_GUILD_CHANGE_NAME_REQUEST,
	DB_GUILD_CHANGE_NAME_RESPONSE,

	///
	/// 시즌
	///

	/// 현재 시즌 정보 조회 (시즌 UI 첫 정보)
	SEASON_CURRENT_INFO_REQUEST  = 25400,
	SEASON_CURRENT_INFO_RESPONSE,

	/// 현재 시즌에 누적된 보상 (거래소 수수로) 조회
	SEASON_REWARD_INFO_REQUEST,
	SEASON_REWARD_INFO_RESPONSE,

	/// 길드던전 현재 시즌 정보 조회
	SEASON_DUNGEON_INFO_REQUEST,
	SEASON_DUNGEON_INFO_RESPONSE,
	
	
	/// RVR 컨텐츠 처리
	AGENT_PC_MOVE_SERVER_REQUEST = 30000,
	
	// 전쟁필드의 남은 시간과 점령전이벤트 
	RVR_BATTLE_FIELD_REMAIN_TIME_REQUEST = 30020,
	RVR_BATTLE_FIELD_REMAIN_TIME_RESPONSE = 30021,
	
	// 전쟁필드에서 정보 요청 및 응답(on BattleServer)
	RVR_BATTLE_FIELD_INFO_REQUEST = 30026,
	RVR_BATTLE_FIELD_INFO_RESPONSE = 30027,
	
	// 전쟁필드 UI
	RVR_BATTLE_FIELD_ALL_INFOS_REQUEST = 30030,
	RVR_BATTLE_FIELD_ALL_INFOS_RESPONSE = 30031,
	
	// 게임서버 -> 전쟁서버로 전송
	RVR_PASS_BATTLE_FIELD_CAHNNEL_INFO_SYNC_NOTIFY = 30033,
	RVR_RELAY_BATTLE_FIELD_CAHNNEL_INFO_SYNC_NOTIFY = 30034,
	
	// 전쟁필드 배틀서버 -> 게임서버로 전송	
	RVR_PASS_BATTLE_FIELD_CHANNEL_INFO_NOTIFY = 30035,
	RVR_RELAY_BATTLE_FIELD_CHANNEL_INFO_NOTIFY = 30036,
	RVR_PASS_BATTLE_FIELD_PLAYER_COUNT_INFO_NOTIFY = 30037,
	RVR_RELAY_BATTLE_FIELD_PLAYER_COUNT_INFO_NOTIFY = 30038,
	
	// 전쟁필드 점령전이벤트 시작전 notify
	RVR_BATTLE_FIELD_EVENT_START_NOTIFY = 30040,
	RVR_BATTLE_FIELD_EVENT_END_NOTIFY = 30041,
	RVR_BATTLE_FIELD_CLOSE_NOTIFY = 30042,	
	
	// 전쟁필드 시간재화
	RVR_BATTLE_FILED_TIME_INFO_NOTIFY = 30047,	
	RVR_BATTLE_FILED_TIME_INFO_REQUEST = 30048,
	RVR_BATTLE_FILED_TIME_INFO_RESPONSE = 30049,	
	RVR_BATTLE_FILED_TIME_EXPIRED_NOTIFY = 30050,
	RVR_BATTLE_FILED_FREE_TIME_EXPIRED_NOTIFY = 30051,
	RVR_BATTLE_FILED_REMAIN_TIME_NOTIFY = 30052,
	
	// 전쟁필드 PK 알림
	RVR_BATTLE_FILED_PK_NOTIFY = 30060,
	
	// 전쟁필드 단기보상 알림(본인)
	RVR_BATTLE_FIELD_SHORT_TERM_MAX_NOTIFY = 30061,
	// 전쟁필드 단기보상 알림(월드 전체)
	RVR_BATTLE_FIELD_OTHER_PC_SHORT_TERM_MAX_NOTIFY = 30062,
	
	// RVR 대기열 요청
        RVR_STANDBY_ORDER_REQUEST = 30101,
        RVR_STANDBY_ORDER_RESPONSE = 30102,

	// RVR 참가 요청
        RVR_JOIN_REQUEST = 30103,
        RVR_JOIN_RESPONSE = 30104,

        // RVR 예약 요청
        RVR_RESERVATION_REQUEST = 30105,
        RVR_RESERVATION_RESPONSE = 30106,

        // RVR 취소 요청
        RVR_CANCEL_REQUEST = 30107,
        RVR_CANCEL_RESPONSE = 30108,

	// RVR 배틀 서버에서 떠나기.
        RVR_LEAVE_BATTLE_SERVER_REQUEST = 30109,
        RVR_LEAVE_BATTLE_SERVER_RESPONSE = 30110,
	
	/// 예약 상태 통지
	RVR_RESERVATION_STATE_NOTIFY = 30111,

        RVR_PASS_CHECK_STANDBY_ORDER_REQUEST = 30501,
        RVR_RELAY_CHECK_STANDBY_ORDER_REQUEST = 30502,
        RVR_PASS_CHECK_STANDBY_ORDER_RESPONSE = 30503,
        RVR_RELAY_CHECK_STANDBY_ORDER_RESPONSE = 30504,

        RVR_PERMISSION_TO_JOIN_PASS_REQUEST = 30511, 
        RVR_PERMISSION_TO_JOIN_RELAY_REQUEST = 30512,
        RVR_PERMISSION_TO_JOIN_PASS_RESPONSE = 30513,
        RVR_PERMISSION_TO_JOIN_RELAY_RESPONSE = 30514,

        RVR_CANCEL_TO_JOIN_PASS_REQUEST = 30521, 
        RVR_CANCEL_TO_JOIN_RELAY_REQUEST = 30522,
        RVR_CANCEL_TO_JOIN_PASS_RESPONSE = 30523,
        RVR_CANCEL_TO_JOIN_RELAY_RESPONSE = 30524,	
		
       	RVR_ASK_TO_STANDBY_PASS_REQUEST = 30525, 
        RVR_ASK_TO_STANDBY_RELAY_REQUEST = 30526,
        RVR_ASK_TO_STANDBY_PASS_RESPONSE = 30527,
        RVR_ASK_TO_STANDBY_RELAY_RESPONSE = 30528,

	RVR_CONNECTED_GAME_SERVER_NOTIFY = 30529,
		
 	RVR_CONNECTED_BATTLE_SERVER_NOTIFY = 30531,
        RVR_DISCONNECTED_BATTLE_SERVER_NOTIFY = 30532,

	RVR_QA_COMMAND_PASS_NOTIFY = 30533,
	RVR_QA_COMMAND_RELAY_NOTIFY = 30534,

        /// RVR의 클라이언트 퀘스트 위치로 이동
     	RVR_MOVE_CLIENT_QUEST_LOC_REQUEST = 30535,
	RVR_MOVE_CLIENT_QUEST_LOC_RESPONSE = 30536,

        /// RVR의 베이스 캠프 이동
     	RVR_MOVE_BASE_CAMP_REQUEST = 30537,
	RVR_MOVE_BASE_CAMP_RESPONSE = 30538,

	// RVR 메인 HUD 정보
	RVR_MAIN_HUD_INFO_NOTIFY = 30539,

	// RVR 이벤트 종료 보상 정보
	RVR_EVENT_TOTAL_REWARD_NOTIFY = 30541,

	// 점령전 렐름 간 점수 알림(화면중앙상단)
	RVR_MAIN_HUD_POINT_INFO_NOTIFY = 30550, 

	// 점령전 각 타워의 게이지 정보 알림(좌측탭)
	RVR_OCCUPYING_GAUGE_APPROXIMATE_INFO_NOTIFY = 30551,

	// 점령지 시야 내에 들어가 있을 때 알려줄 점령 게이지
	RVR_OCCUPYING_GAUGE_INFO_NOTIFY = 30552,

	///------------------------------
	/// 친구시스템(server)		
	/// 친구요청 보냈을 때(보낸 요청 추가)
	BUDDY_AG_SEND_INVITATION_NOTIFY = 30680,
	
	/// 친구요청 받았을 때(받은 요청 추가)
	BUDDY_AG_RECEIVE_INVITATION_NOTIFY = 30681,
	
	/// 친구요청 수락했을 때(받은 요청 삭제, 친구 추가)
	BUDDY_AG_ACCEPT_RECEIVE_INVITATION_NOTIFY = 30682,
	
	/// 친구요청 수락당했을 때(보낸 요청 삭제, 친구 추가)
	BUDDY_AG_ACCEPTED_SEND_INVITATION_NOTIFY = 30683,	
	
	/// 친구요청 거절했을 때(받은 요청 삭제)
	BUDDY_AG_REJECT_RECEIVE_INVITATION_NOTIFY = 30684,
	
	/// 친구요청 거절당했을 때(보낸 요청 삭제)
	BUDDY_AG_REJECTED_SEND_INVITATION_NOTIFY = 30685,
	
	/// 친구 삭제했을 때(친구 삭제)
	BUDDY_AG_DELETE_BUDDY_NOTIFY = 30686,
	
	/// 친구 삭제당했을 때(친구 삭제)
	BUDDY_AG_DELETED_BUDDY_NOTIFY = 30687,	
	
	///------------------------------
	/// 친구시스템
	BUDDY_DATA_ALL_NOTIFY = 30701,
	
	// 친구요청 보내기
	BUDDY_SEND_INVITATION_REQUEST = 30703,
	BUDDY_SEND_INVITATION_RESPONSE = 30704,	
	
	// 받은 친구요청을 수락하기
	BUDDY_ACCEPT_INVITATION_REQUEST = 30707,
	BUDDY_ACCEPT_INVITATION_RESPONSE = 30708,
	
	// 받은 친구요청을 거절하기
	BUDDY_REJECT_INVITATION_REQUEST = 30709,
	BUDDY_REJECT_INVITATION_RESPONSE = 30710,	
	
	// 친구를 삭제하기
	BUDDY_DELETE_REQUEST = 30711,
	BUDDY_DELETE_RESPONSE = 30712,
	
	// 친구요청 받았을 때
	BUDDY_RECEIVE_INVITATION_NOTIFY = 30715,	
	
	// 친구가 추가되었을 때(상대방이 내 요청을 수락했을 때)
	BUDDY_ADDED_NOTIFY = 30716,
	
	// 친구가 삭제되었을 때(상대방이 나를 삭제했을 때)
	BUDDY_DELETED_NOTIFY = 30718,	
	
	// 보낸 요청이 삭제되었을 때(상대방이 거절)
	BUDDY_SEND_INVITATION_REJECTED_NOTIFY = 30723,

	// 친구 검색(이름으로 사람찾기)
	BUDDY_SEARCH_REQUEST = 30725,
	BUDDY_SEARCH_RESPONSE = 30726,
	
	// 친구 추천받기
	BUDDY_RECOMMEND_REQUEST = 30730,
	BUDDY_RECOMMEND_RESPONSE = 30731,
	
	// 친구 상세보기
	BUDDY_DETAIL_INFO_REQUEST = 30734,
	
	// 친구 탭 새로고침 요청/응답
	BUDDY_REFRESH_REQUEST = 30735,
	BUDDY_REFRESH_RESPONSE = 30736,
	
	// 받은 요청탭 새로고침 요청/응답
	BUDDY_RECEIVE_INVIATION_REFRESH_REQUEST = 30737,
	BUDDY_RECEIVE_INVIATION_REFRESH_RESPONSE = 30738,

	// 친구 소환하기
	// 내가 친구에게 소환 요청
	SUMMON_REQUEST = 30739,
	SUMMON_RESPONSE = 30740,
	
	// 내가 받은 소환요청을 수락할 때
	SUMMON_ACCEPT_REQUEST = 30741,
	SUMMON_ACCEPT_RESPONSE = 30742,
	
	// 소환요청 받았을 때
	SUMMON_RECEIVED_NOTIFY = 30744,
	
	// 내가 보낸 소환요청을 상대방이 수락했을 때
	SUMMON_ACCEPTED_NOTIFY = 30745,
	
	// 미션,레이드,황금던전에서 소환하기 가능한 상태일 때 서버->클라로 노티
	SUMMON_ABLE_STATE_NOTIFY = 30746,
	
	// 친구에게 이동
	MOVE_TO_PC_REQUEST = 30748,
	MOVE_TO_PC_RESPONSE = 30749,	
	
	// 단기 보상
	SHORT_TERM_REWARD_DATA_NOTIFY = 30760,
	SHORT_TERM_REWARD_DATA_ALL_NOTIFY = 30761,

	SHORT_TERM_REWARD_GIVE_REQUSET = 30762,
	SHORT_TERM_REWARD_GIVE_RESPONSE = 30763,

	SHORT_TERM_REWARD_DATA_ALL_REQUSET = 30764,
	SHORT_TERM_REWARD_DATA_ALL_RESPONSE = 30765,

	// 킬러 리스트
	KILLER_DATA_NOTIFY = 30770,
	KILLER_DATA_ALL_NOTIFY = 30771,

	// 입장 티켓/아이템 환불
	// (AS->GS) 레디스에 아이템/티켓 사용기록 완료했을 때
	REFUND_REDIS_RECORD_ADDED_NOTIFY = 30780,
	
	// (GS->AS) 레디스에 데이터 요청
	REFUND_REDIS_RECORD_DATA_REQUEST = 30781,
	// (GS<-AS) 레디스에 데이터 응답
	REFUND_REDIS_RECORD_DATA_RESPONSE = 30782,
	
	// (GS->AS) 레디스에 남겨져있는 기록을 삭제해달라고 요청 및 응답
	REFUND_REDIS_RECORD_REMOVE_REQUEST = 30783,
	REFUND_REDIS_RECORD_REMOVE_RESPONSE = 30784,
	
	// 전쟁필드 그룹별 채집횟수를 클라이언트에 알려준다.
	BATTLE_FIELD_COLLECTION_NOTIFY = 30790,
	DB_BATTLE_FIELD_COLLECTION_UPDATE_REQUEST = 30791,
	DB_BATTLE_FIELD_COLLECTION_UPDATE_RESPONSE = 30792,	
	
	// 매칭 홍보
	PUSH_PROMOTION_REQUEST = 30800,		// Client->GameServer 매칭 홍보 요청
	PUSH_PROMOTION_RESPONSE = 30801,	// GameServer->Client 매칭 홍보 응답

	// 그룹 매칭 만들기 요청/응답
	GROUP_MATCHING_MAKE_REQEUST = 30805,
	GROUP_MATCHING_MAKE_RESPONSE = 30806,

	// 그룹 매칭 떠나기 요청
	GROUP_MATCHING_LEAVE_REQUEST = 30807,
	
	// 그룹 매칭 초대할 후보 리스트
	GROUP_MATCHING_GUILD_MEMBER_LIST_REQUEST = 30812,
	GROUP_MATCHING_GUILD_MEMBER_LIST_RESPONSE = 30813,
	GROUP_MATCHING_BUDDY_LIST_REQUEST = 30814,
	GROUP_MATCHING_BUDDY_LIST_RESPONSE = 30815,

	// 그룹매칭 유저 초대 보내기 요청/응답
	GROUP_MATCHING_INVITE_REQUEST = 30820,
	GROUP_MATCHING_INVITE_RESPONSE = 30821,

	// 그룹매칭 참여했던 그룹원이 방을 나갔을 경우, 그룹장에게 노티
	GROUP_MATCHING_MEMBER_LEAVE_NOTIFY = 30824,
	
	// 그룹매칭 보낸 초대장이 수락/거절당했다고 노티
	GROUP_MATCHING_INVITATION_ACCEPTED_NOTIFY = 30825,
	GROUP_MATCHING_INVITATION_REJECTED_NOTIFY = 30826,
	
	// 그룹매칭 초대장 추가/삭제됐다고 노티
	GROUP_MATCHING_INVITATION_ADD_NOTIFY = 30827,
	GROUP_MATCHING_INVITATION_REMOVE_NOTIFY = 30828,
	
	// 받은 그룹매칭 초대 수락/응답
	GROUP_MATCHING_INVITE_ACCEPT_REQUEST = 30830,
	GROUP_MATCHING_INVITE_ACCEPT_RESPONSE = 30831,
	
	// 받은 그룹매칭 초대 거절/응답
	GROUP_MATCHING_INVITE_REJECT_REQUEST = 30832,
	GROUP_MATCHING_INVITE_REJECT_RESPONSE = 30833,		
	
	// 그룹매칭 그룹원끼리 즉시시작 요청/응답(Matching->Matched)
	GROUP_MATCHING_START_REQUEST = 30840,
	GROUP_MATCHING_START_RESPONSE = 30841,
	
	// 그룹매칭을 다른 유저도 함께 매칭시작하기 요청/응답
	GROUP_MATCHING_CONVERT_TO_QUICK_REQUEST = 30842,
	GROUP_MATCHING_CONVERT_TO_QUICK_RESPONSE = 30843,

	// 그룹매칭 재매칭 요청/응답
	GROUP_MATCHING_REMATCHING_REQUEST = 30844,
	GROUP_MATCHING_REMATCHING_RESPONSE = 30845,
	
	// 외형 장비
	EQUIP_COSTUME_REQUEST = 30851,
	EQUIP_COSTUME_RESPONSE = 30852,
	UNEQUIP_COSTUME_REQUEST = 30853,
	UNEQUIP_COSTUME_RESPONSE = 30854,

	COSTUME_PRESET_CHANGE_REQUEST = 30855,
	COSTUME_PRESET_CHANGE_RESPONSE = 30856,
	COSTUME_PRESET_COSTUMESLOT_UPDATE_NOTIFY = 30857,

	ENCHANT_COSTUME_REQUEST = 30858,
	ENCHANT_COSTUME_RESPONSE = 30859,
	UPGRADE_COSTUME_REQUEST = 30860,
	UPGRADE_COSTUME_RESPONSE = 30861,

	SHOW_COSTUME_REQUEST = 30862,
	SHOW_COSTUME_RESPONSE = 30863,
	HIDE_COSTUME_REQUEST = 30864,
	HIDE_COSTUME_RESPONSE = 30865,

	// 외형장비 계승
	INHERIT_COSTUME_REQUEST = 30866,
	INHERIT_COSTUME_RESPONSE = 30867,

	// 라이브 이벤트 공통
	LIVE_EVENT_STOP_NOTIFY = 30900,
	LIVE_EVENT_DATA_UPDATE_NOTIFY = 30901,	// AUTH -> GAME AGENT

	// 라이브 이벤트
	LIVE_EVENT_TRADE_DATA_NOTIFY = 30910,
	LIVE_EVENT_BUFF_DATA_NOTIFY = 30911,
	LIVE_EVENT_ATTENTION_DATA_NOTIFY = 30912,
	LIVE_EVENT_NEWBIE_ATTENTION_DATA_NOTIFY = 30913,
	LIVE_EVENT_RETURN_ATTENTION_DATA_NOTIFY = 30914,
	LIVE_EVENT_DIA_BUY_DATA_NOTIFY = 30915,
	LIVE_EVENT_DIA_SPENT_DATA_NOTIFY = 30916,
	LIVE_EVENT_LIMIT_SELL_SHOP_DATA_NOTIFY = 30917,
	LIVE_EVENT_LEVEL_BUFF_DATA_NOTIFY = 30918,
	LIVE_EVENT_NEWBIE_BUFF_DATA_NOTIFY = 30919,
	LIVE_EVENT_ITEM_DROP_DATA_NOTIFY = 30920,
	LIVE_EVENT_LEVELUP_EVENT_DATA_NOTIFY = 30921,
	LIVE_EVENT_LEVELUP_NEWBIE_DATA_NOTIFY = 30922,
	LIVE_EVENT_LEVELUP_RETURN_DATA_NOTIFY = 30923,

	// 라이브 이벤트 인스턴스

	// 라이브 이벤트 재화 교환 상점
	LIVE_EVENT_TRADE_INSTANCE_NOTIFY = 30930,
	LIVE_EVENT_TRADE_INSTANCE_EXPIRE_NOTIFY = 30931,
	LIVE_EVENT_TRADE_PURCHASE_REQUEST = 30932,
	LIVE_EVENT_TRADE_PURCHASE_RESPONSE = 30933,

	// 라이브 이벤트 다이아 충전
	LIVE_EVENT_DIA_BUY_NOTIFY = 30940,
	LIVE_EVENT_DIA_BUY_MISSION_UPDATE_NOTIFY = 30941,
	LIVE_EVENT_DIA_BUY_AMOUNT_UPDATE_NOTIFY = 30942,
	LIVE_EVENT_DIA_BUY_REWARD_REQUEST = 30943,
	LIVE_EVENT_DIA_BUY_REWARD_RESPONSE = 30944,

	// 라이브 이벤트 다이아 소비
	LIVE_EVENT_DIA_SPENT_NOTIFY = 30950,
	LIVE_EVENT_DIA_SPENT_MISSION_UPDATE_NOTIFY = 30951,
	LIVE_EVENT_DIA_SPENT_AMOUNT_UPDATE_NOTIFY = 30952,
	LIVE_EVENT_DIA_SPENT_REWARD_REQUEST = 30953,
	LIVE_EVENT_DIA_SPENT_REWARD_RESPONSE = 30954,

	// 라이브 이벤트 한정 상점
	LIVE_EVENT_LIMIT_SELL_SHOP_INSTANCE_NOTIFY = 30960,
	LIVE_EVENT_LIMIT_SELL_SHOP_INSTANCE_EXPIRE_NOTIFY = 30961,
	LIVE_EVENT_LIMIT_SELL_SHOP_PURCHASE_REQUEST = 30962,
	LIVE_EVENT_LIMIT_SELL_SHOP_PURCHASE_RESPONSE = 30963,
	
	// 라이브 이벤트 특별출석부
	LIVE_EVENT_ATTENTION_NOTIFY = 30980,
	LIVE_EVENT_ATTENTION_RECEIVE_NOTIFY = 30981,
	LIVE_EVENT_ATTENTION_END_RECEIVE_NOTIFY = 30982,

	LIVE_EVENT_ATTENTION_REWARD_RECEIVE_REQUEST  = 30983,
	LIVE_EVENT_ATTENTION_REWARD_RECEIVE_RESPONSE = 30984,
	LIVE_EVENT_ATTENTION_RETURN_REWARD_RECEIVE_REQUEST  = 30985,
	LIVE_EVENT_ATTENTION_RETURN_REWARD_RECEIVE_RESPONSE = 30986,
	LIVE_EVENT_ATTENTION_NEWBIE_REWARD_RECEIVE_REQUEST  = 30987,
	LIVE_EVENT_ATTENTION_NEWBIE_REWARD_RECEIVE_RESPONSE = 30988,

	LIVE_EVENT_ATTENTION_END_REWARD_RECEIVE_REQUEST  = 30989,
	LIVE_EVENT_ATTENTION_END_REWARD_RECEIVE_RESPONSE = 30990,
	LIVE_EVENT_ATTENTION_END_RETURN_REWARD_RECEIVE_REQUEST  = 30991,
	LIVE_EVENT_ATTENTION_END_RETURN_REWARD_RECEIVE_RESPONSE = 30992,
	LIVE_EVENT_ATTENTION_END_NEWBIE_REWARD_RECEIVE_REQUEST  = 30993,
	LIVE_EVENT_ATTENTION_END_NEWBIE_REWARD_RECEIVE_RESPONSE = 30994,

	//라이브 이벤트 버프
	LIVE_EVENT_BUFF_INFO_INSTANCE_NOTIFY = 31000,

	// 라이브 이벤트 레벨업
	LIVE_EVENT_LEVELUP_NOTIFY = 31010,
	LIVE_EVENT_LEVELUP_RECEIVE_NOTIFY = 31011,
	LIVE_EVENT_LEVELUP_REWARD_RECEIVE_REQUEST  = 31012,
	LIVE_EVENT_LEVELUP_REWARD_RECEIVE_RESPONSE = 31013,


	// 저장소 슬롯 확장
	STORAGE_SLOT_EXPANSION_REQUEST	= 31100,
	STORAGE_SLOT_EXPANSION_RESPONSE	= 31101,

	// 난투장 시간재화
	BRAWL_TIME_INFO_NOTIFY = 31105,	
	BRAWL_TIME_INFO_REQUEST = 31106,
	BRAWL_TIME_INFO_RESPONSE = 31107,	
	BRAWL_TIME_EXPIRED_NOTIFY = 31108,
	BRAWL_FREE_TIME_EXPIRED_NOTIFY = 31109,
	BRAWL_REMAIN_TIME_NOTIFY = 31110,	
	
	// 난투장 단기 보상
	BRAWL_SHORT_TERM_DATA_NOTIFY = 31111,
	BRAWL_SHORT_TERM_REWARD_REQUEST = 31112,
	BRAWL_SHORT_TERM_REWARD_RESPONSE = 31113,
	BRAWL_SHORT_TERM_DATA_REQUEST = 31114,
	BRAWL_SHORT_TERM_DATA_RESPONSE = 31115,
	
	// 난투장 PK 알림
	BRAWL_PK_NOTIFY = 31120,
	
	// 난투장 단기보상 알림(본인)
	BRAWL_SHORT_TERM_MAX_NOTIFY = 31121,
	// 난투장 단기보상 알림(채널 전체)
	BRAWL_OTHER_PC_SHORT_TERM_MAX_NOTIFY = 31122,	
	
	// 난투장 강화 정보
	BRAWL_POINT_NOTIFY = 31124,
	BRAWL_ENHANCE_DATA_NOTIFY = 31125,
	BRAWL_ENHANCE_LEVEL_UP_REQUEST = 31126,
	BRAWL_ENHANCE_LEVEL_UP_RESPONSE = 31127,
		
	// 인벤이 가득찼을때 획득하는 아이템을 버리도록 설정된 경우,(eReward_RewardType_Pass) 
	// 서버->클라로 일부 아이템이 버려졌다는 것을 노티하는 용도
	ADD_ITEM_FAILED_NOT_ENOUGH_STORAGE_SPACE_NOTIFY = 31128,
	
	// 스크롤퀘스트
	// 일일 누적 완료횟수를 노티
	SCROLL_QUEST_DAILY_INFO_NOTIFY = 31130,
	
	// 스크롤퀘스트 진행내역을 노티
	SCROLL_QUEST_PROGRESS_INFO_NOTIFY = 31131,
	
	// 스크롤 퀘스트 상태를 INIT->PROGRESS로 변경 요청(연출을 다 봤을때)
	SCROLL_QUEST_START_PROGRESS_REQUEST = 31133,
	SCROLL_QUEST_START_PROGRESS_RESPONSE = 31134,
	
	// 스크롤 퀘스트 포기 요청/응답
	SCROLL_QUEST_GIVE_UP_REQUEST = 31135,
	SCROLL_QUEST_GIVE_UP_RESPONSE = 31136,
	
	// 스크롤 퀘스트 보상받기 요청/응답
	SCROLL_QUEST_REWARD_REQUEST = 31137,
	SCROLL_QUEST_REWARD_RESPONSE = 31138,
	
	// 난투장 최근 퇴장시간 정보 요청/응답
	BRAWL_LAST_LEAVED_TIME_REQUEST = 31140,
	BRAWL_LAST_LEAVED_TIME_RESPONSE = 31141,
	BRAWL_LAST_LEAVED_TIME_NOTIFY = 31142,
	
	/////////////////////////////////////
	// 펫 시스템
	/////////////////////////////////////		
	
	// n개의 펫을 동시에 획득했을때 연출처리용도로 추가전달하는 패킷
	PET_CREATED_WITH_EFFECT_NOTIFY = 31147,	
	
	// 펫 획득 알림
	PET_CREATED_NOTIFY = 31148,
	// 펫 삭제 알림
	PET_DELETED_NOTIFY = 31149,
	
	// 보유한 전체 펫 정보 알림
	PET_DATA_NOTIFY = 31150,
	
	// 펫 먹이 사용 요청/응답
	PET_FEED_REQUEST = 31152,
	PET_FEED_RESPONSE = 31153,
	
	// 펫 소화 다 됐을 때 노티
	PET_DIGESTION_COMPLETE_NOTIFY = 31154,
	
	// 펫 소환 요청/응답
	PET_SUMMON_REQUEST = 31155,
	PET_SUMMON_RESPONSE = 31156,

	// 펫 소환취소 요청/응답
	PET_SUMMON_CANCEL_REQUEST = 31157,
	PET_SUMMON_CANCEL_RESPONSE = 31158,
	
	// 펫 지원 요청/응답
	PET_SUPPORT_REQUEST = 31160,
	PET_SUPPORT_RESPONSE = 31161,
	
	// 펫 지원취소 요청/응답
	PET_SUPPORT_CANCEL_REQUEST = 31162,
	PET_SUPPORT_CANCEL_RESPONSE = 31163,
	
	// 소환/지원된 펫들의 남은 소화시간 요청/응답
	PET_REMAIN_DIGESTION_TIME_REQUEST = 31164,
	PET_REMAIN_DIGESTION_TIME_RESPONSE = 31165,
	
	// 펫 합성 요청/응답
	PET_FUSION_REQUEST = 31170,
	PET_FUSION_RESPONSE = 31171,
	
	// 펫 레벨/경험치 변경 알림
	PET_LEVEL_EXP_UP_NOTIFY = 31172,
	
	// 펫 잠금 요청/응답
	PET_TOGGLE_SAFE_GUARD_REQUEST = 31173,
	PET_TOGGLE_SAFE_GUARD_RESPONSE = 31174,
	
	/////////////////////////////////////
	// 펫 시스템 - 라피의 제단
	/////////////////////////////////////	
	
	// 라피의 제단 정보 알림
	PET_ALTAR_DATA_NOTIFY = 31200,
	
	// 라피의 제단 경험치, 레벨 변경 알림
	PET_ALTAR_LEVEL_EXP_NOTIFY = 31201,
	
	// 제단포인트(라피의 구슬) 변경 알림
	PET_ALTAR_POINT_NOTIFY = 31202,
	
	// 라피의 제단 기부 요청/응답
	PET_ALTAR_DONATE_REQUEST = 31210,
	PET_ALTAR_DONATE_RESPONSE = 31211,
	
	// 라피 스킬 레벨업 요청/응답	
	PET_ALTAR_ACTIVE_SKILL_LEVEL_UP_REQUEST = 31220,
	PET_ALTAR_ACTIVE_SKILL_LEVEL_UP_RESPONSE = 31221,
	
	/////////////////////////////////////
	// 펫 시스템 - 부화소
	/////////////////////////////////////
		
	// 부화소 정보 알림
	PET_HATCHERY_DATA_NOTIFY = 31250,
	
	// 부화소 시작 요청(알낳기)
	PET_HATCHERY_SPAWN_REQUEST = 31251,
	PET_HATCHERY_SPAWN_RESPONSE = 31252,
	
	// 부화소 펫 수령 요청(알깨기)
	PET_HATCHERY_HATCH_REQUEST = 31254,
	PET_HATCHERY_HATCH_RESPONSE	= 31255,
		
	// 펫 시스템 DB 패킷	
	DB_PET_MAKE_REQUEST = 31300,
	DB_PET_MAKE_RESPONSE = 31301,
	DB_PET_FEED_REQUEST = 31302,
	DB_PET_FEED_RESPONSE = 31303,	
	DB_PET_FUSION_REQUEST = 31304,
	DB_PET_FUSION_RESPONSE = 31305,
	DB_PET_SET_STATE_REQUEST = 31306,
	DB_PET_SET_STATE_RESPONSE = 31307,
	DB_PET_LEVEL_UP_REQUEST = 31308,
	DB_PET_LEVEL_UP_RESPONSE = 31309,
	DB_PET_TOGGLE_SAFE_GUARD_REQUEST = 31310,	
	DB_PET_TOGGLE_SAFE_GUARD_RESPONSE = 31311,
	
	DB_PET_ALTAR_DONATE_REQUEST = 31320,
	DB_PET_ALTAR_DONATE_RESPONSE = 31321,
	DB_PET_ALTAR_ACTIVE_SKILL_LEVEL_UP_REQUEST = 31322,
	DB_PET_ALTAR_ACTIVE_SKILL_LEVEL_UP_RESPONSE = 31323,
	DB_PET_HATCHERY_SUMMON_REQUEST = 31324,
	DB_PET_HATCHERY_SUMMON_RESPONSE = 31325,
	DB_PET_HATCHERY_HATCH_REQUEST = 31326,
	DB_PET_HATCHERY_HATCH_RESPONSE = 31327,
	DB_PET_SET_REQUEST = 31328,
	DB_PET_SET_RESPONSE = 31329,
	DB_PET_DELETE_REQUEST = 31330,
	DB_PET_DELETE_RESPONSE = 31331,
	DB_PET_ALTAR_SET_REQUEST = 31332,
	DB_PET_ALTAR_SET_RESPONSE = 31333,
	
	// 분쟁지역 패킷
	CONFLICT_FIELD_MOVE_HOME_SERVER_REQUEST  = 31400,
	CONFLICT_FIELD_MOVE_HOME_SERVER_RESPONSE = 31401,

	// 왕의길
	KINGSROAD_QUERY_MAINSTREAM_QUEST_REQUEST = 31500,
	KINGSROAD_QUERY_MAINSTREAM_QUEST_RESPONSE = 31501,
	
	/// 암호키 교환
	PUBLIC_KEY_NOTIFY = 65533,
	CRYPT_KEY_NOTIFY = 65534,
	
	MAX = 65535,
}

///- PING_NOTIFY ----------
table PingNotify
{
	tick : uint;
}

///- KEEP_ALIVE_NOTIFY
table KeepAliveNotify
{
}



///- GAME_PING ----------
table GamePingRequest
{
	objectId : long;
	avg : long;
	key : long;
}

table GamePingResponse
{
	objectId : long;
	key : long;
}

/// GAME_CONTENTS_CONFIG_NOTIFY
table GameContentsConfigNotify
{
	contentConfig : ContentConfigList;
}

/// ACCOUNT_RECONNECT_REQUEST
table AccountReconnectRequest
{
	accountDbId : long;
	ticket : [ubyte] (required);
}

/// ACCOUNT_RECONNECT_RESPONSE
table AccountReconnectResponse
{
	error : int;
	state : byte;		// ReconnectAccountState
	ticket : [ubyte];
}

/// HIVE_TOP_PC_INFO_REQUEST
table HiveTopPcInfoRequest
{
	playerId : long;
}

/// HIVE_TOP_PC_INFO_RESPONSE
table HiveTopPcInfoResponse
{
	colonyName : string;
	characterData : CharacterData;
}

/// HIVE_COMPANION_COUNT_REQUEST
table HiveCompanionCountRequest
{
}

/// HIVE_COMPANION_COUNT_RESPONSE
table HiveCompanionCountResponse
{
	companionCount : int;
}

/// HIVE_SHOP_PURCHASE_PRODUCT_NOTIFY
table HiveShopPurchaseProductNotify
{
	productId : int;
}

/// DELAY_PING_NOTIFY
table DelayPingNotify
{
	ping : short;
}

///-----------------------------------------------------------------------------
/// Client <-> Auth
///-----------------------------------------------------------------------------

enum AdminLevel : int
{
	ADMIN_LEVEL_NORMAL,
	ADMIN_LEVEL_OPERATOR = 5,
	ADMIN_LEVEL_DEVELOPER = 10,

	ADMIN_LEVEL_MAX,
}

///- CHECK_CLIENT_VERSION_REQUEST
table CheckClientVersionRequest
{
	packet : int;
	major : int;
	minor : int;
	patch : int;
	hash : string;
}

///- CHECK_CLIENT_VERSION_RESPONSE
table CheckClientVersionResponse
{
	errorCode : int;

	/// 클라이언트에서 보낸 버전
	packet : int;
	major : int;
	minor : int;
	patch : int;

	contentConfig : ContentConfigList; // errorCode 가 OK 이면 contentConfig 가 설정됩니다.
}

///- ACCOUNT_AUTH_REQUEST ----------
table AccountAuthRequest
{
	accountName	: string	(required);
	accountPw	: string	(required);
}



///- ACCOUNT_AUTH_RESPONSE ----------
table AccountAuthResponse
{
	errorCode	: int;
	accountName	: string			(required);
	accountDbId	: long;
	recentlyColonyId : short;
	adminLevel : int;
}

///- ACCOUNT_AUTH_AGENT_TICKET_REQUEST
table AccountAuthAgentTicketRequest
{
	accountDbId : long;
	accountName : string (required);
	ticket : [ubyte] (required);
}

enum ColonyStatus : int
{
	// 쾌적
	CS_GOOD = 0,
	// 원활
	CS_SMOOTH,
	// 혼잡
	CS_BUSY,

	// 점검중
	CS_DOWN,
	// 숨김
	CS_HIDE,
}

table ColonyData
{
	id : short;
	group : int;
	name : string (required);
	/// ColonyStatus
	status : int;
	isNew : bool;		// 신규 서버 여부
	myPcCount : int;	// 생성 캐릭터 수
}

table CharacterData
{
	colony : short;
	realm  : short;

	pcName		: string(required);
	level		: short;
	combatPower : int;
	classType	: short;
}

table GroupData
{
	groupId		: int;
	name		: string(required);
	isOpen		: bool;
	isView		: bool;
}

table PcAbility
{
	type : short;
	value : int;
	rate : float;
	hardCap : int;
}

///- COLONY_LIST_REQUEST --------
table ColonyListRequest
{
}

///- COLONY_LIST_RESPONSE --------
table ColonyListResponse
{
	colonys : [ColonyData];
	groups : [GroupData];
	recommand : short;
}

///- CHARACTER_LIST_REQUEST -------
table CharacterListRequest
{
}

///- CHARACTER_LIST_RESPONSE -------
table CharacterListResponse
{
	characters : [CharacterData];	
}

///- HIVE_AUTH_REQUEST ----------
table HiveAuthRequest
{
	appId : string (required);
	playerId : long;
	playerName : string (required);
	did	: string (required);
	deviceName : string;
	providerCount : short;
	osVersion : string (required);
	version : string (required);
	language : string (required);
	playerToken : string (required);
	gameLanguage : short;
	country : string (required);
}

///- HIVE_AUTH_RESPONSE ----------
table HiveAuthResponse
{
	errorCode	: int;
	accountDbId	: long;
	recentlyColonyId : short;
	adminLevel : int;
}

///- SELECT_COLONY_REQUEST --------
table SelectColonyRequest
{
	colonyId : short;
}

///- SELECT_COLONY_RESPONSE --------
table SelectColonyResponse
{
	errorCode : int;

	colonyId : short;
	serverLocale : string;
	ip : string;
	port : int;

	ticket : [ubyte];
}

///- SELECT_REALM_REQUEST --------
table SelectRealmRequest
{
	colonyId : short;
	// -1이면 생성제한 없음
	limitRealm : short;	
	recommandRealm : short;
}

///- SELECT_REALM_RESPONSE --------
table SelectRealmResponse
{
	colonyId : short;
	realm : int;
}

///- SELECT_COLONY_BOT_REQUEST --------
table SelectColonyBotRequest
{
	colonyId : short;
	enterRealm : short;
}

///- COLONY_WAITING_NOTIFY		-------
table ColonyWaitingNotify
{
	colonyId : short;
	waitingCount : int;
}

///- INQUIRE_WAITING_REQUEST	-------
table InquireWaitingRequest
{
	
}

///- INQUIRE_WAITING_RESPONSE	-------
table InquireWaitingResponse
{
	error		 : int;
	colonyId	 : short;
	waitingCount : int;
}

///- CANCEL_WAITING_REQUEST		-------
table CancelWaitingRequest
{
	
}

///- CANCEL_WAITING_RESPONSE	-------
table CancelWaitingResponse
{
	errorCode : int;
}

///-----------------------------------------------------------------------------
/// Common
///-----------------------------------------------------------------------------

///- STRING_MESSAGE_NOTIFY ----------
table StringMessageNotify
{
	message : string (required);
}

///- USER_KICK_NOTIFY -------------
table UserKickNotify
{
	target : long;	// auth agent - sessionId, game agent - accountDbId
	reason : int;	// ErrorCode
}

///- PC_LOGIN_DATA_NOTIFY : ItemPartsInfo ----------
table ItemPartsInfo
{
	itemId : int;
	grade : short;
	level : int;
	transcendLevel : short;	// 초월 레벨
}

table CostumePartsInfo
{
	itemId : int;
	grade : short;
	level : int;
	isVisible : bool;
	transcendLevel : short;	// 초월 레벨
}

///-----------------------------------------------------------------------------
/// Client <-> Agent
///-----------------------------------------------------------------------------

///- ACCOUNT_LOGIN_REQUEST ----------
table AccountLoginRequest
{
	accountId : long;
	account : string (required);
	ticket : [ubyte] (required);
}

///- ACCOUNT_LOGIN_RESPONSE ----------
table AccountLoginResponse
{
	errorCode	: int;
	realm : int;
	reconnectTicket : [ubyte];
}

/// SERVER_LOCAL_TIME_NOTIFY				= 2004,	// 서버의 로컬타임
table ServerLocalTimeNotify
{
	year : short;
	month : short;
	day : short;
	hour : short;
	minute : short;
	second : short;
	millisecond : short;
	utcOffsetMillisecond: long;
}

/// DEVICE_PERFORMANCE_POINT_NOTIFY
table DevicePerformancePointNotify
{
	performancePoint : long;
}

/// SEASON_INFO_NOTIFY
table SeasonInfoNotify
{
	seasonNumber : int;
	seasonFlag : int;

	leaderGuildName : string;
	leaderGuildCrest : GuildCrest;
}

/// SERVER_LOCAL_TIME_REQUEST
table ServerLocalTimeRequest
{

}

/// SERVER_LOCAL_TIME_RESPONSE 
table ServerLocalTimeResponse
{
	year : short;
	month : short;
	day : short;
	hour : short;
	minute : short;
	second : short;
	millisecond : short;
	utcOffsetMillisecond: long;
}

///- SLOT_LIST_REQUEST ----------
table SlotListRequest
{
}

///- SLOT_LIST_RESPONSE : PCSlotData ----------
table PCSlotData
{
	objId : long;
	name : string (required);
	customizingInfo : CustomizeInfo (required);
	classType : int;
	level : int;
	exp : int;
	influenceScore : long;
	influenceTier : short;
	influenceLev : short;
	combatpower : int;
	itemParts : [ItemPartsInfo] (required);
	costumeParts : [CostumePartsInfo] (required);
	logoutTime : long;
	pcGuildInfo : PcGuildInfo; // @nr
	guildRank : int;
	deleteExpire : int;	// 삭제 만료 남은 시간(초). (-1 : 삭제 대기중 아님)
	isRename : bool;	// 캐릭명 변경 필요 여부
	isTutorial : bool;	// 튜토리얼 클리어(또는 스킵)
}

///- PC_TUTORIAL_SKIP_REQUEST --------------
table PcTutorialSkipRequest
{
	classType	: int;
}

///- PC_TUTORIAL_SKIP_RESPONSE --------------
table PcTutorialSkipResponse
{
	classType : int;	
}

///- SLOT_LIST_RESPONSE ----------
table SlotListResponse
{
	jumpingStackCount : short;		// 점핑 캐릭터 생성 가능 횟 수
	slots : [PCSlotData];
}

///- PC_CHECK_NEW_NAME_REQUEST ---------
table PCCheckNewNameRequest
{
	name : string(required);
	code : string(required);						// 사전 선점 코드
}

///- PC_CHECK_NEW_NAME_RESPONSE ---------
table PCCheckNewNameResponse
{
	errorCode : int;
	expire : short;
}

///- PC_RENAME_REQUEST ---------
table PCRenameRequest
{
	pcDbId : long;
	name : string (required);
}

///- PC_RENAME_RESPONSE ---------
table PCRenameResponse
{
	errorCode : int;
	pcDbId : long;
	name : string (required);
}

///- 커스터마이징 정보 --------
table CustomizeInfo
{
	hairType : short;
	hairColor : short;
	faceType : short;
	faceColor : short;
}

///- PC_CREATION_REQUEST ----------
table PCCreationRequest
{
	classType : int;
	name : string (required);
	customizingInfo : CustomizeInfo (required);
	code : string (required);						// 사전 선점 코드
	isJumping : bool;			// 점핑 캐릭터 생성 유무
}

///- PC_CREATION_RESPONSE ----------
table PCCreationResponse
{
	errorCode : int;
	jumpingStackCount : short;		// 점핑 캐릭터 생성 가능 횟수
}

///- PC_DELETE_REQUEST ----------
table PCDeleteRequest
{
	pcDbId : long;
}

///- PC_DELETE_RESPONSE ----------
table PCDeleteResponse
{
	errorCode : int;
}

///- PC_CANCEL_DELETE_REQUEST ----------
table PCCancelDeleteRequest
{
	pcDbId : long;
}

///- PC_CANCEL_DELETE_RESPONSE ----------
table PCCancelDeleteResponse
{
	errorCode : int;
}


///- PC_LOGIN_REQUEST ----------
table PCLoginRequest
{
	pcDbId : long;
}

///- PC_LOGIN_RESPONSE ----------
table PCLoginResponse
{
	errorCode : int;
}


///- ExitReason ----------
enum ExitReason : int
{
	/// 일반적 유저 선택
	ER_NORMAL = 1,
	/// 운영자에 의한
	ER_KICKED = 2,
}


///- PC_GOTO_LOBBY_REQUEST ----------
table PcGotoLobbyRequest
{
}

///- PC_GOTO_LOBBY_RESPONSE ----------
table PcGotoLobbyResponse
{
	error : int;
}

///- ACCOUNT_LOGOUT_REQUEST ----------
table AccountLogoutRequest
{
}

///- ACCOUNT_LOGOUT_RESPONSE ----------
table AccountLogoutResponse
{
	error : int;
}

///- GOTO_SERVER_LIST_REQUEST
table GotoServerListRequest
{
}

///- GOTO_SERVER_LIST_RESPONSE
table GotoServerListResponse
{
	error : int;
	ticket : [ubyte];
}

///- TICKET_NOTIFY -------------
table TicketNotify
{
	ticketInfo : TicketInfo (required);
}

///- TICKET_ALL_NOTIFY ------------
table TicketAllNotify
{
	ticketInfos : [TicketInfo] (required);
}


///-----------------------------------------------------------------------------
/// Client <-> Game
///-----------------------------------------------------------------------------

///- ENTER_EVENTSET_CHANNEL_REQUEST  ----------
enum JoinChannelReason : int
{
	JOIN_CHANNEL_REASON_NONE = 0,
	JOIN_CHANNEL_REASON_SUCCESS = 1,
	JOIN_CHANNEL_REASON_FAIL_ACTIVATE = 2,
	JOIN_CHANNEL_REASON_FAIL_NO_SPAWNED = 3,
	JOIN_CHANNEL_REASON_FAIL_NO_DATA = 4,
	JOIN_CHANNEL_REASON_FAIL_INVALID_SMAPID = 5,
	JOIN_CHANNEL_REASON_FAIL_LEVEL = 6,
	JOIN_CHANNEL_REASON_FAIL_TIME = 7,
	JOIN_CHANNEL_REASON_SAME_EVENTSET_ID = 8,
	JOIN_CHANNEL_REASON_NOT_ENOUGHT_COST = 9,
	JOIN_CHANNEL_REASON_MAX= 10,
}

///- TELEPORT_RESPONSE TYPE ----------
enum TeleportType : int
{
   TELEPORT_NONE = 0,
   TELEPORT_IN_SCENE = 1,
   TELEPORT_IN_CHANEL = 2,
   TELEPORT_IN_GAMESERVER = 3
}

///- EVENT_DIRECTION_TYPE ----------
enum EventDirectionType : int
{
	EVENT_DIRECTION_TYPE_NONE = 0,
	EVENT_DIRECTION_TYPE_NOTICE = 1,
	EVENT_DIRECTION_TYPE_UI = 2
}

///- EVENT_STATE_TYPE ----------
enum EventStateType : int
{
   EVENT_STATE_TYPE_NONE = 0,
   EVENT_STATE_TYPE_READY = 1,
   EVENT_STATE_TYPE_RUNNING = 2,
   EVENT_STATE_TYPE_SUCCESS = 3,
   EVENT_STATE_TYPE_FAIL = 4,
   EVENT_STATE_TYPE_FINISH = 5
}

///- EVENT_COUNTER_STATE_TYPE ----------
enum EventCounterStateType : int
{
   EVENT_COUNTER_STATE_TYPE_NONE = 0,
   EVENT_COUNTER_STATE_TYPE_INIT = 1,
   EVENT_COUNTER_STATE_TYPE_ACTIVE = 2,
   EVENT_COUNTER_STATE_TYPE_SUCCESS = 3,
   EVENT_COUNTER_STATE_TYPE_WAIT_FINISH = 4,
   EVENT_COUNTER_STATE_TYPE_FINISH = 5,
   EVENT_COUNTER_STATE_TYPE_TERMINATE = 6
}

///- EVENT_COUNTER_TYPE ----------
enum EventCounterType : int
{
   EVENT_COUNTER_TYPE_NONE = 0,
   EVENT_COUNTER_TYPE_TIME = 1,
   EVENT_COUNTER_TYPE_COUNTING = 2,
   EVENT_COUNTER_TYPE_DURABILITRY = 3,
   EVENT_COUNTER_TYPE_FLAG = 4
}

///- EVENT_NOTICE_STATE_TYPE ----------
enum EventNoticeStateType : int
{
   EVENT_NOTICE_STATE_TYPE_NONE = 0,
   EVENT_NOTICE_STATE_TYPE_READY = 1,
   EVENT_NOTICE_STATE_TYPE_START = 2,
   EVENT_NOTICE_STATE_TYPE_END_SUCCESS = 3,
   EVENT_NOTICE_STATE_TYPE_END_FAIL = 4
}

///- PC_SPAWN_COMPLETE_NOTIFY ----------
table PcSpawnCompleteNotify
{
	/// PC 스폰 완료, 채널 이동 완료 등 게임 진행이 가능하게 됨을 알림.
	errorCode : ErrorCode;

	// 현재 스폰한 채널 번호
	channelNumber : int;

	/// 채널 이동이 가능하기 까지 남은 시간 (초)
	channelMoveRemainTimeSec : int;
}

///- UPC_SPAWN_COMPLETE_NOTIFY ----------
table UpcSpawnCompleteNotify
{
	result : int;
	objectId : long;
}

enum ChannelCongestion : byte
{
	ChannelCongestion_Level1,	// 원활
	ChannelCongestion_Level2,	// 혼잡
	ChannelCongestion_Level3,	// 불가
}

// 채널 정보
table ChannelInfo
{
	/// 참고. 채널아이디가 아님
	number : int;

	/// 혼잡도
	congestion : ChannelCongestion;

	/// 개발 확인용 (디버그 서버만 전달됩니다)
	debugInfo : string;
}

/// SMAP_CHANNEL_LIST_REQUEST
table SMapChannelListRequest
{
}

/// SMAP_CHANNEL_LIST_RESPONSE
table SMapChannelListResponse
{
	/// 실패시 이하 필드는 없음
	errorCode : ErrorCode;

	smapId : int;
	contentsType : ContentsType;

	/// 채널 정보 목록 (1~10개)
	channelInfos : [ChannelInfo];

	/// 채널 이동이 가능하기 까지 남은 시간 (초)
	remainTimeSec : int;
}

/// SMAP_CHANNEL_MOVE_REQUEST
table SMapChannelMoveRequest
{
	/// 아래 2개는 SMapChannelListResponse 의 값을 채워주세요
	smapId : int;
	contentsType : ContentsType;

	/// 이동하고자 하는 채널번호 (ChannelInfo.number)
	channelNumber : int;
}

/// SMAP_CHANNEL_MOVE_RESPONSE
table SMapChannelMoveResponse
{
	errorCode : ErrorCode;

	/// 채널 이동이 가능하기 까지 남은 시간 (초)
	remainTimeSec : int;
}

///- JOIN_EVENTSET_CHANNEL_REQUEST ----------
table JoinEventSetChannelRequest
{
	objectId : long;
	eventSetId : int;
}

///- JOIN_EVENTSET_CHANNEL_RESPONSE ----------
table JoinEventSetChannelResponse
{
	eventSetId : int;
	reason : JoinChannelReason ;
}

///- TELEPORT_REQUEST ----------
table TeleportRequest
{
	objectId : long;
	portalId : int;
	pos : Pos (required);
}

///- TELEPORT_RESPONSE ----------
table TeleportResponse
{
	errCode: int;
	objectId : long;
	srcSceneId : int;
	srcPos : Pos;
	destSceneId : int;
	destPos : Pos;
	teleportType : TeleportType;
}

/// TELEPORT_NOTIFY_OTHER_PC_IN_VIEW
table TeleportNotifyOhterPcInView
{
	objectId : long;
	srcPos : Pos;
	destPos : Pos;
}

///- ENTER_EVENT_AREA_REQUEST ----------
table EnterEventAreaRequest
{
	objectId : long;
	eventAreaId : int;
	pos : Pos (required);
}

///- ENTER_EVENT_AREA_RESPONSE ----------
table EnterEventAreaResponse
{
}

///- EVENT_MESSAGE_NOTIFY ----------
table EventMessageNotify
{
	objectId : long;
	debugMessage : string (required);
}

///- SAFE_ZONE_IN_REQUEST ----------
table SafeZoneInRequest
{
	eventAreaId : int;
	pos : Pos (required);
}

///- SAFE_ZONE_IN_RESPONSE ----------
table SafeZoneInResponse
{
	errCode: int;
}

///- SAFE_ZONE_OUT_REQUEST ----------
table SafeZoneOutRequest
{
	eventAreaId : int;
	pos : Pos (required);
}

///- SAFE_ZONE_OUT_RESPONSE ----------
table SafeZoneOutResponse
{
	errCode: int;
}

///- CLIENT_CREATURE_MOVE_NOTIFY ----------
 table ClientCreatureMoveNotify
{
	/// 서버에서 이동 시뮬레이션에 필요한 최소 정보
	objectId : long;
	curPos : Pos (required);
	destPos : Pos (required);
	moveType : int;

	/// 클라이언트 동작 검증에 사용
	speed : short;
	angle : short;
	clientTickCount : int;
}
/// SERVER_CREATURE_MOVE_NOTIFY ----------
table ServerCreatureMoveNotify
{
	// 클라에서 이동 시뮬레이션에 필요한 최소 정보
	objectId : long;
	curPos : Pos (required);
	angle : short;
	speed : int;
	destPos : Pos (required);
	destAngle : short;
	moveType : int;
}

/// CLIENT_SHORT_TERM_MOVE_NOTIFY
table ClientShortTermMoveNotify
{
	/// 이동에 필요한 최소 정보 (ex. 0.3s 주기)
	objectId : long;
	curPos : Pos (required);
	moveType : int;
}

/// CLIENT_LONG_TERM_MOVE_NOTIFY
table ClientLongTermMoveNotify
{
	/// 이동에 필요한 부가 정보 (ex. 1s 주기)
	objectId : long;
	angle : short;
}

/// SERVER_SHORT_TERM_MOVE_NOTIFY
table ServerShortTermMoveNotify
{
	/// 클라에서 이동 시뮬레이션에 필요한 최소 정보
	objectId : long;
	curPos : Pos (required);
	moveType : int;
	moveSpeed : int;
}

/// SERVER_LONG_TERM_MOVE_NOTIFY
table ServerLongTermMoveNotify
{
	/// 이동에 필요한 부가 정보 (ex. 1s 주기)
	objectId : long;
	angle : short;
}

/// EVENT_DIRECTION_BEGIN_NOTIFY 서버 -> 클라
table EventDirectionBeginNotify
{
	eventSetId : int;
	eventId : int;
	reactionType : int;
	directionId : int;
	responseId: int;
}

///  EVENT_DIRECTION_FINISH_NOTIFY 클라 -> 서버
table EventDirectionFinishNotify
{
	eventSetId : int;
	eventId : int;
	responseId: int;
}

/// 이벤트 기여도 랭크
enum EventRankType : int
{
	ERT_SRANK,
	ERT_ARANK,
	ERT_BRANK,
	ERT_CRANK,
	ERT_FRANK,
	ERT_MAX
}

table ContributionPoint
{
	type : short;
	point : double;
}

table EventContribution
{
	objectId : long;
	pcName : string (required);
	rank : EventRankType;
	ranking : int;
	contribution : double;
	acqPoints : [ContributionPoint];
}

/// NOTIFY_EVENT_CONTRIBUTION
table NotifyEventContribution
{
	contributions : [EventContribution] (required);
}

table BattleRealmGuildContribution
{
	guildId : int;
	guildName : string (required);
	guildCrest : GuildCrest (required);
	realmId : int;
	ranking : int;
	damagePoint : double;
	interactPoint : double;
	totalPoint : double;
	participant : int;
	realmRanking : int;
	worldId : short;
}

/// EVENT_BATTLE_REALM_CONTRIBUTION_NOTIFY
table EventBattleRealmContributionNotify
{
	myGuildContribution : BattleRealmGuildContribution (required);
	rankGuildContributions : [BattleRealmGuildContribution] (required);
	aslanPoint : double;
	harmionPoint: double;
}

table RewardItemInfo
{
	itemId : int;
	amount : int;
	grade : short;
}

table RewardInfo
{
	costInfo : [CostInfo] (required);
	items : [RewardItemInfo] (required);
}

// 결과 보상 타입
enum ResultRewardType : ubyte
{
	/// 기본 보상
	DEFAULT,

	/// 기여도 랭크 보상
	CONTRIBUTION_RANK,

	/// #골드던전 웨이브 보상
	GOLD_DUNGEON,
	
	/// 전쟁필드 보상
	BATTLE_FIELD,
}

// 결과 보상 정보
table ResultRewardInfo
{
	type : ResultRewardType;
	rewardInfo : RewardInfo (required);
}

// 이벤트 통합 보상 - 1)기여도
enum ContributionCategoryType : int
{
	CCT_NONE = 0,
	CCT_DEAL,			//적에게 입힌 데미지
	CCT_WITHOUT_DEAL,	//역할 행동
	CCT_EVENT			//이벤트 기여
}

table ContributionCategoryInfo
{
	category : ContributionCategoryType;
	contribution : double;
}

table EventContributionRewardInfo
{
	ranking : int;
	baseReward : RewardInfo (required);
	rankReward : RewardInfo (required);
	eachContribution : [ContributionCategoryInfo] (required);
	totalContribution : double;
}

table ContributionResultInfo
{
	ranking : int;
	totalContribution : double;
	eachContribution : [ContributionCategoryInfo] (required);
}

// 이벤트 통합 보상 - 2)친구추천
table EventPraiserInfo
{
	pcDbId : ulong;
	ranking : short;	// 등수
	name : string (required);
	classType : int;
	contribution : double;
	rankType : EventRankType;
	objectId : ulong;
}

table EventRecommendPraiserInfo
{
   remainTime : int;
   totalContribution : double;
	praiserList : [EventPraiserInfo] (required);
}

/// NOTIFY_EVENT_TOTAL_REWARD
table NotifyEventTotalReward
{
	eventSetId : int;
	eventId : int;
	resultRewardInfos : [ResultRewardInfo] (required);
	contributionResult : ContributionResultInfo (required);
	recommendInfo : EventRecommendPraiserInfo (required);
	orignResultRewardInfos : [ResultRewardInfo] (required);
}

/// NOTIFY_EVENT_START
table NotifyEventStart
{
	eventSetId : int;
	eventId : int;
	eventPhaseId: int;
}

/// 이벤트 ENDTYPE
enum EventEndType : int
{
	EVENT_END_TYPE_NORMAL,
	EVENT_END_TYPE_MAX
}

/// NOTIFY_EVENT_END
table NotifyEventEnd
{
	eventSetId : int;
	eventId : int;
	reason : EventEndType;
	contentsType: short;
	isSuccess : bool;
	finishDirectionId : int;
	objectId : [long] (required);
}

/// NOTIFY_NEXT_NORMAL_EVENTSET_INFO
table NotifyNextNormalEventSetInfo
{
	eventSetId : int;
	eventId : int;
	delayTick : int;
}


/// NOTIFY_EVENT_PHASE_START
table NotifyEventPhaseStart
{
	eventSetId : int;
	eventId : int;
	startPhaseId: int;
}

// EVENT_SPEECH_BUBBLE_NOTIFY
table EventSpeechBubbleNotify
{
	eventUiGroupId : int;
	speechList : [int] (required);
}

// EVENT_CHANNEL_CLOSE_NOTIFY
table EventChannelCloseNotify
{
	eventSetId : int;
	closedRemainTime : int;
}

// EVENT_GO_TOWN_REQUEST
table EventGoTownRequest
{
	objectId : long;
}

// EVENT_GO_TOWN_RESPONSE
table EventGoTownResponse
{
	reason : JoinChannelReason ;
}

// EVENT_DISAPPEAR_BARRIER_NOTIFY
table EventDisappearBarriorNotify
{
	eventSetId : int;
}

// EVENT_TRANSFORM_WITH_CUTSCENE
table transformWithCutScene
{
	cutSceneTableId : int;
	location : Pos (required);
	rotate : Pos (required);
}

/// NPC_SCENEMAP_INFO_UPDATE_NOTIFY
table NpcSceneMapInfoUpdateNotify
{
	objectId : long;

	sceneId : int;
	curPos : Pos (required);
	currentHp : long;
	npcId : int;
	npcWorkState : int;
	patrolId : int;
	patrolIndex : int;
}

/// NPC_SCENEMAP_INFO_DESTROY_NOTIFY
table NpcSceneMapInfoDestroyNotify
{
	objectId : long;
}

enum ObjectState : int
{
	OBJECT_STATE_SPAWN,
	OBJECT_STATE_PEACE,
	OBJECT_STATE_BATTLE,
	OBJECT_STATE_DEAD,
	OBJECT_STATE_RETURN,
	OBJECT_STATE_DYING,
	OBJECT_STATE_WATCHOUT,
	OBJECT_STATE_MAX,
}

/// PC_SCENEMAP_INFO_UPDATE_NOTIFY
table PcSceneMapInfoUpdateNotify
{
	objectId : long;

	sceneId : int;
	curPos : Pos (required);
	iff : int;
	
	pcName : string	(required);
	guildName : string;
	classType : int;
	
	state : ObjectState;
	
	killCount : int; 	// 통합 킬 카운트
	assistCount : int;	// 어시스트 카운트
    worldId : short;
}

/// PC_SCENEMAP_INFO_DESTROY_NOTIFY
table PcSceneMapInfoDestroyNotify
{
	objectId : long;
}


///- CRAFT_ITEM_REQUEST ----------
table CraftItemRequest
{
	pcObjectId : ulong;
	craftId : int;
	count : int;
}

///- CRAFT_ITEM_RESPONSE ----------
table CraftItemResponse
{
	errorCode : int;
	craftId : int;
	result : ClientItemResultInfo;
}

///- TRANSMUTE_CRYSTAL_ITEM_REQUEST
table TransmuteCrystalItemRequest
{
	craftId : int;				// 제작 아이디
	itemObjectId : [ulong];		// 재료 차원결정 item object id
}

///- TRANSMUTE_CRYSTAL_ITEM_RESPONSE
table TransmuteCrystalItemResponse
{
	errorCode : int;
	craftId : int;
	result : ClientItemResultInfo;
}

///- PRISM_TRANSMUTATION_REQUEST ----------
table PrismTransmutationRequest
{
	prismAmount : int;
}

///- PRISM_TRANSMUTATION_RESPONSE ----------
table PrismTransmutationResponse
{
	errorCode : int;
	artifactLevel : short;
	artifactExp : long;
}


///-----------------------------------------------------------------------------
/// Game -> Client
///-----------------------------------------------------------------------------

///- PC_LOGIN_DATA_NOTIFY : StorageData ----------
table StorageData
{
	/// KEY
	storageType : short;
	storageSize : short;
}

///- PC_LOGIN_DATA_NOTIFY : ClientLItem ----------
table ClientLItem
{
	/// KEY : itemDbId 와 objectId 는 1:1 매칭
	itemObjectId : ulong;
	/// ItemId
	itemId : int;
	/// 주장비, 보조장비, 코스츔, 소지품, 개인창고...
	storageType : short;
	/// 아이템 등급
	grade : short;
	/// 아이템 레벨
	level : int;
	/// 강화 경험치
	enchantExp : int;
	/// 아이템 누적 수량
	stackCount : int;
	/// 장비 보호 여부
	safeguarded : byte;
	/// 귀속 여부 (0:비귀속, 1:귀속)
	boundState : byte;
	
	slotPosition : short; 	// 1부터 첫번째칸 차원결정이 어딘가에 장착되었을때만 이 값을 가진다.
	//차원결정 슬롯
	dimensionCrystalSlots : [ulong];
	
	refItemObjectId : ulong;

	// 초월 정보
	transcendLevel : short;	// 초월 레벨
	stats : [TranscendStat];// 추가 스탯 데이터
}

table SkillSlotInfo
{
	slotIndex : int;
	skillId : int;
}

table SkillSlot
{
	mainSlotIndex : byte;
	skillSlotInfos : [SkillSlotInfo] (required);
}

table PurseInfo
{
	paidGold : long;
	rewardGold : long;
	paidDia : int;
	rewardDia : int;
	rewardPrism : int;
	paidPrism : int;
	fortunePoint : int;
	guildCoin : int;
	monarchPoint : int;
	pvpCoin : long;
}

table CostInfo
{
	costType : short;
	amount : int;
}

table FollowerInfo
{
	followerId : int;
	level : int;
	stoneCount : int;
	positionIdx : int;
	startTime : long;
}

table TicketInfo
{
	type : short;
	paidTicket : short;
	freeTicket : short;
	maxFreeTicket : int;
}

table PcGuildInfo
{
	guildName : string (required);
	guildMemberGrade : byte; // eCommon_GuildMemberType

	/// 군주 길드 여부
	isLeaderGuild : bool;

	/// 삭제 예정 (네임플레이트에 길드문장을 보여줄 필요가 없어서)
	guildCrest : GuildCrest (required);
}

///- PC_LOGIN_DATA_NOTIFY ----------
table PcLoginDataNotify
{
	objectId : long;
	pcDbId : long;
	name : string (required);
	pos : Pos (required);
	iff : int;
	classType : int;
	level : int;
	accumExp : long;
	currentHp : long;
	sceneId : int;
	angle : short;
	//speed : float;
	//refill : bool;
	customizingInfo : CustomizeInfo (required);
	skillSlotInfos : SkillSlot (required);
	purseInfo : PurseInfo (required);
	skillFeatureInfos : [LoadedSkillFeatureInfo] (required);
	curSkillPoint : short;
	limitSkillPoint : short;
	artifact : ArtifactInfo (required);
	mail : [MailInfo] (required);
	influence : long;
	ticket : [TicketInfo] (required);
	isManualRechargable : bool;
	pcGuildInfo : PcGuildInfo; // @nr
	createTime : long;	// 캐릭터 생성일시(time_t)
	accountCreateTime : long;	// 계정 생성일시(time_t)
	worldId : short;
}

table StorageDataNotify
{
	datas : [StorageData] (required);
}

table StorageItemDataNotify
{
	type : short;						// 스토리지 타입
	datas : [ClientLItem] (required);	// 아이템 정보
}

table EquipDataNotify
{
	presetNo : short;
	costumePresetNo : short;
	equip : EquipInfo (required);
	preset : [PresetInfo] (required);
	costume : CostumeInfo (required);
	costumePreset : [CostumePresetInfo] (required);
}

table SkillSlotNotify
{
	isSwitchingSuccess : byte;
	objectId : long;
	infos : [SkillSlotInfo];
	mainSkillSlotIndex : byte;
}

/// SKILL_OPEN_SHIELD_NOTIFY
table SkillOpenShieldNotify
{
	objectId : long;
	maxShield : int;
	reduceTick : int;
	isAutoReduce : bool;
	isPossibleCancel : bool;
}

table SkillClosedShieldNotify
{
	objectId : long;
}

enum SkillErrorReason : int
{
	SKILL_ERROR_REASON_NONE,
	SKILL_ERROR_REASON_NOT_LEARN,
	SKILL_ERROR_REASON_DOING_SKILL,
	SKILL_ERROR_REASON_DOING_REACION,
	SKILL_ERROR_REASON_INVALID_SLOT,
	SKILL_ERROR_REASON_INVALID_SKILL,
	SKILL_ERROR_REASON_NOT_ENOUGH_RESOURCE,
	SKILL_ERROR_REASON_COOLING,
	SKILL_ERROR_REASON_INVALID_POS,
	SKILL_ERROR_REASON_YOU_ARE_DYING_OR_DEAD,

}

/// SKILL_ERROR_NOTIFY
table SkillErrorNotify
{
	objectId : long;
	skillId : int;
	reason : int;
	pos : Pos;	// 서버 위치
}

table EnterStateNotify
{
	objectId : long;
	state : int;
	value : int;
}

table LeaveStateNotify
{
	objectId : long;
	state : int;
}

table LoadData
{
	objectId : long;
	pcName : string (required);

	contentsType : ContentsType;
	/// 이동 시뮬레이션을 위한 초기 세팅 정보
	sceneId : int;
	pos : Pos (required);

	eventSetId : int;
}

///- LOAD_DATA_REQUEST ----------
table LoadDataRequest
{
	loadData : LoadData (required);
}

///- LOAD_DATA_RESPONSE ----------
table LoadDataResponse
{
}

///- WORLDOBJECT_DESPAWN_NOTIFY ----------
table WorldObjectDespawnNotify
{
	objectId : long;
	pos : Pos (required);

	despawnReason : DespawnReason;
}

///- PC_SPAWN_NOTIFY ----------
table PCSpawnNotify
{
	pcObjectId : long;
	name : string (required);
	iff : int;
	classType : int;
	level : int;
	currentState : int;
	currentHp : long;
	maxHp : long;
	/// 이동을 위해 스폰에 필요한 최소 정보
	sceneId : int;
	pos : Pos (required);
	angle : short;
	customizingInfo : CustomizeInfo (required);
	equipPartsInfo : [ItemPartsInfo] (required);
	costumePartsInfo : [CostumePartsInfo] (required);
	spawnReason : SpawnReason;
	jobSkill : int;
	tier : int;
	tierLevel : int;
	pcGuildInfo : PcGuildInfo; // @nr
	worldId : short;
	summonedPetLookId : int;
	killCount : int;	
	assistCount : int;
}

enum UpcType : short
{
	UPC_TYPE_ARENA,
	UPC_TYPE_FAKE_PC,
	UPC_TYPE_MAX
}

///- UPC_SPAWN_NOTIFY ----------
table UPCSpawnNotify
{
	upcObjectId : long;
	upcType : UpcType;
	name : string (required);
	iff : int;
	classType : int;
	level : int;
	currentState : int;
	currentHp : long;
	maxHp : long;
	sceneId : int;
	pos : Pos (required);
	angle : short;
	customizingInfo : CustomizeInfo (required);
	equipPartsInfo : [ItemPartsInfo] (required);
	spawnReason : SpawnReason;
	jobSkill : int;
	tier : int;
	tierLevel : int;
}

///- NPC_SPAWN_NOTIFY ----------
table NPCSpawnNotify
{
	objectId : long;
	npcId : int;
	iff : int;

	currentState : int;

	currentHp : long;
	maxHp : long;

	sceneId : int;
	pos : Pos (required);
	angle : short;
	isfixedHeight : bool;

	isEventNpc : bool;
	lookAtTargetId : long;
	spawnReason : SpawnReason;
}

///- PROJECTILE_SPAWN_NOTIFY ----------
table ProjectileSpawnNotify
{
	objectId : long;
	shooterId : long;
	projectileId : int;
	iff : int;

	sceneId : int;
	pos : Pos (required);
	angle : short;

	spawnReason : SpawnReason;

	despawnCheckerType : byte;
}

///- PROJECTILE_EFFECT_NOTIFY ----------
table ProjectileEffectNotify
{
	casterId : long;
	sceneId : int;
	skillId : int;
	effectId : [int] (required);
	targetIds : [long]; // @nr
	pos : Pos (required);
	angle : short;
	attackSpeedRate : float;	// 핵 검출용
	moveSpeedRate : float;		// 핵 검출용
	finished : bool;
}

enum fromReaction : int
{
	FROM_REACTION_NONE = 0,
	FROM_REACITON_BUFF = 1,
}

table ReactionEnterNotify
{
	objectId : long;
	attackerId : long;
	reactionType : short;
	startPos : Pos (required);
	startAngle : short;
	endPos : Pos (required);
	endAngle : short;
	duration : int;
	key : int;
	placeOfOrigin : fromReaction;
	reactionLevel : short;
}

table ReactionLeaveNotify
{
	objectId : long;
	attackerId : long;
	endPos : Pos (required);
	endAngle : short;
	key : int;
}

table ReactionUpdateNotify
{
	objectId : long;
	attackerId : long;
	reactionType : short;
	curPos : Pos (required);
	curAngle : short;
	endPos : Pos (required);
	endAngle : short;
	duration : int;
}

///- INSTANTSHOT_SPAWN_NOTIFY ----------
table InstantShotSpawnNotify
{
	objectId : long;
	shooterId : long;
	projectileId : int;
	sceneId : int;
	pos : Pos (required);
	angle : short;
	targetId : long;
	duration : long;
	despawnCheckerType : byte;
}

///- INSTANTSHOT_DESPAWN_NOTIFY ----------
table InstantShotDespawnNotify
{
	objectId : long;
}


///- USE_SKILL_REQUEST ----------- client -> game
table UseSkillRequest
{
	objectId : long;

	skillId : int;
	castingPos : Pos (required);
	castingAngle : short;
	targetObjIds : [long]; // @nr
	clientTick : long;
}


///- START_SKILL_NOTIFY ----------
table StartSkillNotify
{
	objectId : long;

	skillId : int;
	castingPos : Pos (required);
	castingAngle : short;
	targetObjIds : [long] (required);

	featureInfos : [FeatureInfo] (required);
	isPenaltySkill : bool;
}

///- END_SKILL_NOTIFY -------------
table EndSkillNotify
{
	objectId : long;

	skillId : int;
	endPos : Pos (required);
	endAngle : short;
	endReason : short;
	coolTime : int;
}

///- SKILL_EFFECT_NOTIFY -------------
table SkillEffectNotify
{
	objectId : long;
	skillId : int;
	effectId : int;
	targetingIdx : int;
	pos : Pos (required);
	angle : short;
	targets : [EffectTargetInfo] (required);
	attackSpeedRate : float;	// 핵 검출용
	moveSpeedRate : float;		// 핵 검출용
	clientTick : long;
}

table DamageResult
{
	effectId : int;
	objectId : long;
	damageType : int;
	damage : long;
	shield : long;
	trueDamage : long;
	reflectionDamage : long;
	doubleCritical : bool;  // 두배
	tripleCritical : bool;  // 세배
	pentaCritical : bool;   // 다섯배

}

table HealResult
{
	effectId : int;
	objectId : long;
	heal : int;
	critical : bool;
}

table ReactionResult
{
	effectId : int;
	objectId : long;
	type : int;
	///pos : Pos;
	x : float;
	y : float;
	z : float;
	angle : short;
	duration : int;
}

table HpDrainResult
{
	effectId : int;
	objectId : long;
	drain : long;
}

table SkillEffectResultNotify
{
	attackerId : long;
	parentObjectId : long;
	skillId : int;
	targetingIdx : int;
	damage : [DamageResult] (required);
	heal : [HealResult] (required);
	reaction : [ReactionResult] (required);
}

///- EFFECT_RESULT_DAMAGE_NOTIFY --------------
table EffectResultDamageNotify
{
	defencerId : long;
	attackerId : long;
	skillId : int;
	effectId : int;
	targetingIndex : int;
	damageType : int;
	critical : bool;
	onSwiftGuard : bool;
	finalDamage : int;
	multistrikeDamage : int;
	shield : int;
}

table EffectResultReactionNotify
{
	attackerId : long;
	attackeeId : long;
	skillId : int;
	effectId : int;
	targetingIndex : int;
	reationType : int;
	pos : Pos (required);
	angle : short;
	duration : int;
}

///- EFFECT_RESULT_HEAL_NOTIFY -----------------
table EffectResultHealNotify
{
	targetId : long;
	casterId : long;
	skillId : int;
	effectId : int;
	healValue : int;
}

///- ADD_BUFF_NOTIFY --------------
table AddBuffNotify
{
	objectId : long;

	buffObjectId : long;
	casterId : long;
	buffId : int;
	level : int;
	remainTick : long;
	stackCount : int;
	infinity : bool;
}

///- UPDATE_BUFF_NOTIFY --------------
table UpdateBuffNotify
{
	objectId : long;

	buffObjectId : long;
	casterId : long;
	buffId : int;
	level : int;
	remainTick : long;
	stackCount : int;
	infinity : bool;
}

/// CREATURE_HP_CHANGE_NOTIFY
table CreatureHpChangeNotify
{
	objectId : long;

	currentHp : long;
	maxHp : long;
}

/// NPC_AGGRO_TIMER_NOTIFY
table NpcAggroTimerNotify
{
	/// 해당 Npc
	objectId : long;

	/// 경과된 현재 틱(예 - 1500(1.5초 경과))
	currentTick : int;
	/// 어그로 초기화 주기 틱(예 - 5000(5초))
	intervalTick : int;
}

/// CREATURE_TARGETED_NOTIFY
table CreatureTargetedNotify
{
	/// 타겟을 잡은 오브젝트의 아이디
	objectId : long;

	/// 타겟된 오브젝트의 아이디
	targetId : long;
}

/// NPC_RETURN_WARNING_NOTIFY
table NpcReturnWarningNotify
{
	/// 해당 Npc 오브젝트 아이디
	objectId : long;

	/// 회기 알림 on/off 플래그
	on : bool;
}

/// [ITEM]
///- INSERT_ITEM_REQUEST --------------
/// 프로토콜 아이템 주입은 없다.
/// 컨텐츠, 운영툴을 통한 주입만 가능하다.
///table InsertItemRequest
///{
///	/// PC
///	pcObjectId : ulong;
///	toStorageType : short;
///	itemIds : [int];
///}

///- INSERT_ITEM_RESPONSE --------------
table InsertItemResponse
{
	errorCode : int;
	toStorageType : short;
	clientLItems : [ClientLItem];
}

///- DELETE_ITEM_REQUEST --------------
table DeleteItemRequest
{
	pcObjectId : ulong;
	fromStorageType : short;
	deleteItemObjectId : [ulong] (required);
}

///- DELETE_ITEM_RESPONSE --------------
table DeleteItemResponse
{
	errorCode : int;
	fromStorageType : short;
	deleteItemObjectId : [ulong];
}

///- EQUIP_ITEM_RECOMMENDATION_REQUEST --------------
table EquipItemRecommendationRequest
{
	pcObjectId : ulong;
	equipSlot : byte;
	fromStorageType : short;
	toStorageType : short;
}

///- EQUIP_ITEM_OBJECT_REQUEST --------------
table EquipItemObjectRequest
{
	pcObjectId : ulong;
	itemObjectId : ulong;
}

///- EQUIP_ITEM_RESPONSE --------------
table EquipItemResponse
{
	errorCode : int;
	itemObjectId : ulong;
	equipSlot : short;

	pcObjectId : ulong;
	equipItemParts : ItemPartsInfo;
}

///- UNEQUIP_ITEM_REQUEST --------------
table UnequipItemRequest
{
	pcObjectId : ulong;
	unequipSlot : byte;
}

///- UNEQUIP_ITEM_RESPONSE --------------
table UnequipItemResponse
{
	errorCode : int;
	unequipSlot : short;
	pcObjectId : ulong;
}

///- REFRESH_INVEN_REQUEST --------------
table RefreshInvenRequest
{
}

///- REFRESH_INVEN_RESPONSE --------------
table RefreshInvenResponse
{
	errorCode : int;
}

///- SERVER_TIME_REQUEST --------------
table ServerTimeRequest
{
}

///- SERVER_TIME_RESPONSE --------------
table ServerTimeResponse
{
	errorCode : int;
	serverAbsDatetime : long;
}

///- UPDATE_ITEM_NOTIFY --------------
table UpdateItemNotify
{
	clientLItems : [ClientLItem] (required);
}

///- TOGGLE_SAFE_GUARD_REQUEST --------------
table ToggleSafeGuardRequest
{
	pcObjectId : ulong;
	safeguardItemObjectId : ulong;
	isDepot : bool;			// 창고 아이템 여부 (창고:1 else : 0)
}

/// TOGGLE_SAFE_GUARD_RESPONSE --------------
table ToggleSafeGuardResponse
{
	errorCode : int;
	safeguardItemObjectId : ulong;
	safeguarded : byte;
	isDepot : bool;			// 창고 아이템 여부 (창고:1 else : 0)
}

///- USE_ITEM_REQUEST --------------
table UseItemRequest
{
	pcObjectId : ulong;
	itemObjectId : ulong;
	useCount : int;
}

///- USE_ITEM_RESPONSE --------------
table UseItemResponse
{
	firErr : int;		
	subErr : int;		// 아이템 일부사용 됐을경우 사용하는 errorCode
	itemObjectId : ulong;

	reward : BundleRewardInfo;
}

///-ITEM_BOUND_STATE_UPDATE_NOTIFY-------
table ItemBoundStateUpdateNotify
{
	itemObjectIds : [long] (required);
	boundState : byte;
}

///-ADD_ITEM_NOTIFY--------------
table AddItemNotify
{
	item : ClientLItem (required);
}

///-REMOVE_ITEM_NOTIFY--------------
table RemoveItemNotify
{
	itemObjectId : ulong;
}

table ArtifactInfo
{
	level : short;
	exp : int;
}

///UPDATE_ARTIFACT_NOTIFY
table UpdateArtifactNotify
{
	info : ArtifactInfo (required);
}

///-CHANGE_ITEM_STACK_COUNT_NOTIFY--------------
table ChangeItemStackCountNotify
{
	itemObjectId : ulong;
	count : int;
}

/// MOVE_ITEM_NOTIFY
table MoveItemNotify
{
	itemObjectId : ulong;
	fromStorage : short;
	toStorage : short;
}

///-----------------------------------------------------------------------------
///- ENCHANT : Client <-> Game
///-----------------------------------------------------------------------------


///- DISENCHANT_ITEM_REQUEST : ClientSItem ----------
table ClientSItem
{
	itemObjectId : ulong;
	itemStackCount : int;
}

///- DISENCHANT_ITEM_REQUEST --------------
table DisenchantItemRequest
{
	pcObjectId : ulong;
	storageType : short;
	disenchantItems : [ClientSItem] (required);
}

///- DISENCHANT_ITEM_RESPONSE --------------
table DisenchantItemResponse
{
	errorCode : int;
	outputItems : [ClientItemResultInfo];
}

///- ENCHANT_ITEM_REQUEST --------------
table EnchantItemRequest
{
	pcObjectId : ulong;
	enchantItemObjectId : ulong;
	count : int;
}

///- ENCHANT_ITEM_RESPONSE --------------
table EnchantItemResponse
{
	errorCode : int;
	baseEnchantExp : int;
	bonusEnchantExp : int;
	enchantExp : int;
	level : int;
	itemObjectId : ulong;
}

///- EQUIPMENT_TRANSMUTATION_REQUEST --------------
table EquipmentTransmutationRequest
{
	pcObjectId : ulong;
	transItemObjectId : ulong;
	storageType : short;
}

///- EQUIPMENT_TRANSMUTATION_RESPONSE --------------
table EquipmentTransmutationResponse
{
	errorCode : int;
	transItemObjectId : ulong;
	transItemStackCount : short;
	storageType : short;
}

///- UPGRADE_ITEM_REQUEST --------------
table UpgradeItemRequest
{
	pcObjectId : ulong;
	upgradeItemObjectId : ulong;
}

///- UPGRADE_ITEM_RESPONSE --------------
table UpgradeItemResponse
{
	errorCode : int;
	grade : short;
	level : int;
	exp : int;
	itemObjectId : ulong;
}

///-----------------------------------------------------------------------------
///- PROGRESSION : Client <-> Game
///-----------------------------------------------------------------------------
///- PC_LEVEL_UP_EXP_NOTIFY --------------
table PcLevelupExpNotify
{
	pcObjectId : ulong;
	fromLevel : int;
	toLevel : int;
	exp : int;
}

///- PC_EXP_UP_NOTIFY --------------
table PcExpUpNotify
{
	addExp : int;		// 증가된 경험치
	resultExp : int;	// 최종 경험치
	level : int;		// 최종 레벨
}

///- DROP_REWARD_NOTIFY --------------
table DropRewardNotify
{
	/// 몬스터, 채집물 등 보상이 나오는 오브젝트
	rewardObjId : ulong;

	rewardInfo : RewardInfo (required);
	
	bubblePoint : int;
	xPos : float;
	yPos : float;
	zPos : float;
}

///-----------------------------------------------------------------------------
/// - STORE : Client <-> Game
///-----------------------------------------------------------------------------

table ClientItemStackInfo
{
	itemId	: int;
	stackCount : int;
}

///- ITEM_SALE_REQUEST --------------
table SaleItemRequest
{
	pcObjectId : ulong;
	saleItems : [ClientSItem] (required);
}

///- ITEM_SALE_RESPONSE --------------
table SaleItemResponse
{
	errorCode : int;
	totalSaleValue : long;
}

///- UPDATE_PURSE_NOTIFY -----
table UpdatePurseNotify
{
	purseInfo : PurseInfo (required);
}


///- InteractionState -----
/// 인터렉션 상태
enum InteractionState : int
{
	/// 인터랙션 불가
	GT_CANNOT_INTERACTION = 0,
	/// 인터랙션 가능
	GT_CAN_INTERACTION,
}


enum DoorState : int
{
	/// 문 닫힘
	DS_CLOSED,
	/// 문 열림
	DS_OPENED,
}

enum SwitchState : int
{
	/// 스위치 오프
	SS_OFF,
	/// 스위치 온
	SS_ON,
}

enum FragileState : int
{
	/// 안깨짐
	FS_UNBROKEN,
	/// 깨짐
	FS_BROKEN,
}

///- WORKOBJECT_SPAWN_NOTIFY --------------
/// 워크 오브젝트 스폰
table WorkObjectSpawnNotify
{
	/// 워크 오브젝트 아이디
	objectId : long;

	npcId : int;

	sceneId : int;
	pos : Pos (required);
	angle : short;
	isfixedHeight : bool;

	/// 워크오브젝트 타입별 상태
	workState : int;

	eventId : int;

	spawnReason : SpawnReason;
}

///- WORKOBJECT_UPDATE_NOTIFY --------------
/// 워크 오브젝트 상태 갱신
table WorkObjectUpdateNotify
{
	/// 워크 오브젝트 아이디
	objectId : long;

	/// 워크오브젝트 타입별 상태
	workState : int;
}

/// 미니게임 결과
enum MiniGameRankType : int
{
	MGRT_NONE = 0,
	MGRT_GOOD,
	MGRT_PERFECT,
}


///- INTERACTION_STATE_NOTIFY -------------------
table InteractionStateNotify
{
	/// 대상 오브젝트 아이디
	objectId : long;

	/// 오브젝트의 Npc 타입
	npcType : int;
	/// 인터랙션 상태
	interactionState : InteractionState;
}

///- START_INTERACTION_REQUEST --------------
table StartInteractionRequest
{
	/// 채집을 하는 PC or UPC 오브젝트 아이디
	pcObjectId : long;

	/// 인터렉션 타입(Interaction 테이블의 type 값)
	interactionType : byte;
	/// 인터렉션 할 오브젝트 아이디
	objectId : long;
	
	curPos : Pos (required);
	moveType : int;
}

///- START_MINIGAME_INTERACTION_NOTIFY --------------
table StartMiniGameInteractionNotify
{
	/// 채집을 하는 PC or UPC 오브젝트 아이디
	pcObjectId : long;
	
	/// 인터렉션 할 오브젝트 아이디
	objectId : long;
	/// 인터렉션 타입(Interaction 테이블의 type 값)
	interactionType : byte;

	/// 미니게임을 해야 하는지
	runMiniGame : bool;
	/// 인터렉션에 남은 시간(ms)
	remainTick : int;
}

// START_DIALOG_INTERACTION_NOTIFY
table StartDialogInteractionNotify
{
	/// 채집을 하는 PC or UPC 오브젝트 아이디
	pcObjectId : long;

	/// 인터렉션 할 오브젝트 아이디
	objectId : long;
	/// 인터렉션 타입(Interaction 테이블의 type 값)
	interactionType : byte;
	/// 다이얼로그 그룹아이디
	dialogGroupId : int;
	/// 진행 메인 스트림ID
	mainStreamId : int;
}

///- OTHER_PC_START_INTERACTION_NOTIFY --------------
table OtherPcStartInteractionNotify
{
	/// 인터렉션 하는 오브젝트의 아이디
	objectId : long;

	/// 인터렉션 당하는 오브젝트의 아이디
	targetId : long;
	/// 인터렉션 당하는 오브젝트의 Npc 타입
	npcType : int;
	/// 인터렉션 타입(Interaction 테이블의 type 값)
	interactionType : byte;
}

///- MINIGAME_INTERACTION_RESULT_NOTIFY --------------
table MiniGameInteractionResultNotify
{
	pcObjectId : long;

	/// 미니게임 판정 결과
	rank : MiniGameRankType;
	/// 유저가 터치한 게이지 시점
	gaugePoint : int;
}


///- CANCEL_INTERACTION_NOTIFY --------------
table CancelInteractionNotify
{
	pcObjectId : long;
}


enum InteractionRewardType : int
{
	IRT_NONE = 0,
	IRT_GOOD,
	IRT_PERFECT,
}


///- END_INTERACTION_NOTIFY --------------
table EndInteractionNotify
{
	/// 채집을 하는 PC or UPC 오브젝트 아이디
	pcObjectId : long;
	result : ErrorCode;
	rewardType : InteractionRewardType;
	targetObjectId : long;
}

///- OTHER_PC_END_INTERACTION_NOTIFY --------------
table OtherPcEndInteractionNotify
{
	/// 인테렉션 하는 오브젝트의 아이디
	objectId : long;
}



/// 메인미션 참여 상태
enum PushMainMissionState : int
{
	/// 참여 안함
	PM_NOT_JOIN = 0,
	/// 매칭 중
	PM_MATCHING,
}

/// 알림의 현재 상태
enum PushState : int
{
	/// 매칭예약 가능
	PUSH_STATE_READY,
	// 매칭 가능
	PUSH_STATE_RUNNING,
	// 타임 아웃
	PUSH_STATE_TIMEOUT,
	// 중지(초기상태)
	PUSH_STATE_STOPPED
}

/// 연출 카메라 시작
/// CAMERA_OBJECT_START_NOTIFY
table CameraObjectStartNotify
{
	pos : Pos (required);
	lifeTick : int;
}

/// 연출 카메라 종료
/// CAMERA_OBJECT_END_NOTIFY
table CameraObjectEndNotify
{
}

/// 연출 카메라 이동
/// CAMERA_OBJECT_MOVE_NOTIFY
table CameraObjectMoveNotify
{
	pos : Pos (required);
}


table Stats
{
	physicalAttack : int;
	magicAttack : int;
	criticalStrikeChance : int;
	attackSpeedRate : int;
	physicalAttackDamageRate : int;
	magicAttackDamageRate : int;
	armorPenetrationRate : int;
	magicArmorPenetrationRate : int;
	damageReflection : int;
	tripleDamageChance : int;
	pentaDamageChance : int;
	trueDamageRate : int;
	afterSkillDamageBoostRate : int;
	pvpPenetrationRate : int;
	pveTrueDamage : int;
	bossPenetrationRate : int;
	health : int;
	armor : int;
	magicArmor : int;
	lifeRegeneratePerSecond : int;
	physicalDamageReduction : int;
	magicDamageReduction : int;
	criticalStrikeReduction : int;
	criticalDamageReduction : int;
	poisonResistence : int;
	iceResistence : int;
	fireResistence : int;
	allResistence : int;
	lifeStealRate : int;
	pvpDamageReduction : int;
	pveDamageIgnorance : int;
	bossDamageResistance : int;
	moveSpeedRate : int;
	tenacity : int;
	cooldownReductionRate : int;
	addVitalEnergy : int;
	addExp : int;
	addGold : int;
	addDropChance : int;
}

/// STAT_UPDATE_NOTIFY
table StatUpdateNotify
{
	objectId : long;
	stats : Stats (required);
	combatPower : int;
	dps : int;
	ehp : int;
	buffCombatPower : int;
	PcStatHardCapDatas : [PcStatHardCapData];
}


/// AI_ACTION_START_NOTIFY
table AiActionStartNotify
{
	objectId : long;
	groupId : int;
	actionId : int;
}

/// AI_ACTION_END_NOTIFY
table AiActionEndNotify
{
	objectId : long;
	groupId : int;
	actionId : int;
}

/// PLAYER_REVIVE_REQUEST
table PlayerReviveRequest
{
	reviveType : int;
}

/// PLAYER_REVIVE_RESPONSE
table PlayerReviveResponse
{
	result : int;
	objectId : long;
}

enum SuperArmorState : int
{
	SAS_ARMOR = 1,
	SAS_RECOVERY = 2,
}

/// CHANGED_SUPER_ARMOR_GAUGE_NOTIFY
table ChangedSuperArmorGaugeNotify
{
	objectId : long;
	id : int;
	curGauge : long;
	maxGauge : long;
	state : int;
	takeTime : int;
	recoveryTime : int;
}


/// Penalty_Skill_Notify
table PenaltySkillNotify
{
	objectId : long;
	takeTime : int;
	maxTime : int;
	aiActionId : int;
}

//PENALTY_SKILL_CANCEL_NOTIFY
table PenaltySkillCancelNotify
{
	objectId : long;
	skillId : int;
}

/// ADMIN_COMMAND_NOTIFY
table AdminCommandNotify
{
	objectId : long;
	keyword : string (required);
	argument : [string] (required);
}

/// SYSTEM_DEBUG_MESSAGE
table SystemDebugMessageNotify
{
	objectId : long;
	message : string (required);
}

/// SKILL_SLOT_PLACE_REQUEST
table SkillSlotPlaceRequest
{
	objectId : long;
	presetNo : int;
	skillId : int;
}

/// SKILL_SLOT_PLACE_RESPONSE
table SkillSlotPlaceResponse
{
	result : int;
	objectId : long;
	presetNo : int;
	changedSkillId : int;
}

table SkillLevelUpInfo
{
	skillId : int;
	featureId : short;
	countOfLevelup : short;
	curLevel : short;
	changeLevel : short;
	usedSp : short;
}

/// SKILL_LEVEL_UP_REQUEST
table SkillLevelUpRequest
{
	objectId : long;
	SkillLevelUpInfos : [SkillLevelUpInfo] (required);
}

/// SKILL_LEVEL_UP_RESPONSE
table SkillLevelUpResponse
{
	result : int;
	objectId : long;
	SkillLevelUpInfos : [SkillLevelUpInfo];
}

/// CHANGE_IFF_NOTIFY
table ChangeIffNotify
{
	objectId : long;
	iff : int;
}

/// UPDATE_ENERGYPOINT_NOTIFY
table UpdateEnergyPointNotify
{
	objectId : long;
	acquireEnergyPoint : int;
	currentEnergyPoint : int;
}

/// 장착 정보
table EquipInfo
{
	slots : [ulong] (required);
}

/// 외형장비 장착 정보
table CostumeSlotInfo
{
	itemObjectId : ulong;
	isVisivle : bool;
}

table CostumeInfo
{
	slots : [CostumeSlotInfo] (required);
}

/// NOTIFY_EVENT_COUNTER_INFO
table EventCounterInfo
{
	objectId : long;
	currentValue : int;
	maxValue : int;
	counterType : EventCounterType;
	counterState : EventCounterStateType;
	conterNameId : int;
	autoProgressId : int;
	hideCount: bool;
}

/// NOTIFY_EVENT_COUNTER_PROGRESS_INFO
table EventCounterProgressInfo
{
	eventSetId : int;
	eventId : int;
	eventState : EventStateType;
	remainTime : int;
	maxTime : int;
}

/// NOTIFY_EVENT_HIDDEN_CONTENTS_START
table EventHiddenContentsStart
{
	objectId : long;
	remainTime : int;
}

/// NOTIFY_EVENT_HIDDEN_CONTENTS_END
table EventHiddenContentsEnd
{
	objectId : long;
}

/// NOTIFY_EVENT_HIDDEN_GATHERING_COLLECTED
table EventHiddenGatheringCollected
{
	objectId : long;
	name : string (required);
}

/// EVENT_OUT_OF_PLAY_NOTIFY
table EventOutOfPlayNotify
{
	eventsetId : int;
	eventId: int;
}

/// EVENT_MIDDLE_NOTIFY 
table EventMiddleNotify
{
	eventSetId : int;
	eventId : int;
	remainTime : int;
	idleTime : int;
	prevIgnoreEvent : bool;
	curIgnoreEvent : bool;
}

/// NOTIFY_EVENT_COUNTER_PROGRESS_INFO

///- QuestTargetType ----------
enum QuestTargetType : int
{
	QTT_TYPE_NONE = 0,
	QTT_TYPE_MONSTER,
	QTT_TYPE_QUEST,
	QTT_TYPE_EVENTSET,
	QTT_TYPE_GATHERING,
	QTT_TYPE_MINER,
	QTT_TYPE_FISHING,
	QTT_TYPE_M_MAPID,
	QTT_TYPE_S_MAPID,
	QTT_TYPE_SMAP_FIELD_EVENT,
	QTT_TYPE_SMAP_MAIN_MISSION_EVENT,	
        QTT_TYPE_MAINSTREAMID,
        QTT_TYPE_FISH,
        QTT_TYPE_PK,
    	QTT_TYPE_ITEM,
    	QTT_TYPE_CURRENCY,
   	QTT_TYPE_SOLO_DUNGEON,
   	QTT_TYPE_DAILY_DUNGEON,
  	QTT_TYPE_INVEN_ITEM,
	QTT_TYPE_MAX,
}

/// QUEST_REWARD_NOTIFY
table QuestRewardNotify
{
   questId : int;
   rewardId : int;
   orignRewardInfo : RewardInfo (required);
   giveRewardInfo : RewardInfo (required);
}

/// QUEST_RECEIVE_REWARD_RESPONSE
table QuestReceiveRewardResponse
{
   questId : int;
   errorCode	: ErrorCode;
}

/// QUEST_CONTEXT_DATA_SET_NOTIFY 1
table QuestCountData
{
	targetType : QuestTargetType;
	targetId : int;
	count : int;
}

/// QUEST_CONTEXT_DATA_SET_NOTIFY 2
table QuestContextData
{
   questId : int;
	countDataSet : [QuestCountData] (required);
   clearCount : int;
   point : int;
}

/// QUEST_CONTEXT_DATA_SET_NOTIFY 3
table QuestContextDataSetNotify
{
	contextDataSet : [QuestContextData] (required);
}

/// QUEST_CONTEXT_DATA_NOTIFY
table QuestContextDataNotify
{
	contextData : QuestContextData (required);
}

/// MAINSTREAM_STATE_NOTIFY
enum MainStreamStateType : int
{
	MAIN_STREAM_STATE_NONE = 0,
	MAIN_STREAM_STATE_ACTIVE = 1,
	MAIN_STREAM_STATE_COMPLETE = 2,
	MAIN_STREAM_STATE_MAX
}

/// MAIN_STREAM_EVENT_JOIN_SWITCH_STATE_NOTIFY
table MainStreamEventJoinSwitchStateNotify
{
   switchState : bool;
}

/// MAIN_STREAM_EVENT_JOIN_SWITCH_REQUEST
table MainStreamEventJoinSwitchRequest
{
   setSwitch : bool;
}

/// MAIN_STREAM_EVENT_JOIN_SWITCH_RESPONSE
table MainStreamEventJoinSwitchResponse
{
   switchState : bool;
   errCode	: ErrorCode;
}

/// MAINSTREAM_STATE_NOTIFY
table MainStreamStateNotify
{
   mainStreamId : int;
   chapterIndex : int;
   state : MainStreamStateType;
}

/// MAIN_STREAM_DATA
table MainStreamData
{
   mainStreamId : int;
   count : int;
   state : MainStreamStateType;
}

/// MAIN_STREAM_DATA_NOTIFY
table MainStreamDataNotify
{
	data : MainStreamData (required);
}

/// MAIN_STREAM_DATA_SET_NOTIFY
table MainStreamDataSetNotify
{
	datas : [MainStreamData] (required);
}

/// MAIN_STREAM_DIRECT_NOTIFY
table MainStreamDirectNotify
{
    mainStreamId : int;
	directionId : int;
}

/// MAIN_STREAM_PRE_ACTION
enum MainStreamPreActionType : int
{
	MS_PRE_ACTION_TYPE_NONE = 0,
	MS_PRE_ACTION_TYPE_SMAP = 1,
	MS_PRE_ACTION_TYPE_INTERACTION = 2,
	MS_PRE_ACTION_TYPE_EVENTSET = 3,
	MS_PRE_ACTION_TYPE_COMMAND = 4,
	MS_PRE_ACTION_TYPE_TUTORIAL = 5,
	MS_PRE_ACTION_TYPE_MAX = 6,
}

/// MAIN_STREAM_PRE_ACTION_REQUEST
table MainStreamPreActionRequest
{
    mainStreamId : int;
	actionType : MainStreamPreActionType;
	smapId : int;
	eventSetId : int;
}

/// MAIN_STREAM_PRE_ACTION_RESPONSE
table MainStreamPreActionResponse
{
	errorCode	: ErrorCode;
}

/// MAIN_STREAM_FINISHED_BACK_NOTIFY
table MainStreamFinishedBackNotify
{
	mainStreamId : int;
}

/// MAIN_STREAM_DO_BUTTON_ACTION_REQUEST
table MainStreamDoButtonActionRequest
{
	mainStreamId : int;
}

/// MAIN_STREAM_DO_BUTTON_ACTION_RESPONSE
table MainStreamDoButtonActionResponse
{
	errorCode	: ErrorCode;
}

/// MAIN_STREAM_ON_REWARD_UI_NOTIFY
table MainStreamOnRewardUiNotify
{
	mainStreamId : int;
	rewardId : int;
	rewardInfo : RewardInfo (required);
	orignRewardInfo : RewardInfo (required);
}

/// DAILY_HOMEWORK
enum DailyHomeworkType : int
{
	DAILY_HOMEWORK_TYPE_NONE = 0,
	DAILY_HOMEWORK_TYPE_ESSENTIAL = 1,
	DAILY_HOMEWORK_TYPE_SPECIAL = 2,
	DAILY_HOMEWORK_TYPE_ACTIVITY = 3,
	DAILY_HOMEWORK_TYPE_MAX
}

/// 일일과제 항목 데이터
table DailyHomeworkData
{
	contentsType : DailyHomeworkType;
	id : short;
	count : short;
}

/// 일일과제 활약도 보상 상태
table DailyHomeworkActivityRewardStatus
{
	id : short;
	complete : bool;
}

/// DAILY_HOMEWORK_DATA_ALL_NOTIFY
table DailyHomeworkDataAllNotify
{
	chapter : int;
	activityPoint : int;
	datas : [DailyHomeworkData] (required);
	activityPointStatuses : [DailyHomeworkActivityRewardStatus] (required);
}

/// DAILY_HOMEWORK_DATA_UPDATE_NOTIFY
table DailyHomeworkDataUpdateNotify
{
	/// activityPoint는 절대값
	activityPoint : int;
	data : DailyHomeworkData (required);
}

/// DAILY_HOMEWORK_GET_REWARD_REQUEST
table DailyHomeworkGetRewardRequest
{
	dataId : int;
}

/// DAILY_HOMEWORK_GET_REWARD_RESPONSE
table DailyHomeworkGetRewardResponse
{
	errorCode	: ErrorCode;
}

/// CHAPTER_CLEAR_SMAP_REQUEST
/// 챕터 UI에서 smap 완료 후 버튼을 누르면 전송하는 패킷
/// 다음 smap이 열리거나 다음 챕터가 열린다
table ChapterClearSMapRequest
{
	///
}

/// CHAPTER_CLEAR_SMAP_RESPONSE
table ChapterClearSMapResponse
{
	errorCode : ErrorCode;

	/// 위 errorCode가 OK가 아닐 경우에는 아래 값은 0으로 채워집니다
	chapterId : short;
	sMapIndex : short;
}

/// CHAPTER_JOIN_SMAP_REQUEST
table ChapterJoinSmapRequest
{
	sMapId : int;
}

/// CHAPTER_JOIN_SMAP_RESPONSE
table ChapterJoinSmapResponse
{
	errorCode : ErrorCode;
}

///  CHAPTER_JOIN_REQUEST
enum ChapterJoinType : int
{
	CHAPTER_JOIN_TYPE_SMAP = 0,
	CHAPTER_JOIN_TYPE_BOSS_EVENTSET = 1,
	CHAPTER_TARGET_TYPE_MAX
}

///  CHAPTER_JOIN_REQUEST
table ChapterJoinRequest
{
	chapterIndex : short;
	joinType : ChapterJoinType;	// 삭제 예정
	smapId : int;
	bossEventSetId : int;		// 삭제 예정
}

/// CHAPTER_JOIN_RESPONSE
table ChapterJoinResponse
{
	errCode : ErrorCode;
}

/// CHAPTER_DATA_NOTIFY
/// 삭제하고 CHAPTER_NOTIFY로 대체될 것이다
table ChapterDataNotify
{
	chapterId : short;
}

/// CHAPTER_NOTIFY
table ChapterNotify
{
	chapterId : short;
	sMapIndex : short;
}

/// EXIT_INSTANCE_DUNGEON_REQUEST
table ExitInstanceDungeonRequest
{
}

/// EXIT_INSTANCE_DUNGEON_RESPONSE
table ExitInstanceDungeonResponse
{
	reason : JoinChannelReason;
}

/// EVENT_MOVE_START_LOC_REQUEST 
table EventMoveStartLocRequest
{
	eventId : int;
        phaseId : int;
        sMapId: int;
        sceneId : int;
        pos : Pos;
}

/// EVENT_MOVE_START_LOC_RESPONSE 
table EventMoveStartLocResponse
{
	eventId : int;
	errCode : ErrorCode;
}

/// EVENT_RETURN_LAST_LOC_REQUEST 
table EventReturnLastLocRequest
{
	eventId : int;
}

/// EVENT_RETURN_LAST_LOC_RESPONSE 
table EventReturnLastLocResponse
{
	eventId : int;
	errCode : ErrorCode;
}

/// #골드던전
/// GOLD_DUNGEON_INFO_REQUEST
table GoldDungeonInfoRequest
{
}

/// GOLD_DUNGEON_INFO_RESPONSE
table GoldDungeonInfoResponse
{
	enterCount : short;
}

/// GOLD_DUNGEON_ENTER_FAILED
table GoldDungeonEnterFailed
{
	errorCode : ErrorCode;
}

/// QUEST_BONUS_REWARD
table QuestBonusData
{
	questBonusId : int;
	isReceivedReward : bool;
}

/// QUEST_BONUS_REWARD_REQUEST
table QuestBonusRewardRequest
{
   questBonusId : int;
}

/// QUEST_BONUS_REWARD_RESPONSE
table QuestBonusRewardResponse
{
   questBonusData : QuestBonusData;
   errCode	: ErrorCode;
}

/// QUEST_BONUS_REWARD_NOTIFY
table QuestBonusRewardNotify
{
	questBonusDataSet : [QuestBonusData] (required);
}

/// RECOMMEND_GET_PRAISER_RESPONSE
table PraiserInfo
{
	pcDbId : ulong;
	rank : short;
	name : string (required);
	contribution : long;
	totalContribution : long;
	level : int;
	classType : int;
}

/// RECOMMEND_GET_PRAISER_REQUEST
table RecommendGetPraiserRequest
{
	eventSetId: int;
	eventId: int;
}

/// RECOMMEND_GET_PRAISER_RESPONSE
table RecommendGetPraiserResponse
{
   errCode : ErrorCode;
   eventSetId : int;
   eventId : int;
   remainTime : int;
   praiserList : [PraiserInfo];
}

/// RECOMMEND_CHOICE_PRAISER_REQUEST
table RecommendChoicePraiserRequest
{
	eventSetId: int;
	eventId: int;
	name : string;
}

/// RECOMMEND_CHOICE_PRAISER_RESPOSE
table RecommendChoicePraiserReponse
{
	errCode : ErrorCode;
	targetPcName : string;

}

/// RECOMMEND_PRAISER_RESULT_NOTIFY
table RecommendPraiserResultNotify
{
	pcDbId : long;
	name : string (required);
}

/// RECOMMEND_CHOICE_RESULT_NOTIFY
table RecommendChoiceResultNotify
{
	voterPcName: string;
	votedPcName: string;
}

/// PRESET_CHANGE_REQUEST
table PresetChangeRequest
{
	objectId : long;
	presetNo : short;
}

/// PRESET_CHANGE_RESPONSE
table PresetChangeResponse
{
	result : int;
	objectId : long;
	presetNo : short;
	skillslot : [int];
	mainSkillSlotIdx : byte;
}


/// Preset Info
table PresetItemInfo
{
	itemslots : [long] (required);
}

table PresetSkillInfo
{
	skillslots : [int] (required);
}

table PresetCostumeSlotInfo
{
	slot : ulong;
	isVisible : bool;
}

table PresetCostumeInfo
{
	costumeSlots : [PresetCostumeSlotInfo] (required);
}

table PresetInfo
{
	presetNo : short;
	item : PresetItemInfo (required);
	skill : PresetSkillInfo (required);
}

table CostumePresetInfo
{
	presetNo : short;
	costume : PresetCostumeInfo (required);
}

/// PRESET_ITEMSLOT_UPDATE_NOTIFY
table PresetItemSlotUpdateNotify
{
	presetNo : short;
	itemslot : PresetItemInfo (required);
}

/// DAILY_DUNGEON_JOIN_REQUEST
table DailyDungeonJoinRequest
{
	id : int;
	difficult : short;
}

/// DAILY_DUNGEON_JOIN_RESPONSE
table DailyDungeonJoinResponse
{
	result : int;
	id : int;
	difficult : short;
}


/// FIELD_JOIN_REQUEST
table FieldJoinRequest
{
	sMapId : int;
}

/// FIELD_JOIN_RESPONSE
table FieldJoinResponse
{
	sMapId : int;
	reason : JoinChannelReason;
}

table ClientItemResultInfo
{
	itemId : int;
	stackCount : int;
}

/// UPDATE_ITEM_GRADE_LEVEL_NOTIFY
table UpdateItemGradeLevelNotify
{
	itemObjectId : ulong;
	grade : short;
	level : short;
	enchantExp : int;
}

/// UPDATE_ITEM_OPTION_NOTIFY
table UpateItemOptionNotify
{
	itemObjectId : ulong;
	optionId : int;
	optionLevel : short;
}

/// skill Feature info
table FeatureInfo
{
	featureId : int;
	level : int;
}

table LoadedSkillFeatureInfo
{
	skillId : int;
	featureInfos : [FeatureInfo] (required);
	coolTime : int; // 쿨타임(mili second)
}

///SKILL_FEATURE_INITIALIZE_REQUEST
table SkillFeatureInitializeRequest
{
	pcObjectId : ulong;
	skillId : int;
}

///SKILL_FEATURE_INITIALIZE_RESPONSE
table SkillFeatureInitializeResponse
{
	skillId : [int];
	result : bool;
}

///UPDATE_SKILL_POINT_NOTIFY
table UpdateSkillPointNotify
{
	remainPoint : short;
}


table ACRewardItemInfo
{
	itemId : int;
	itemGrade : short;
	amount : int;
}

table DailyDungeonInfo
{
	id : int;
	eventId : int;
	day : short;
	difficult : short;
	score : int;
	clearCount : int;
	clearTime : long;
}

/// DAILY_DUNGEON_INFO_REQUEST
table DailyDungeonInfoRequest
{
}

/// DAILY_DUNGEON_INFO_RESPONSE
table DailyDungeonInfoResponse
{
	day : byte;
	todayClearCount : int;
	otherDayClearCount : [int]; // 0 ~ 6 : 일요일 ~ 토요일
}

/// DAILY_DUNGEON_OTHER_JOIN_REQUEST
table DailyDungeonOtherJoinRequest
{
	id : int;
	difficult : short;
}

/// DAILY_DUNGEON_OTHER_JOIN_RESPONSE
table DailyDungeonOtherJoinResponse
{
	result : int;
	id : int;
	difficult : short;
}

/// ResurrectionErrorType --------------
enum ResurrectionErrorType : int
{
	RET_CAN_NOT = 0,
	RET_OK = 1,
	RET_INCORRECT_TARGET = 2,
}


/// START_RESURRECTION_REQUEST
table StartResurrectionRequest
{
	casterId : long;
	targetId : long;
}

/// START_RESURRECTION_NOTIFY
table StartResurrectionNotify
{
	casterId : long;
	targetId : long;
	result : int;
	duration : int;
}

/// END_RESURRECTION_NOTIFY
table EndResurrectionNotify
{
	casterId : long;
	targetId : long;
}

/// CANCEL_RESURRECTION_REQUEST
table CancelResurrectionRequest
{
	casterId : long;
	targetId : long;
}

/// CANCEL_RESURRECTION_NOTIFY
table CancelResurrectionNotify
{
	casterId : long;
	targetId : long;
}

table MoveItem
{
	itemObjectId : ulong;
	count : int;
}

/// MOVE_ITEM_REQUEST
table MoveItemRequest
{
	items : [MoveItem] (required);
}

table MoveItemResponse
{
	errorCode : int;
}

/// CREATURE_DETECT_TARGET_NOTIFY
table CreatureDetectTargetNotify
{
	ownerId : long; // 타겟을 잡은 아이디
	lookAtTargetId : long; // 대상의 아이디
}

/// SOCIAL_MOTION_START_REQUEST
table SocialMotionStartRequest
{
	motion : short;
}

/// SOCIAL_MOTION_START_NOTIFY
table SocialMotionStartNotify
{
	errorCode : int;
	actor : long;
	motion : short;
}

/// SOLO_DUNGEON (공용 데이터 구조)
table SoloDungeonStageElem
{
	chapterId : int;
	sMapId : int;
	stageId : int;
	isCleared : bool;
	clearCount : int;

	// TODO: [2017/03/14 whiletrue] openedOneshot으로 네이밍 변경할 것
	isOneShot: bool;
	updateTime : long;
}

/// SOLO_DUNGEON (리로드용 공용 데이터 구조)
table SoloDungeonReloadElem
{
	stageId : int;
	clearCount : int;
}

/// SOLO_DUNGEON_RELOAD_REQUEST
table SoloDungeonReloadRequest
{
}

/// SOLO_DUNGEON_RELOAD_RESPONSE
table SoloDungeonReloadResponse
{
	stageElems : [SoloDungeonReloadElem];
}

/// SOLO_DUNGEON_LOAD_NOTIFY
table SoloDungeonLoadNotify
{
	stageElems : [SoloDungeonStageElem] (required);
}

/// SOLO_DUNGEON_JOIN_REQUEST
table SoloDungeonJoinRequest
{
	stageId : int;
}

/// SOLO_DUNGEON_JOIN_RESPONSE
table SoloDungeonJoinResponse
{
	result : int;
	stageId : int;
}

/// SOLO_DUNGEON_CLEAR_NOTIFY
table SoloDungeonClearNotify
{
	result : int;
	succeed : bool;
	stageElem : SoloDungeonStageElem (required);
	rewards : RewardInfo;
}

/// CHAT_REQUEST
table ChatRequest
{
	type	 : short;
	language : short;
	message	 : string (required);
}

/// CHAT_WHISPER_REQUEST
table ChatWhisperRequest
{
	receiverDbId : long;
	message : string (required);
}

table ChatPcInfo
{
	name : string (required);
	level	: short;
	classType : short;
	tier	: short; 
	tierLev : short;
	objectId : long;
	pcDbId  : long;
        worldId : short;
	iff : int;
}

table ChatCommonInfo
{
	type	 : short;
	sender   : ChatPcInfo (required);
	time	 : long;
	message  : string (required);
	chatNo	 : int;
	textType : short;
	language : short;
}

table ChatGuildInfo
{
	chatInfo : ChatCommonInfo (required);
	guildName : string; // @nr
	guildId		: int;
	memGrade	: short;
	joinType	: short;
	isTop		: bool;
	isNewMem	: bool;
}

table ChatWhisperInfo
{
	chatInfo : ChatCommonInfo (required);
	other	 : long;
}

// CHAT_ERROR_NOTIFY
table ChatErrorNotify
{
	errorCode	: int;
	param		: long; 
}

// CHAT_COMMON_NOTIFY
table ChatCommonNotify
{
	chatInfo : ChatCommonInfo (required);
}

// CHAT_GUILD_NOTIFY
table ChatGuildNotify
{
	chatGuildInfo : ChatGuildInfo (required);
}

// CHAT_WHISPER_NOTIFY
table ChatWhisperNotify
{
	errorCode :	int;
	chatWhisperInfo : ChatWhisperInfo;
	otherInfo : ChatPcInfo(required);
}

// CHAT_GUILD_MSG_LIST_REQUEST		
table ChatGuildMsgListRequest
{
	type		: short;
	chatNo		: int;
}

// CHAT_GUILD_MSG_LIST_RESPONSE	
 table ChatGuildMsgListResponse
 {
	type		: short;
	messages	: [ChatGuildInfo];
	chatNo		: int;
 }

// CHAT_WHISPER_MSG_LIST_REQUEST	
table ChatWhisperMsgListRequest
{
	receiverDbId	: long;
	chatNo			: int;
}

// CHAT_WHISPER_MSG_LIST_RESPONSE	
table ChatWhisperMsgListResponse
{
	messages	: [ChatWhisperInfo];
	otherDbId	: long;
	chatNo		: int;
}

table ChatLastWhisperMessage
{
	chatWhisperInfo : ChatWhisperInfo (required);
	other : ChatPcInfo (required);
	isNew : bool;
}

// CHAT_NEW_MESSAGE_NOTIFY				
table ChatNewMessageNotify
{
	ChatNewMessages : [ChatLastWhisperMessage]; // @nr
	ChatGuildMessages : [int]; // @nr
}

/// NEW_WHISPER_MESSAGE_NOTIFY
table NewWhisperMessageNotify
{
	chatWhisperInfo : ChatWhisperInfo (required);
	other : ChatPcInfo (required);
	isNew : bool;
}

/// NEW_GUILD_MESSAGE_NOTIFY
table  NewGuildMessageNotify
{
	guildChatType : short;
}

// CHAT_CHECK_RECEIVER_REQUEST
table ChatCheckReceiverRequest
{
	receiver : string (required);
}

// CHAT_CHACK_RECEIVER_RESPONSE
table ChatCheckReceiverResponse
{
	errorCode : int;
	receiverInfo : ChatPcInfo;
}

// CHAT_READ_WHISPER_NOTIFY
table ChatReadWhisperNotify
{
	other : long;
}

// CHAT_READ_GUILD_NOTIFY
table ChatReadGuildNotify
{
	type : short;
}

// CHAT_DELETE_ROOM
table ChatDeleteRoom
{
	other : long;
}

// DB_CHAT_ADMIN
table ChatAdmin
{
	sender	: long;
	type	: short;
	message : string;
}

// DB_CHAT_ADMIN_WHISPER
table ChatAdminWhisper
{
	sender			: long;
	receiverDbId	: long;
	message			: string;
}

/// - 메일
table SystemTime
{
	year : ushort;
	month : ushort;
	day : ushort;
	hour : ushort;
	min : ushort;
	sec : ushort;
}

table MailItemInfo
{
	itemId : int;
	count : int;
	grade : short;
}

table MailContentInfo
{
	category : short;
	sender : int;
	subIndex : int;
	subString : string (required);
}

table MailSystemInfo
{
	category : string (required);
	sender : string (required);
	content : string (required);
}

table MailTimeInfo
{
	receivedTime : SystemTime (required);
	remainTime : int;
}

table BundleRewardInfo
{
	items : [MailResultItem] (required);
	costInfos : [CostInfo] (required);
}

table MailRewardInfo
{
	costInfo : [CostInfo] (required);
	rewardItems : [MailItemInfo] (required);
	items : [ClientLItem] (required);
}

table MailInfo
{
	id : long;
	ownerType : byte;			// MailOwnerType
	content : MailContentInfo (required);
	system : MailSystemInfo (required);
	time : MailTimeInfo (required);
	reward : MailRewardInfo (required);
}

table MailResultItem
{
	itemId : int;
	stackCount : int;
}

table MailResultInfo
{
	items : [MailResultItem] (required);
	costInfos : [CostInfo] (required);
}

/// end

/// MAIL_RECEIVE_NOTIFY
table MailReceiveNotify
{
	mail : MailInfo (required);
}

/// MAIL_REWARD_RECEIVE_REQUEST
table MailReceiveRequest
{
	id : long;
	mailType : int;
	ownerType : byte;
}

/// MAIL_REWARD_RECEIVE_RESPONSE
table MailReceiveResponse
{
	errorCode : int;
	id : [long];
	errorCode2 : int;
	mailType : int;
	ownerType : byte;
	isAll : bool;

	result : MailRewardInfo;
}

///	MAIL_REMOVE_NOTIFY
table MailRemoveNotify
{
	id : [long] (required);
}

///PLAYER_IMMEDIATELY_DEAD_REQUEST
table PlayerImmediatelyDeadRequest
{
	//다운 상태 진입시 즉시사망을 위해
	objectId : long;
}

/// PC_GUILD_INFO_UPDATE_NOTIFY
table PcGuildInfoUpdateNotify
{
	objectId : long;
	pcGuildInfo : PcGuildInfo; // @nr
}

/// DAILY_DUNGEON_CLEAR_NOTIFY
table DailyDungeonClearNotify
{
	result : int;
	succeed : bool;
	id : int;
	todayClearCount : int;
	rewards : RewardInfo;
	day : byte;
}

table PlayerReviveInfo
{
	reviveType : int;
	reviveCount : int;
	coolTimeMiliSec : int;
}

table PlayerReviveInfoNotify
{
	reviveInfos : [PlayerReviveInfo];
}

/// UPC_LOAD_START_NOTIFY					= 20021,
table UpcLoadStartNotify
{
	upcObjectId : long;
	name : string (required);
	iff : int;
	classType : int;
	level : int;
	customizingInfo : CustomizeInfo (required);
	equipPartsInfo : [ItemPartsInfo] (required);
	costumePartsInfo : [CostumePartsInfo] (required);
}

/// UPC_LOAD_FINISH_NOTIFY					= 20022,
table UpcLoadFinishNotify
{
	objectId : long;
}

/// UPC_HOST_REQUEST
table UpcHostRequest
{
	upcObjectId : long;
	
	upcType : UpcType;
	presetNo : short;
	skillSlotInfos : [SkillSlotInfo] (required);
	preset : [PresetInfo] (required);
	skillFeatureInfos : [LoadedSkillFeatureInfo] (required);
	
	stats : Stats; // @nr
}

/// UPC_HOST_RESPONSE
table UpcHostResponse
{
	upcObjectId : long;
	errorCode : int;	// 성공: 1(ErrorCode::OK), 실패: > 1(ErrorCode::FAILED)
}

/// UPC_UNHOST_NOTIFY
table UpcUnHostNotify
{
	upcObjectId : long;
}

/// UPC_LOAD_START_NOTIFY_REQUEST
table UpcLoadStartNotifyRequest
{

}

/// PLAYER_DESPAWN_NOTIFY
table PlayerDespawnNotify
{
}

table AddSoulStoneInfo
{
	followerId : int;
	count : int;
}

///FOLLOWER_ADD_SOUL_STONE_NOTIFY
table FollowerAddSoulStoneNotify
{
	addInfos : [AddSoulStoneInfo] (required);
	result : int;
}


/// FOLLOWER_ENCHANT_REQUEST
table FollowerEnchantRequest
{
	followerId : int;
}

///FOLLOWER_ENCHANT_RESPONSE
table FollowerEnchantResponse
{
	followerId : int;
	resultLevel : int;
	result : int;
}

///FOLLOWER_START_MISSION_REQUEST	= 22030
table FollowerStartMissionRequest
{
	followerId : int;
	positionIdx : short;
}

///FOLLOWER_START_MISSION_NOTIFY	= 22031
table FollowerStartMissionNotify
{
	followerId : int;
	result : int;
	positionIdx : int;
	remainTime : long;
}

///FOLLOWER_END_MISSION_REQUEST		= 22032
table FollowerEndMissionRequest
{
	followerId : int;
}

///FOLLOWER_END_MISSION_RESPONSE	= 22033
table FollowerEndMissionResponse
{
	followerId : int;
	result : int;
}

table MissionRemainTimeInfo
{
	followerId : int;
	remainTime : long;
}

/// FOLLOWER_MISSION_REMAIN_TIME_REQUEST = 22034
table FollowerMissionRemainTimeRequest
{
	followerId : int;
}

/// FOLLOWER_MISSION_REMAIN_TIME_RESPONSE = 22035,
table FollowerMissionRemainTimeResponse
{
	followerRemainTimeInfos : [MissionRemainTimeInfo];
}

/// FOLLOWER_MISSION_COMPLETE_REQUEST = 22037
table FollowerMissionCompleteRequest
{
	followerId : int;
}

/// FOLLOWER_MISSION_COMPLETE_RESPONSE = 22038
table FollowerMissionCompleteResponse
{
	followerId : int;
	result : int;
}

/// GAME_RECONNECT_REQUEST
table GameReconnectRequest
{
}

/// GAME_RECONNECT_RESPONSE
table GameReconnectResponse
{
	error : int;
}

/// RECONNECT_LOAD_DATA_REQUEST
/// RECONNECT_LOAD_DATA_NOTIFY

///FOLLOWER_LOAD_INFO_NOTIFY
table FollowerLoadInfoNotify
{
	followers : [FollowerInfo] (required);
}


table ReconnectLoadDataRequest
{
	loadData : LoadData (required);
}

/// RECONNECT_LOAD_DATA_RESPONSE
table ReconnectLoadDataResponse
{
	sceneId : int;			// 클라이언트에서 로딩된 씬
	pos : Pos (required);	// 클라이언트에서 로딩된 좌표
	eventSetId : int;		// 클라이언트에서 설정된 이벤트 씬 정보
}

/// LOAD_DATA_COMPLETE_NOTIFY
table LoadDataCompleteNotify
{
}

///FOLLOWER_MISSION_REWARD_RESPONSE
table FollowerMissionRewardResponse
{
	followerId : int;
	result : int;
}

// 아레나 기본정보
table ArenaMemberBasic
{
	objectId : long;
	accountDbId : long;
	pcDbId : long;
	dbSeverId : short;
	pcName : string (required);
	level : short;
	classType : short;
	combatPower : int;
	customizingInfo : CustomizeInfo (required);		// 외형정보
	parts : [ItemPartsInfo] (required);				// 장비정보
	costumeParts : [CostumePartsInfo] (required);	// 외형장비정보
	arenaRanking : int;
	abilities : [PcAbility];
}

table ArenaMember
{
	objectId : long;
	accountDbId : long;
	pcDbId : long;
	dbSeverId : short;
	pcName : string (required);
	level : short;
	classType : short;
	combatPower : int;
	customizingInfo : CustomizeInfo (required);
	parts : [ItemPartsInfo] (required);
	costumeParts : [CostumePartsInfo] (required);	// 외형장비정보
	arenaRanking : int;
	angle : short;
}

table ArenaMemberDetail
{
	objectId : long;
	accountDbId : long;
	pcDbId : long;
	dbSeverId : short;
	pcName : string (required);
	level : short;
	classType : short;
	combatPower : int;
}

table ArenaTeamClass
{
	classType0 : short;
	classType1 : short;
	classType2 : short;
}

/// pc Ranking detail info
table PcRankInfo
{
	pcName : string (required);
	level : int;
	rank : int;
	guildId : long;
	classType : short;
	score : int;
	pcDbId : long;
	influenceLevel : short;
	influenceTier : short;
	pcGuildInfo : PcGuildInfo; // @nr
}


table OtherPcItemInfo
{
	EquipItemInfo : ClientLItem;
	LinkItemInfo : [ClientLItem];
}

table OtherPcCostumeInfo
{
	EquipItemInfo : ClientLItem;
	isVisible : bool;
}

/// ARENA_TEAM_REQUEST
table ArenaTeamRequest
{

}

/// ARENA_TEAM_RESPONSE
table ArenaTeamResponse
{
	result : int;
	teamA : [ArenaMember];
	teamB : [ArenaMember];
}

/// ARENA_TEAM_REFRESH_REQUEST
table ArenaTeamRefreshRequest
{

}

/// ARENA_TEAM_REFRESH_RESPONSE
table ArenaTeamRefreshResponse
{
	result : int;
	info : ArenaInfo;
	teamB : [ArenaMember];
}

/// ARENA_JOIN_REQUEST
table ArenaJoinRequest
{
	//
	spendType : ArenaSpendType;
}

/// ARENA_JOIN_RESPONSE
table ArenaJoinResponse
{
	result : int;

	//
	spendType : ArenaSpendType;

	// 아레나 티켓
	spendTicket : int;
	freeTicket : int;
	paidTicket : int;

	// 다이아
	spendDia : int;
	totalDia : int;
}

/// ARENA_FINISH_REQUEST
table ArenaFinishRequest
{
	// 무조건 실패

}

/// ARENA_FINISH_NOTIFY
table ArenaFinishNotify
{
	isWin : bool;
	info : ArenaInfo;
}

/// ARENA_FINISH_NOTIFY_REQUEST
table ArenaFinishNotifyRequest
{

}

/// ARENA_PLAY_INFO_NOTIFY
table ArenaPlayInfoNotify
{
	type : AreanPlayInfoType;
	killer : long;
	deader : long;
}

/// DB_GET_TRADE_ITEM_LIST_REQUEST
table DBItemGetTradeJob
{
	itemKey : int;			// ItemId
	useClass : short;		// -1:None, 0:전체, 100:전사, 200:궁사, 300:법사, 400:악사
	group : short;			// 필터그룹 : -1:전체, 10:무기 전체 20:방어구 전체, 30:장신구 전체, 100:프리즘 전체, 200:제작 재료 전체
	subgroup : short;		// 필터소그룹 : -1:전체, 10:무기 전체, 11:무기, 20:방어구 전체, 21:머리, 22:몸통, 23:손, 24:발, 30:장신구 전체, 31:목걸이, 32:반지, 33:귀걸이, 34:팔찌, 100:프리즘 전체, 101:한줌, 102:주머니, 103:자루, 104:상자, 105:수레, 106:더미, 200:제작 재료 전체, 201:약초, 202:물고기, 203:광석
	grade : short;			// -1:없음, 0:일반, 1:고급, 2:희귀, 3:영웅, 4:전설, 5:신화, 6:불멸
	raidTier : short;		// 레이드 티어 -1:ALL, 0티어~5티어
	orderCol : short;		// 정렬기준 칼럼 (1:price, 2:total(기본값))
	orderBy : short;		// 정렬순서 (0:asc(기본값), 1:desc)
	lastRowIndex : long;	// 마지막 RowIndex(tradeRow)
	lastRowValue : float;	// 마지막 RowValue
	isNext : byte;			// 다음/이전 페이지 요청(1:다음, 0:이전)
	isCount : byte;			// 무조건 1로 요청
}


/// DB_GET_TRADE_ITEM_LIST_RESPONSE
table DBTradeItemContxt
{
	tradeRow : long;			// 거래소 아이템 리스트 번호
	itemDbId : long;			// 아이템 DB 고유번호
	itemKey : int;				// ItemId
	level : short;				// 레벨
	grade : short;				// 등급
	stackCount : int;			// 아이템 스택 개수
	unitPrice : int;			// 단위 가격
	totalPrice : int;			// 가격
	buyerPcName : string (required);		// 구매자 닉네임
	createTime : long;			// 등록일시 (time_t)
	isOwner : bool;				// 자기 자신이 등록한 물건여부(캐릭터 기준)
	/// 초월 정보
	transcendLevel : short;		// 초월 레벨
	stats : [TranscendStat];	// 추가 스탯 데이터
}

/// DB_GET_TRADE_ITEM_LIST_RESPONSE
table DBTradeItemContxts
{
	totalRowCnt : int;			// 검색된 리스트의 총 개수
	tradeItems : [DBTradeItemContxt] (required);
}


/// TRADE_GET_TRADE_ITEM_LIST_REQUEST
table TradeGetTradeItemListRequest
{
	job : DBItemGetTradeJob (required);
}

/// TRADE_GET_TRADE_ITEM_LIST_RESPONSE
table TradeGetTradeItemListResponse
{
	errorCode : int;
	tradeItems : DBTradeItemContxts;
}

/// TRADE_SET_TRADE_ITEM_REQUEST
table TradeSetTradeItemRequest
{
	itemObjectId : ulong;
	stackCnt: int;			// 등록할 아이템의 스택 개수
	orgStackCnt: int;		// 등록할 아이템의 원래 스택 개수(중복 요청 방지 용도)
	price: int;				// 등록 가격
}

/// TRADE_SET_TRADE_ITEM_RESPONSE
table TradeSetTradeItemResponse
{
	errorCode : int;
}

///  TRADE_BUY_TRADE_ITEM_REQUEST
table TradeBuyTradeItemRequest
{
	tradeRow : long;		// 거래소 아이템 리스트 번호
	itemId : int;			// ItemId
	sellPricePrism: int;		// 등록된 판매 가격
	taxPrism: int;			// 세금 (Math.Max(1, (sellPricePrism * SYSTEM_TAX_RATE / 100)))		// SYSTEM_TAX_RATE = 10
	stackCount: int;		// 등록된 아이템 스택 개수
	grade: short;			// 등록된 아이템 등급
}

///  TRADE_BUY_TRADE_ITEM_RESPONSE
table TradeBuyTradeItemResponse
{
	errorCode : int;
}

/// TRADE_MY_SALE_LIST_REQUEST
table TradeMySaleListRequest
{

}

/// TRADE_MY_SALE_LIST_RESPONSE
table TradeMySaleListResponse
{
	errorCode : int;
	mySaleList : DBTradeItemContxts;
}

/// TRADE_SALE_LOG_LIST_REQUEST
table TradeSaleLogListRequest
{

}

/// TRADE_SALE_LOG_LIST_RESPONSE
table TradeSaleLogListResponse
{
	errorCode : int;
	saleLogList : DBTradeItemContxts;
}

/// TRADE_CANCEL_TRADE_ITEM_REQUEST
table TradeCancelTradeItemRequest
{
	tradeRow : long;
	itemKey : int;
}

/// TRADE_CANCEL_TRADE_ITEM_RESPONSE
table TradeCancelTradeItemResponse
{
	errorCode : int;
	itemKey : int;
}

table Influence
{
	point : long;			// 현재 포인트

	tier : short;			// 현재 티어
	level: short;			// 현재 레벨
	percentile : float;		// 백분위

	updateRemainSecond : long;	// 다음업데이트까지 남은 시간 (단위 : 초)
}

/// INFLUENCE_POINT_UP_NOTIFY
table InfluencePointUpNoti
{
	errorCode : int;
	point : long;
}

/// INFLUENCE_DATA_NOTIFY
table	InfluenceDataNotify
{
	influence : Influence (required);
	renewalType : byte;		// InfluenceRenewalType
}

/// INFLUENCE_AFTER_REFRESH_NOTIFY
table	InfluenceAfterRefreshNotify
{
}

/// BUNDLE_BOX_RESULT_NOTIFY
table BundleResult
{
	rId : short;
	paidGold : long;
	rewardGold : long;
	paidDia : int;
	rewardDia : int;

	items : [ClientItemStackInfo] (required);
}

table BundleBoxResultNotify
{
	bundles : [BundleResult] (required);
}

// ARENA_INFO_REQUEST
table ArenaInfoRequest
{

}


table ArenaInfo
{
	turnNo : int;
	paidTurnNo : int;
	consecutiveVictories : short;
	curScore : long;
	level : int;
	grade : int;
	accumTotalScore : long;
	tryCount : short;
	rank : int;
	rankerCount : int;
	rewardIndex : byte;
	todayPlayCount : int;
}

/// ----- 레이드 ---------------------
/// RAID_JOIN_FAILED_NOTIFY
table RaidJoinFailNotify
{
	errCode : int;
}

/// RAID_INFO_REQUEST
table RaidInfoRequest
{
}

/// RAID_INFO_RESPONSE
table RaidInfoResponse
{
	enterCount : int;
}

/// RAID_RANDOM_REWARD_PC_NOTIFY
table RaidRandomRewardPcNotify
{
	rewardId : int;
	pcRank : int;		// 보상을 받게 된 Pc의 기여도 등수
	pcName : string;	// 보상을 받게 된 Pc의 이름
}

/// PC_LOGIN_DATA_COMPLETE_NOTIFY
table PcLoginDataCompleteNotify
{
}

// PC_LOGIN_DATA_START_NOTIFY
table PcLoginDataStartNotify
{
}



// ARENA_INFO_RESPONSE
table ArenaInfoResponse
{
	result : int;
	arenaInfo : ArenaInfo;
}

table CrystalSlot
{
	positionIdx : int;
	isOpen : bool;
	slotType : int;
}

/// DIMENSION_CRYSTAL_INSERT_REQUEST
table DimensionCrystalInsertRequest
{
	sourceItemObjectId : long;
	materialItemObjectId : long;
	slotIndex : byte;
}

/// DIMENSION_CRYSTAL_INSERT_RESPONSE
table DimensionCrystalInsertResponse
{
	sourceItemObjectId : long;
	materialObjectId : long;
	positionIdx : int;
	result : int;
}

/// DIMENSION_CRYSTAL_REMOVE_REQUEST
table DimensionCrystalRemoveRequest
{
	sourceItemObjectId : long;
	materialItemObjectId : long;
	positionIdx : int;
}

/// DIMENSION_CRYSTAL_REMOVE_RESPONSE
table DimensionCrystalRemoveResponse
{
	sourceItemObjectid : long;
	materialItemObjectId : long;
	result : int;
}

/// DIMENSION_CRYSTAL_LEVELUP_REQUEST
table DimensionCrystalLevelUpRequest
{
	sourceItemObjectId : long;
	materialItemObjectIds : [long] (required);
}

/// DIMENISON_CRYSTAL_LEVELUP_RESPONSE
table DimensionCrystalLevelUpResponse
{
	sourceItemObjectId : long;
	level : short;
	enchantExp : int;
	result : int;
}

/// DIMENSION_CRYSTAL_UPGRADE_REQUEST
table DimensionCrystalUpgradeRequest
{
	sourceItemObjectId : long;
}

/// DIMENSION_CRYSTAL_UPGRADE_RESPONSE
table DimensionCrystalUpgradeResponse
{
	sourceItemObjectId : long;
	grade : short;
	level : short;
	enchantExp : int;
	result : int;
}					

///----- 보너스_일일 충전 -----------------
/// BONUS_DAILY_RECHARGE_MANUAL_REQUEST
table DailyRechargeManualRequest
{
	artifactLevel : short;	// 성물 레벨
}

/// BONUS_DAILY_RECHARGE_MANUAL_RESPONSE
table DailyRechargeManualResponse
{	
	errCode : int;
	invoiceType : short;
	reward : RewardInfo;
}

/// BONUS_DAILY_RECHARGE_INFO_REQUEST 
table BonusDailyRechargeInfoRequest
{
}

/// BONUS_DAILY_RECHARGE_INFO_RESPONSE
table BonusDailyRechargeInfoResponse
{
	isManualRechargable : bool;
}

///----- 무한의 탑 -----------------
enum InfiniteTowerPaidType : int
{
	INFINITE_TOWER_PAID_TYPE_TICKET,
	INFINITE_TOWER_PAID_TYPE_CONTINUE,
	INFINITE_TOWER_PAID_TYPE_MAX
}

table InfiniteTowerInfo
{
	clearedStage : int;			// 클리어한 최대 층	
	isRewardable : bool;		// 오늘 보상을 받을 수 있는가
}

/// INFINITE_TOWER_INFO_REQUEST
table InfiniteTowerInfoRequest
{
}

/// INFINITE_TOWER_INFO_RESPONSE
table InfiniteTowerInfoResponse
{	
	info : InfiniteTowerInfo;
}

/// INFINITE_TOWER_JOIN_REQUEST
table InfiniteTowerJoinRequest
{
	stage : int;
	paidType : InfiniteTowerPaidType;
}

/// INFINITE_TOWER_JOIN_RESPONSE
table InfiniteTowerJoinResponse
{
	errCode : int;
}

/// INFINITE_TOWER_SWEEP_REQUEST
table InfiniteTowerSweepRequest
{
	stage : int;
}

/// INFINITE_TOWER_SWEEP_RESPONSE
table InfiniteTowerSweepResponse
{
	errCode : int;
	reward : RewardInfo;
}

/// INFINITE_TOWER_CLEAR_NOTIFY
table InfiniteTowerClearNotify
{
	stage : int;
	reward : RewardInfo (required);
}

// 상점 목표 달성 
table ShopPurchaseProductMissionInfo
{
	missionId : byte;
	state : byte;		// ShopRewardState
	updateTime : long;	// 상태 변경시간 time_t
}

// 상점 구매 상품 정보
table ShopPurchaseProductInfo
{
	productId : int;		// 구매 상품 id
	purchaseTime : long;	// time_t	(구매를 한 경우 구매한 시간, 효과 만료로 인해 상품 정보가 갱신되면 0 으로 전송)
	expireTime : long;		// time_t	(만료가 없는 상품의 경우는 0 으로 전송)
	purchaseCount : byte;	// 구매 상품 누적횟수 (중복 구매 관련 정보)
	bonusPoint : short;		// 보너스 카운트
	promotionPoint : int;	// 추가 보상 포인트 (누적구매)

	missions : [ShopPurchaseProductMissionInfo] (required);	// 상품내 미션 정보
}

/// SHOP_PURCHASE_PRODUCT_REQUEST
table ShopPurchaseProductRequest
{
	productId : int;		// 구매 요청할 상품 ID
	giftPcDbId : long;		// 선물할 길드원 pcDbId(선물이 아니라면 반드시 0 으로 세팅바랍니다)
	buyCount : ubyte;		// 구매 수량
}

table EffectGrade
{
	itemId : int; 		// 아이템 아이디
	rewardGrade : int;	// 상품 소환 연출용
}

/// SHOP_PURCHASE_PRODUCT_RESPONSE
table ShopPurchaseProductResponse
{
	productId : int;		// 구매 요청한 상품 ID
	giftPcDbId : long;		// 선물할 길드원 pcDbId(선물이 아니라면 반드시 0 으로 세팅됩니다.)
	error : int;			// 성공 OK, Else 실패

	productInfo	: ShopPurchaseProductInfo;	// 성공한 상품 내용 전송
	reward : MailRewardInfo;				// 메일로 전송된 보상 정보 (성공시에만 세팅됩니다.)
	giftPcName : string;					// 선물받은 길드원 캐릭명(giftPcDbId 이 0 이 아닌 경우)

	effectGrade : [EffectGrade];			// 상품 소환 연출용
}

/// SHOP_PURCHASE_PRODUCT_REWARD_REQUEST
table ShopPurchaseProductRewardRequest
{
	productId : int;		// 상품 ID
	missionId : short;		// 패키지내 미션 ID
}

/// SHOP_PURCHASE_PRODUCT_REWARD_RESPONSE
table ShopPurchaseProductRewardResponse
{
	productId : int;		// 상품 ID
	missionId : short;		// 패키지내 보상 id
	error : int;			// 성공 OK, else 실패

	reward : MailRewardInfo;// 메일로 전송된 보상 정보 (성공시에만 세팅됩니다.)
}

/// SHOP_PURCHASE_PRODUCT_BONUS_REWARD_REQUEST
table ShopPurchaseProductBonusRewardRequest
{
	productId : int;		// 상품 ID
}

/// SHOP_PURCHASE_PRODUCT_BONUS_REWARD_RESPONSE
table ShopPurchaseProductBonusRewardResponse
{
	productId : int;		// 상품 ID
	error : int;			// 성공 OK, else 실패
	bounsPoint : byte;		// 성공시 사용된 보너스 포인트 (단순 출력용. 데이터 갱신용은 따로 전송됩니다. 사용처가 없으면 사용하지 않으시면됩니다)

	reward : MailRewardInfo;// 메일로 전송된 보상 정보 (성공시에만 세팅됩니다.)
}

/// SHOP_PURCHASE_PRODUCT_PROMOTION_REWARD_REQUEST
table ShopPurchaseProductPromotionRewardRequest
{
	productId : int;		// 상품 ID
}

/// SHOP_PURCHASE_PRODUCT_PROMOTION_REWARD_RESPONSE
table ShopPurchaseProductPromotionRewardResponse
{
	productId : int;		// 상품 ID
	error : int;			// 성공 OK, else 실패
}

/// SHOP_PURCHASE_PRODUCT_LIST_NOTIFY
table ShopPurchaseProductListNotify
{
	products : [ShopPurchaseProductInfo] (required);	// 상품 내용 전송
}

/// SHOP_PURCHASE_PRODUCT_EXPIRE_DATE_NOTIFY
table ShopPurchaseProductExpireDateNotify
{
	productIds : [int] (required);			// 효과 만료 리스트
	purchaseLimitIds : [int] (required);	// 구매 제한 만료 리스트
}

// 상품 정보 미션 변경 정보
table ShopPurchaseProductMissionUpdateInfo
{
	productId : int;		// 상품 id

	missions : [ShopPurchaseProductMissionInfo] (required);	// 변경된 미션 정보 리스트 
}

/// SHOP_PURCHASE_PRODUCT_MISSION_UPDATE_NOTIFY
table ShopPurchaseProductMissionUpdateNotify
{
	infos : [ShopPurchaseProductMissionUpdateInfo] (required); // 변경된 상품 패키지 미션 정보 리스트
}

/// SHOP_PURCHASE_PRODUCT_BONUS_POINT_UPDATE_NOTIFY
table ShopPurchaseProductBonusPointUpdateNotify
{
	productId : int;	// 상품 ID
	bonusPoint : short;	// 변경된 보너스 포인트 (현재값)
}

/// SHOP_PURCHASE_PRODUCT_PROMOTION_UPDATE_NOTIFY
table ShopPurchaseProductPromotionUpdateNotify
{
	productId : int;		// 상품 ID
	promotionPoint : int;	// 변경된 추가보상 포인트 (현재값)
}

//  RANK_GET_PC_DEATIL_INFO_REQUEST
table RankGetPcDetailInfoRequest
{
	pcDbId : long;
}

// REDIS_GET_MY_RANK_REQUEST
table RedisGetMyRankRequest
{
	rankType : byte;
}

// REDIS_GET_MY_RANK_RESPONSE
table RedisGetMyRankResponse
{
	myRank : PcRankInfo;
	result : int;
}


// REDIS_GET_RANGE_RANK_INFO_REQUEST
table RedisGetRangeRankInfoRequest
{
	rankType : byte;
	beginIdx : long;
	endIdx : long;
}


// REDIS_GET_RANGE_RANK_INFO_RESPONSE
table RedisGetRangeRankInfoResponse
{
	rankInfos : [PcRankInfo];
}

///----- 출석체크 -----------------
table AttendanceInfo
{
	boardId : short;		// 출석판 id
	stampCount : short;		// 출석판에 찍힌 도장개수
	isStampable : bool;		// 오늘 도장찍을수있는가
}	
	
/// ATTENDANCE_INFO_REQUEST	
table AttendanceInfoRequest
{
}	

/// ATTENDANCE_INFO_RESPONSE
table AttendanceInfoResponse
{
	data : AttendanceInfo;
}

/// ATTENDANCE_STAMP_REQUEST
table AttendanceStampRequest
{
	boardId : short;
}

/// ATTENDANCE_STAMP_RESPONSE
table AttendanceStampResponse
{
	errCode : ErrorCode;
	data : AttendanceInfo;
}

///----- 접속보상 -----------------
/// ACCESS_TIME_INFO_REQUEST
table AccessTimeInfoRequest
{
}

/// ACCESS_TIME_INFO_RESPONSE
table AccessTimeInfoResponse
{
	accessMinute : short;	// 오늘 접속시간
	maxRewardedId : short;	// 보상받은 아이디 max값
}
	
/// ACCESS_TIME_REWARD_REQUEST
table AccessTimeRewardRequest
{
	accessMinute : short;	// 오늘 접속시간(검증용)
}	

/// ACCESS_TIME_REWARD_RESPONSE
table AccessTimeRewardResponse
{
	errCode : ErrorCode;
	maxRewardedId : short;
	rewardInfo : [RewardInfo];	
}
	
///----- 휴식보상 -----------------
enum RestPaidType : short
{
	REST_PAID_TYPE_FREE,	// 무료 보상 수령
	REST_PAID_TYPE_PAID,	// 유료 보상 수령(다이아사용)
	REST_PAID_TYPE_MAX
}	
	
/// REST_TIME_INFO_REQUEST
table RestTimeInfoRequest
{
}

/// REST_TIME_INFO_RESPONSE
table RestTimeInfoResponse
{
	point : short;	// 휴식 점수
}

/// REST_TIME_REWARD_REQUEST
table RestTimeRewardRequest
{
	paidType : RestPaidType;
	rewardType : short;
}

/// REST_TIME_REWARD_RESPONSE
table RestTimeRewardResponse
{
	errCode : ErrorCode;
	point : short;
	rewardInfo : RewardInfo;
}


/// ACQUIRE_CONTRIBUTION_NOTIFY
table AcquireContributionNotify
{
	acqPoint : double;
	targetObjId : long;
	myContributionInfo : EventContribution (required);
	acqType : short;
}


/// 길드 탈퇴 사유
enum GuildLeaveReason : byte
{
	/// 자기가 탈퇴함
	GuildLeaveReason_Leave,

	/// 강퇴 다함
	GuildLeaveReason_Kick,
}

/// #길드 기본 정보
/// 길드 목록에 보여주기 위한 용도
/// 가입하지 않은 길드 정보 확인용이다
table GuildBasicInfo
{
	id : int;
	name : string (required);
	level : short;

	/// LeanData::eGuild_joinType
	joinType : byte;
	crest : GuildCrest (required);
	memberCount : short;

	/// 군주 포인트
	monarchPoint : long;
	rank : int;
}

/// 길드 상세 보기 정보
/// 가입하지 않은 길드 정보 확인용이다
table GuildDetailInfo
{
	basicInfo : GuildBasicInfo (required);

	leaderName : string (required);
	introMessage : string (required);

	joinLimitLevel : short;

	/// 전 시즌 랭킹 (0이면 이전 시즌 순위 없음)
	prevRank : int;

	combatPowerAvg : int;
	createTimeUtc : long;

	// 정보를 요청한 유저가 가입 신청을 했는지 여부
	joinRequested : bool;
}

/// 길드 랭킹 정보
table GuildRankingInfo
{	
	id : int;
	name : string (required);
	crest : GuildCrest (required);

	/// 순위 (1 base)
	rank : int;

	/// 총사령관
	leaderName : string (required);
	leaderLevel : short;
	leaderInfluenceTier : short;
	leaderInfluenceLevel : short;

	/// 레벨 / 전투력 / 군주포인트 / 군주길드 횟수
	score : long;
}

/// #길드 정보
/// 유저에게 내 길드 정보를 보여주기 위한 용도
table GuildInfo
{
	id : int;
	name : string (required);
	level : short;
	exp : int;
	/// LeanData::eGuild_joinType
	joinType : byte;				// 삭제 예정
	joinLimitLevel : short;			// 삭제 예정
	crest : GuildCrest (required);

	leaderName : string (required);
	introMessage : string (required);
	noticeMessage : string (required);

	/// 현재 랭킹
	rank : int;

	memberCount : int;
	combatPowerAvg : int;
	monarchPoint : long;

	/// 길드 생성 시간. 다음과 같이 변환해서 쓰세요
	/// new DateTime(ticks, DateTimeKind.Utc).ToLocalTime(); // local time
	createTimeUtc : long;

	/// 길드던전 랭킹
	dungeonRank : int;
	dungeonScore : long;

	// 길드 멤버는 수가 많으니 이 테이블에 포함시키지 않는다
}

/// 로그인 시 처음 한번 받는 길드 정보
table GuildLoginInfo
{
	id : int;

	/// 출석 가능한 시간
	attendAvaliableTimeUtc : long;

	/// 가입/창설 가능한 시간
	joinAvaliableTimeUtc : long;

	/// 가입 요청 개수
	applicantCount : int;
}

/// #길드 멤버 정보
table GuildMemberInfo
{
	pcDbId : long;
	name : string (required);
	grade : byte; // eCommon_GuildMemberType
	level : short;
	classType : int;
	combatPower : int;
	monarchPoint : int;

	/// 접속 여부
	online : bool;
	
	/// online == true 면 0
	lastLoginTimeUtc : long; // 어떤값으로 할지 고려 필요

	accumDonate : int;
	attendCount : int;
}

/// #길드 요청자 정보
table GuildJoinRequestInfo
{
	pcDbId : long;
	name : string (required);
	level : short;
	classType : int;
	combatPower : int;
	monarchPoint : int;

	/// 가입 요청 시간
	requestTimeUtc : long;
	lastLoginTimeUtc : long;

	/// 접속 여부
	online : bool;
}

/// GUILD_INFO_NOTIFY
table GuildInfoNotify
{
	guildInfo : GuildLoginInfo (required);
}

/// GUILD_NOT_IMPL_NOTIFY
table GuildNotImplNotify
{
}

table GuildCrest
{
	frame : short;
	symbol : short;
	color : short;
}

/// GUILD_CREATE_REQUEST
table GuildCreateRequest
{
	name : string (required);

	/// LeanData::eGuild_joinType
	joinType : byte;

	/// 가입 제한 레벨
	joinLimitLevel : short;

	/// 길드 문장
	crest : GuildCrest (required);

	/// 소개글
	intro : string; // @nr

	/// 공지글
	notice : string; // @nr
}

/// GUILD_CREATE_RESPONSE
table GuildCreateResponse
{
	errorCode : ErrorCode;

	// 생성된 길드 정보는 GUILD_INFO_NOTIFY 패킷으로 전달됨
}

/// GUILD_CHECK_NAME_REQUEST
table GuildCheckNameRequest
{
	guildName : string (required);
}

/// GUILD_CHECK_NAME_RESPONSE
table GuildCheckNameResponse
{
	errorCode : ErrorCode;
}

/// GUILD_DESTROY_REQUEST
table GuildDestroyRequest
{
	// 해산 실수 방지용
	userInput : string (required);
}

/// GUILD_DESTROY_RESPONSE
table GuildDestroyResponse
{
	errorCode : ErrorCode;

	// 가입 / 창설 가능한 시간
	joinAvaliableTimeUtc : long;
}

/// GUILD_INFO_REQUEST
table GuildInfoRequest
{
}

/// GUILD_INFO_RESPONSE
table GuildInfoResponse
{
	guildInfo : GuildInfo;
	needNameChange : bool;
	/// 시즌 종료 시간. 다음과 같이 변환해서 쓰세요
	/// new DateTime(ticks, DateTimeKind.Utc).ToLocalTime(); // local time
	seasonEndDateTimeUtc : long;
}

/// GUILD_FIND_REQUEST
table GuildFindRequest
{
	guildName : string (required);
}

/// GUILD_FIND_RESPONSE
table GuildFindResponse
{
	errorCode : ErrorCode;

	/// 실패면 없음
	guildInfos : [GuildBasicInfo];
}

/// GUILD_JOIN_REQ_REQUEST
table GuildJoinReqRequest
{
	guildId : int;
}

/// GUILD_JOIN_REQ_RESPONSE
table GuildJoinReqResponse
{
	errorCode : ErrorCode;
}

/// GUILD_APPLICANT_UPDATE_NOTIFY
table GuildApplicantUpdateNotify
{
	joinRequestCount : int;
}

/// GUILD_NEW_MEMBER_NOTIFY
table GuildNewMemberNotify
{
	member : GuildMemberInfo (required);
}

/// GUILD_LEAVE_REQUEST
table GuildLeaveRequest
{
}

/// GUILD_LEAVE_RESPONSE
table GuildLeaveResponse
{
	errorCode : ErrorCode;
}

/// GUILD_JOIN_NOTIFY
table GuildJoinNotify
{
	guildId : int;
}

/// GUILD_LEAVE_NOTIFY
table GuildLeaveNotify
{
	reason : GuildLeaveReason;

	// 가입 / 창설 가능한 시간
	joinAvaliableTimeUtc : long;
}

/// GUILD_LEAVE_MEMBER_NOTIFY
table GuildLeaveMemberNotify
{
	pcDbId : long;
}

/// 길드원 목록 정렬 타입
enum GuildMemberListSortType : byte
{
	/// 계급
	GuildMemberListSortType_Grade = 0,

	/// 레벨
	GuildMemberListSortType_Level = 1,

	/// 군주포인트
	GuildMemberListSortType_MonarchPoint = 2,

	/// 전투력
	GuildMemberListSortType_CombatPower = 3,

	/// 최근 접속
	GuildMemberListSortType_RecentLogin = 4,

	/// 누적 기부 금액
	GuildMemberListSortType_Donate = 5,

	/// 출석 횟수
	GuildMemberListSortType_AttendCount = 6,
}

/// 길드원 목록 접속상태 구분
enum GuildMemberListLoginStatus : byte
{
	GuildMemberListLoginStatus_All = 0,
	GuildMemberListLoginStatus_Online = 1,
	GuildMemberListLoginStatus_Offline = 2,
}

/// GUILD_MEMBER_LIST_REQUEST
table GuildMemberListRequest
{
	page : int;
	sortType : GuildMemberListSortType;
	ascending : bool;

	/// LeanData::eCommon_Pc_classType 값 목록
	/// 전체일 경우 empty
	classTypes : [short] (required);

	/// LeanData::eCommon_GuildMemberType 값 목록
	/// 전체일 경우 empty
	gradeTypes : [byte] (required);

	loginStatus : GuildMemberListLoginStatus;
}

/// GUILD_MEMBER_LIST_RESPONSE
table GuildMemberListResponse
{
	errorCode : ErrorCode;
	members : [GuildMemberInfo];
	page : int;
	pageTotal : int;
}

/// GUILD_ATTEND_REQUEST
table GuildAttendRequest
{
}

/// GUILD_ATTEND_RESPONSE
table GuildAttendResponse
{
	errorCode : ErrorCode;

	/// 다음 출석 가능 시간
	nextAttendAvaliableTimeUtc : long;

	/// 결과 레벨/경험치
	level : short;
	exp : int;
}

/// GUILD_DONATE_REQUEST
table GuildDonateRequest
{
	prism : int;
}

/// GUILD_DONATE_RESPONSE
table GuildDonateResponse
{
	errorCode : ErrorCode;

	/// Pc가 획득한 길드 주화
	gainGuildCoin : int;

	/// 결과 레벨/경험치
	level : short;
	exp : int;
}

enum GuildRankSortType : byte
{
	/// 클라이언트 요청으로 UI 순서와 동일하게 맞춤
	/// 순서 변경시 확인이 필요함

	GuildRankSortType_Level = 0,
	GuildRankSortType_CombatPower = 1,
	GuildRankSortType_MonarchPoint = 2,
	GuildRankSortType_KingGuild = 3,
	GuildRankSortType_DungeonScore = 4,
	GuildRankSortType_PvPPoint = 5,
}

/// GUILD_RANKING_LIST_REQUEST
table GuildRankingListRequest
{
	/// zero-based
	page : int;
	sortType : GuildRankSortType;
}

/// GUILD_RANKING_LIST_RESPONSE
table GuildRankingListResponse
{
	errorCode : ErrorCode;
	guildInfos : [GuildRankingInfo];
	page : int;

	/// 내 길드의 정보
	myGuildInfo : GuildRankingInfo;
}

enum GuildListSortType : byte
{
	/// 랭킹
	GuildListSortType_Rank = 0,
	GuildListSortType_Level = 1,
	GuildListSortType_MemberCount = 2,
}

/// GUILD_LIST_REQUEST
table GuildListRequest
{
	page : int;
	sortType : GuildListSortType;
	onlyFreeJoin : bool;
	ascending : bool;
}

/// GUILD_LIST_RESPONSE
table GuildListResponse
{
	errorCode : ErrorCode;
	guildInfos : [GuildBasicInfo];
	page : int;
	pageTotal : int;
}

/// GUILD_DETAIL_INFO_REQUEST
table GuildDetailInfoRequest
{
	guildName : string (required);
}

/// GUILD_DETAIL_INFO_RESPONSE
table GuildDetailInfoResponse
{
	errorCode : ErrorCode;
	detailInfo : GuildDetailInfo;
}

/// GUILD_MY_JOIN_REQ_LIST_REQUEST
table GuildMyJoinReqListRequest
{
}

/// GUILD_MY_JOIN_REQ_LIST_RESPONSE
table GuildMyJoinReqListResponse
{
	errorCode : ErrorCode;
	guildInfos : [GuildBasicInfo];
}

/// GUILD_REMOVE_JOIN_REQ_REQUEST
table GuildRemoveJoinReqRequest
{
	guildIds : [int] (required);
}

/// GUILD_REMOVE_JOIN_REQ_RESPONSE
table GuildRemoveJoinReqResponse
{
	errorCode : ErrorCode;
}

/// GUILD_JOIN_REQ_LIST_REQUEST
table GuildJoinReqListRequest
{
	page : int;
	sortType : GuildMemberListSortType;
	ascending : bool;

	/// LeanData::eCommon_Pc_classType 값 목록
	/// 전체일 경우 empty
	classTypes : [short] (required);

	loginStatus : GuildMemberListLoginStatus;
}

/// GUILD_JOIN_REQ_LIST_RESPONSE
table GuildJoinReqListResponse
{
	errorCode : ErrorCode;
	infos : [GuildJoinRequestInfo];
	page : int;
	pageTotal : int;
}

/// GUILD_ACCEPT_JOIN_REQ_REQUEST
table GuildAcceptJoinReqRequest
{
	pcDbIds : [long] (required);
}

/// GUILD_ACCEPT_JOIN_REQ_RESPONSE,
table GuildAcceptJoinReqResponse
{
	errorCode : ErrorCode;
}

/// GUILD_REJECT_JOIN_REQ_REQUEST
table GuildRejectJoinReqRequest
{
	pcDbIds : [long] (required);
}

/// GUILD_REJECT_JOIN_REQ_RESPONSE,
table GuildRejectJoinReqResponse
{
	errorCode : ErrorCode;
}

/// GUILD_CHANGE_JOIN_CONDITION_REQUEST
table GuildChangeJoinConditionRequest
{
	/// 둘 중 하나만 바꾼다면 다른 하나는 기존값 그대로 줄 것
	/// LeanData::eGuild_joinType
	joinType : byte;
	joinLimitLevel : short;
}

/// GUILD_CHANGE_JOIN_CONDITION_RESPONSE
table GuildChangeJoinConditionResponse
{
	errorCode : ErrorCode;
}


enum GuildMsgType : byte
{
	// 소개문
	GuildMsgType_Intro,

	// 공지
	GuildMsgType_Notice,
}

/// GUILD_CHANGE_MSG_REQUEST
table GuildChangeMsgRequest
{
	type : GuildMsgType;
	msg : string (required);
}

/// GUILD_CHANGE_MSG_RESPONSE
table GuildChangeMsgResponse
{
	errorCode : ErrorCode;
	type : GuildMsgType;
}

/// GUILD_KICK_MEMBER_REQUEST
table GuildKickMemberRequest
{
	pcDbIds : [long] (required);
}

/// GUILD_KICK_MEMBER_RESPONSE
table GuildKickMemberResponse
{
	errorCode : ErrorCode;
}

/// GUILD_LEVEL_UP_NOTIFY
table GuildLevelUpNotify
{
	level : short;
	exp : int;
}

/// GUILD_CHANGE_MEMBER_GRADE_REQUEST
table GuildChangeMemberGradeRequest
{
	pcDbIds : [long] (required);
	grade : byte; // eCommon_GuildMemberType
}

/// GUILD_CHANGE_MEMBER_GRADE_RESPONSE
table GuildChangeMemberGradeResponse
{
	errorCode : ErrorCode;
	changedPcDbId : [long];
}

/// GUILD_CHANGE_MEMBER_GRADE_NOTIFY
table GuildChangeMemberGradeNotify
{
	prevGrade : byte; // eCommon_GuildMemberType
	newGrade : byte; // eCommon_GuildMemberType
}

/// GUILD_HISTORY_REQUEST
table GuildHistoryRequest
{
	/// LeanData::eGuild_historyType
	category : short;

	/// zero-based
	page : short;
}

table GuildHistoryItem
{
	/// LeanData::eGuild_historyContents
	type : short;

	/// UTC
	createTime : long;

	str1 : string; // @nr
	str2 : string; // @nr
	int1 : int;
	int2 : int;
	int3 : int;
}

/// GUILD_HISTORY_RESPONSE
table GuildHistoryResponse
{
	items : [GuildHistoryItem];

	/// zero-based
	page : int;
}

/// GUILD_BUFF_PURCHASE_REQUEST
table GuildBuffPurchaseRequest
{
	buffId : int;
}

/// GUILD_BUFF_PURCHASE_RESPONSE
table GuildBuffPurchaseResponse
{
	errorCode : ErrorCode;
}

/// GUILD_CHANGE_LEADER_REQUEST
table GuildChangeLeaderRequest
{
	pcDbId : long;
}

/// GUILD_CHANGE_LEADER_RESPONSE
table GuildChangeLeaderResponse
{
	errorCode : ErrorCode;
}

/// GUILD_CANDIDATE_LEADER_LIST_REQUEST
table GuildCandidateLeaderListRequest
{
}

/// GUILD_CANDIDATE_LEADER_LIST_RESPONSE
table GuildCandidateLeaderListResponse
{
	errorCode : ErrorCode;
	members : [GuildMemberInfo];
}

/// GUILD_CHANGE_CREST_REQUEST
table GuildChangeCrestRequest
{
	crest : GuildCrest (required);
}

/// GUILD_CHANGE_CREST_RESPONSE
table GuildChangeCrestResponse
{
	errorCode : ErrorCode;
}

table GuildShareSettingData
{
	grade : byte; // eCommon_GuildMemberType

	/// 0~100
	/// 총 합이 100을 넘기면 안됨
	percent : byte;

	/// 현재 멤버 수
	memberCount : short;
}

/// GUILD_SHARE_SETTING_INFO_REQUEST
table GuildShareSettingInfoRequest
{
}

/// GUILD_SHARE_SETTING_INFO_RESPONSE
table GuildShareSettingInfoResponse
{
	errorCode : ErrorCode;
	settingDatas : [GuildShareSettingData] (required);
}

/// GUILD_SAVE_SHARE_SETTING_REQUEST
table GuildSaveShareSettingRequest
{
	settingDatas : [GuildShareSettingData] (required);
}

/// GUILD_SAVE_SHARE_SETTING_RESPONSE
table GuildSaveShareSettingResponse
{
	errorCode : ErrorCode;
}

/// GUILD_INVITE_MESSAGE_REQUEST
table GuildInviteMessageRequest
{
	invitePcName : string(required);
}

/// GUILD_INVITE_MESSAGE_RESPONSE
table GuildInviteMessageResponse
{
	errorCode : int;
	invitePcName : string(required);
}

/// GUILD_MEMBER_DETAIL_INFO_REQUEST
table GuildMemberDetailInfoRequest
{
	name : string (required);
}

/// GUILD_MEMBER_DETAIL_INFO_RESPONSE
table GuildMemberDetailInfoResponse
{
	errorCode : ErrorCode;
	detailInfo : PcDetailInfo;
}

/// GUILD_REJECT_JOIN_REQ_NOTIFY
table GuildRejectJoinReqNotify
{
	guildId : int;
}

/// GUILD_CHANGE_NAME_REQUEST
table GuildChangeNameRequest
{
	newName : string (required);
}

/// GUILD_CHANGE_NAME_RESPONSE
table GuildChangeNameResponse
{
	errorCode : ErrorCode;
}

/// GUILD_CHANGE_NAME_NOTIFY
table GuildChangeNameNotify
{
	oldName : string (required);
	newName : string (required);
}

/// GUILD_DUNGEON_SCORE_REQUEST
table GuildDungeonScoreRequest
{
}

/// GUILD_DUNGEON_SCORE_RESPONSE
table GuildDungeonScoreResponse
{
	rank : int;
	score : long;
}

/// 길드 통합 랭킹 정보
table GuildUnityRankingInfo
{	
	/// 순위 (1 base)
	rank : int;
	/// 길드명
	name : string (required);
	/// 길드 문양
	crest : GuildCrest (required);
	/// 서버 인덱스
	server : short;
	/// 점수
	score : long;
}

/// GUILD_UNITY_RANKING_LIST_REQUEST
table GuildUnityRankingListRequest
{
	/// zero-based
	page : int;
	sortType : GuildRankSortType;
}

/// GUILD_UNITY_RANKING_LIST_RESPONSE
table GuildUnityRankingListResponse
{
	errorCode : ErrorCode;
	guildInfos : [GuildUnityRankingInfo];
	page : int;

	/// 내 길드의 정보
	myGuildInfo : GuildUnityRankingInfo;
}

table SeasonGuildInfo
{
	name : string (required);
	crest : GuildCrest (required);

	/// 랭킹
	rank : int;

	/// 군주 포인트
	monarchPoint : long;

	/// 지난 시즌 랭킹 (지난 시즌 랭킹이 없으면 0)
	prevRank : int;

	/// 군주 길드 횟수
	leaderGuildCount : int;
}

/// SEASON_CURRENT_INFO_REQUEST
table SeasonCurrentInfoRequest
{
}

/// SEASON_CURRENT_INFO_RESPONSE
table SeasonCurrentInfoResponse
{
	topGuildInfos : [SeasonGuildInfo] (required);

	/// 현재 군주 길드 (nullable)
	leaderGuildInfo : SeasonGuildInfo;

	/// 내 길드 정보 (nullable)
	myGuildInfo : SeasonGuildInfo;

	/// 시즌 종료 시간. 다음과 같이 변환해서 쓰세요
	/// new DateTime(ticks, DateTimeKind.Utc).ToLocalTime(); // local time
	seasonEndDateTimeUtc : long;

	/// pc의 군주포인트 등급
	pcMonarchPointTier : short;
}

/// SEASON_REWARD_INFO_REQUEST
table SeasonRewardInfoRequest
{
}

/// SEASON_REWARD_INFO_RESPONSE
table SeasonRewardInfoResponse
{
	/// 현재 시즌 누적 거래소 수수료
	accumMarketChargeDia : long;
}

/// SEASON_DUNGEON_INFO_REQUEST
table SeasonDungeonInfoRequest
{
}

/// SEASON_DUNGEON_INFO_RESPONSE
table SeasonDungeonInfoResponse
{
	topGuildInfos : [GuildUnityRankingInfo] (required);

	/// 내 길드 정보 (nullable)
	myGuildInfo : GuildUnityRankingInfo;

	/// 시즌 종료 시간. 다음과 같이 변환해서 쓰세요
	/// new DateTime(ticks, DateTimeKind.Utc).ToLocalTime(); // local time
	seasonEndDateTimeUtc : long;
}

table Elixir
{
	type : byte;	// eElixir_ElixirType
	level: ubyte;	// 레벨
	exp : short;	// 경험치
}

/// ELIXIR_LIST_NOTIFY
table ElixirListNotify
{
	elixirs : [Elixir] (required);		// 현재 보유중인 영약 리스트 (액티브 리스트만 전송됩니다)
}

/// ELIXIR_EHCNAHT_REQUEST
table ElixirEnchantRequest
{
	type : byte;			// 강화하고자 하는 영약 타입 (eElixir_ElixirType)
	count: short;			// 강화 횟수
}

/// ELIXIR_EHCNAHT_RESPONSE
table ElixirEnchantResponse
{
	type : byte;			// 강화 시도한 영약 타입 (eElixir_ElixirType)
	error: int;				// 성공시 LeanPacket::OK else 실패
	level : byte;			// 성공시 변경 레벨
	exp : short;			// 성공시 변경 경험치
}

table TerraStone
{
	type : byte;			// 테라스톤 (eTerraStone_Type)
	level: short;
}

/// TERRASTONE_LIST_NOTIFY
table TerraStoneListNotify
{
	terraStones : [TerraStone] (required);		// 현재 보유 중인 테라스톤 (액티브 리스트만 전송됩니다.)
}

/// TERRASTONE_ENCHANT_REQUEST
table TerraStoneEnchantRequest
{
	type : byte;			// 강화 시도하고자하는 테라스톤 타입
	count: short;			// 강화 횟수
}

/// TERRASTONE_ENCHANT_RESPONSE
table TerraStoneEnchantResponse
{
	type : byte;			// 강화 시도한 테라스톤 타입
	error : int;			// OK 는 성공 else 는 실패
	level : short;			// 성공시 변경 레벨
}

table Research
{
	researchId : int;		// 몬스터 연구 타입
	level: ubyte;			// 레벨
}

/// RESEARCH_LIST_NOTIFY
table ResearchListNotify
{
	researches : [Research] (required);
}

/// RESEARCH_ENCHANT_REQUEST
table ResearchEnchant
{
	researchId : int;
	count : short;
}
table ResearchEnchantRequest
{
	list : [ResearchEnchant];	// 몬스터 연구 요청 리스트 (개별 혹은 챕터 별 모두 동일하게 사용한다.)
}
	
/// RESEARCH_ENCHANT_RESPONSE
table ResearchEnchantResponse
{
	list : [ResearchEnchant];	// 요청한 강화 정보
	error: int;					// OK 는 성공 else 는 실패
	update : [Research];		// 성공시 변경된 몬스터 연구 정보
}


table GuardianStar
{
	type : byte;		// LeanData::eGuardianstarType
	grade: ubyte;		// 수호성 등급
	level: ubyte;		// 수호성 레벨
}

/// GUARDIAN_STAR_LIST_NOTIFY
table GuardianStarListNofity
{
	guardianStars : [GuardianStar] (required);
}

/// GUARDIAN_STAR_ENCHANT_REQUEST
table GuardianStarEnchantRequest
{
	type : byte;		// 강화하고자 하는 수호성 타입
	count: short;		// 강화 횟수
}

/// GUARDIAN_STAR_ENCHANT_RESPONSE
table GuardianStarEnchantResponse
{
	type : byte;		// 요청한 수호성 타입
	error: int;			// OK 는 성공 else : 에러
	level : byte;		// 성공후 변경된 수호성 레벨
	grade : byte;		// 성공후 변경된 수호성 등급
}

/// GUARDIAN_STAR_UPGRADE_REQUEST
table GuardianStarUpgradeRequest
{
	type : byte;		// 승급(친화하기) 하고자하는 수호성 타입
}

/// GUARDIAN_STAR_UPGRADE_REQUEST
table GuardianStarUpgradeResponse
{
	type : byte;		// 요청한 승급(친화하기) 수호성타입
	error: int;			// OK 는 성공 else 실패
	grade : byte;		// 승급 성공시 변경된 수호성 등급
}

table PassiveSkill
{
	passiveSkillId : int;
	level : ubyte;
}

/// PASSIVE_SKILL_LIST_NOTIFY
table PassiveSkillListNotify
{
	passiveSkills : [PassiveSkill] (required);
}

/// PASSIVE_SKILL_ENCHANT_REQUEST
table PassiveSkillEnchantRequest
{
	passiveSkillId : int;	// 강화하고자하는 패시브 스킬 id
}

/// PASSIVE_SKILL_ENCHANT_RESPONSE
table PassiveSkillEnchantResponse
{
	passiveSkillId : int;	// 강화하고자하는 패시브 스킬 id
	error : int;			// OK 는 성공 else 실패
	level : byte;			// 강화 성공시 변경된 패시브 스킬 레벨
}

table PotionGrowth
{
	type : byte;		// 포션 타입
	level: short;		// 레벨
	exp : int;		// 현재 경험치
}

/// POTION_GROWTH_LIST_NOTIFY
table PotionGrowthListNotify
{
	potionGrowths : [PotionGrowth] (required);
}

/// POTION_GROWTH_UPDATE_NOTIFY
table PotionGrowthUpdateNotify
{
	update : PotionGrowth (required);
}

/// POTION_GROWTH_LEVEL_UP_REQUEST
table PotionGrowthLevelUpRequest
{
	type : byte;	// 레벨업 하고자하는 포션 타입
}

/// POTION_GROWTH_LEVEL_UP_RESPONSE
table PotionGrowthLevelUpResponse
{
	type : byte;	// 레벨업 요청한 포션 타입
	error : int;	// OK 는 성공 else 실패

	update : PotionGrowth;
}

/// Upc 기본정보
table UpcCacheInfo
{
	objectId : long;
	accountDbId : long;
	pcDbId : long;
	dbSeverId : short;
	pcName : string (required);
	level : short;
	classType : short;
	combatPower : int;
	customizingInfo : CustomizeInfo (required); // 외형정보
	parts : [ItemPartsInfo] (required); // 장비정보
}

/// RVR_STANDBY_INFO_REQUEST
table RVRStandbyOrderRequest
{
     rvrId: int;
}

/// RVR_STANDBY_INFO_RESPONSE
table RVRStandbyOrderResponse
{
    rvrId: int;
    curPlayers : int;
    maxPlayers : int;
    dugout : int;
    standby : int;
    errCode : ErrorCode;
}

/// RVR_JOIN_REQUEST
table RVRJoinRequest
{
     rvrId: int;
}

///  RVR_JOIN_RESPONSE
table RVRJoinResponse
{
    rvrId: int;
    errCode : ErrorCode;
    timeIndex : int;
}

/// RVR_RESERVATION_REQUEST 
table RVRReservationRequest
{
     rvrId: int;
}

///  RVR_RESERVATION_REQUEST 
table RVRReservationResponse
{
    rvrId: int;
    errCode : ErrorCode;
}

/// RVR_CANCEL_REQUEST
table RVRCancelRequest
{
     rvrId: int;
}

///  RVR_CANCEL_REQUEST
table RVRCancelResponse
{
    rvrId: int;
    errCode : ErrorCode;
}

/// RVR_LEAVE_BATTLE_SERVER_REQUEST
table RVRLeaveBattleServerRequest
{
}

/// RVR_LEAVE_BATTLE_SERVER_RESPONSE
table RVRLeaveBattleServerResponse
{
    errCode : ErrorCode;
}

/// RVR_RESERVATION_STATE_NOTIFY
table RVRReservationStateNotify
{
     rvrId : int;
     standBy: int; 
     players : int;
     awaiters : int;
}

/// RVR_PASS_CHECK_STANDBY_ORDER_REQUEST
table RVRPassCheckStandbyOrderRequest
{
     pcDbId : long;
     rvrId: int;
     realmId : int;
     worldId : int;
}

/// RVR_RELAY_CHECK_STANDBY_ORDER_REQUEST
table RVRRelayCheckStandbyOrderRequest
{
     pcDbId : long;
     rvrId: int;
     realmId : int;
     srcServerId: int;
     relayAgentId : int;
     worldId : int;
}

/// RVR_PASS_CHECK_STANDBY_ORDER_RESPONSE 
table RVRPassCheckStandbyOrderResponse
{
     pcDbId : long;
     rvrId : int;
     standBy: int; 
     players : int;
     awaiters : int;
     errCode : ErrorCode;
}

/// RVR_RELAY_CHECK_STANDBY_ORDER_RESPONSE
table RVRRelayCheckStandbyOrderResponse
{
     pcDbId : long;
     rvrId : int;
     standBy: int;
     players : int;
     awaiters : int;
     errCode : ErrorCode;
}

/// RVR_PERMISSION_TO_JOIN_PASS_REQUEST 
table RVRPermissionToJoinPassRequest
{
     pcDbId : long;
     rvrId: int;
     realmId : int;
     standBy: int;
}

/// RVR_PERMISSION_TO_JOIN_RELAY_REQUEST 
table RVRPermissionToJoinRelayRequest
{
     pcDbId : long;
     rvrId: int;
     realmId : int;
     standBy: int;
}

/// RVR_PERMISSION_TO_JOIN_PASS_RESPONSE 
table RVRPermissionToJoinPassResponse
{
     pcDbId : long;
     rvrId: int;
     standBy: int;
     destChId : int;
     errCode : ErrorCode;
     timeIndex : int;
}

/// RVR_PERMISSION_TO_JOIN_RELAY_RESPONSE 
table RVRPermissionToJoinRelayResponse
{
     pcDbId : long;
     rvrId: int;
     standBy: int;
     destChId : int;
     errCode : ErrorCode;
     timeIndex : int;
}

/// RVR_CANCEL_TO_JOIN_PASS_REQUEST
table RVRCancelToJoinPassRequest
{
     pcDbId : long;
     rvrId: int;
     realmId : int;
}

/// RVR_CANCEL_TO_JOIN_RELAY_REQUEST
table RVRCancelToJoinRelayRequest
{
     pcDbId : long;
     rvrId: int;
     realmId : int;
     relayAgentId : int;
}

/// RVR_CANCEL_TO_JOIN_PASS_RESPONSE
table RVRCancelToJoinPassResponse
{
     pcDbId : long;
     rvrId: int;
     errCode : ErrorCode;
}

/// RVR_CANCEL_TO_JOIN_RELAY_RESPONSE
table RVRCancelToJoinRelayResponse
{
     pcDbId : long;
     rvrId: int;
     errCode : ErrorCode;
}


/// RVR_ASK_TO_STANDBY_PASS_REQUEST
table RVRAskToStandbyPassRequest
{
     pcDbId : long;
     rvrId: int;
     realmId : int;
}

/// RVR_ASK_TO_STANDBY_RELAY_REQUEST
table RVRAskToStandbyRelayRequest
{
     pcDbId : long;
     rvrId: int;
     realmId : int;
     relayAgentId : int;
}

/// RVR_ASK_TO_STANDBY_PASS_RESPONSE
table RVRAskToStandbyPassResponse
{
     pcDbId : long;
     rvrId : int;
     standBy: int;
     players : int;
     awaiters : int;
     errCode : ErrorCode;
}

///  RVR_ASK_TO_STANDBY_RELAY_RESPONSE
table RVRAskToStandbyRelayResponse
{
     pcDbId : long;
     rvrId : int;
     standBy: int;
     players : int;
     awaiters : int;
     errCode : ErrorCode;
}

/// RVR_QA_COMMAND_PASS_NOTIFY
table RVRQaCommandPassNotify
{
 	pcDbId : long;
	reamId : int;
	command: int;
	param1: int;
	param2: int;
}

/// RVR_QA_COMMAND_RELAY_NOTIFY 
table RVRQaCommandRelayNotify
{
 	pcDbId : long;
	reamId : int;
	command : int;
	param1: int;
	param2: int;
}

/// RVR_MOVE_CLIENT_QUEST_LOC_REQUEST 
table RVRMoveClientQuestLocRequest
{
	questRvRId : int;
}

/// RVR_MOVE_CLIENT_QUEST_LOC_RESPONSE 
table RVRMoveClientQuestLocResponse
{
	questRvRId : int;
	errCode : ErrorCode;
}

/// RVR_MOVE_BASE_CAMP_REQUEST
table RVRMoveBaseCampRequest
{
	smapId : int;
}

/// RVR_MOVE_BASE_CAMP_RESPONSE
table RVRMoveBaseCampResponse
{
	smapId : int;
	errCode : ErrorCode;
}

/// 목표 대상 정보
table WatchTargetInfo
{
  objectId : long;
  npcId: int;
  curHp : int;
  maxHp: int;
  realmId: int;
}

/// RVR_MAIN_HUD_INFO_NOTIFY
table RVRMainHudInfoNotify
{
   watchTargets:[WatchTargetInfo];   
}

/// RVR_EVENT_TOTAL_REWARD_NOTIFY
table RvrEventTotalRewardNotify
{
	eventSetId : int;
	eventId : int;
	winRealmId: int;
	resultRewardInfos : [ResultRewardInfo] (required);
 	myGuildContribution : BattleRealmGuildContribution (required);
	rankGuildContributions : [BattleRealmGuildContribution] (required);
	orignResultRewardInfos : [ResultRewardInfo] (required);
}

/// NOTICE_NOTIFY
table NoticeNotify
{
   notice : string (required);
}


/// CLIENT_DEBUG_MESSAGE_NOTIFY
table ClientDebugMessageNotify
{
	debugMessage : string (required);
}

table PcClientConfig
{
	pushNotify : bool;
	eventJoinSwitchState : bool;
	gameLanguage : int;
	config : [ubyte] (required);			// 최대 1024
}

/// PC_CLIENT_CONFIG_NOTIFY
table PcClientConfigNotify
{
	clientConfig : PcClientConfig (required);
}

/// PC_CLIENT_CONFIG_SAVE_REQUEST
table PcClientConfigSaveRequest
{
	clientConfig : PcClientConfig (required);
}

/// NOTICE_ITEM_NOTIFY
table NoticeItemNotify
{
	type : short;
	who : string (required);
	itemId : int;
	grade : short;
	tier : short;
	where : short;		// smapid
	transcendLevel : short;	// 초월레벨
}

/// NOTICE_USER_NOTIFY
table NoticeUserNotify
{
	type : short;
	condition : short;
	who : string (required);
	param1 : short;
	param2 : short;
}

/// NOTICE_SHOP_PURCHASE_NOTIFY
table NoticeShopPurchaseNotify
{
	who : string (required);
	guildName : string (required);
	guildMemberGrade : byte;
	productId : int;
}

/// NOTICE_PET_NOTIFY
table NoticePetNotify
{
	type : short;
	who : string (required);
	petGrade : short;
	petLookId :int;
}

/// RVR_BATTLE_FIELD_EVENT_START_NOTIFY  
table RVRBattleFieldEventStartNotify
{
	remainSec : int;
}

/// RVR_BATTLE_FIELD_EVENT_END_NOTIFY
table RVRBattleFieldEventEndNotify
{
	remainSec : int;
}

/// RVR_BATTLE_FIELD_CLOSE_NOTIFY
table RVRBattleFieldCloseNotify
{
	remainSec : int;
}

/// RVR_BATTLE_FILED_TIME_INFO_REQUEST
table RVRBattleFieldTimeInfoRequest
{
}

/// RVR_BATTLE_FILED_TIME_INFO_NOTIFY
table RVRBattleFieldTimeInfoNotify
{
	freeRemainSec : int;
	paidRemainSec : int;
}

/// RVR_BATTLE_FILED_TIME_INFO_RESPONSE
table RVRBattleFieldTimeInfoResponse
{
	freeRemainSec : int;
	paidRemainSec : int;
}

/// RVR_BATTLE_FILED_TIME_EXPIRED_NOTIFY
table RVRBattleFieldTimeExpiredNotify
{
}

/// RVR_BATTLE_FILED_FREE_TIME_EXPIRED_NOTIFY
table RVRBattleFieldFreeTimeExpiredNotify
{
}

/// RVR_BATTLE_FILED_REMAIN_TIME_NOTIFY
table RVRBattleFieldRemainTimeNotify
{
	remainSec : int;
}

/// RVR_BATTLE_FILED_PK_NOTIFY
table RVRBattleFieldPKNotify
{
	killerObjectId : long;
	killedObjectId : long;
	killerWorldId : short;
	killedWorldId : short;
}

/// RVR_BATTLE_FIELD_SHORT_TERM_MAX_NOTIFY
table RVRBattleFieldShortTermMaxNotify
{
	shortTermStepId : int;
}

/// RVR_BATTLE_FIELD_OTHER_PC_SHORT_TERM_MAX_NOTIFY
table RVRBattleFieldOtherPcShortTermMaxNotify
{
	pcName : string;
	pcIff : int;
	pcClassType : int; 
	shortTermStepId : int;
}

/// ARENA_REWARD_REQUEST
table ArenaRewardRequest
{

}

/// ARENA_REWARD_RESPONSE
table ArenaRewardResponse
{
	result : int;
	remainTryCount : short;
}

/// CHANGE_REACTION_IMMUNE_INFO_NOTIFY
table ChangeReactionImmuneInfoNotify
{
	objectId : long;
	curGage : int;
	isImmune : bool;
	serverFlowedImmunTime : int;
}

/// ARENA_EXIT_REQUEST
table ArenaExitRequest
{
	doStay : bool;
}

/// PUBLIC_KEY_NOTIFY
table PublicKeyNotify
{
	publicKey : [ubyte] (required);
}

///
table CryptKeyPair
{
	clientKey : [ubyte] (required);
	serverKey : [ubyte] (required);
	clientKeyNonce : [ubyte] (required);
	serverKeyNonce : [ubyte] (required);
}

/// CRYPT_KEY_NOTIFY
table CryptKeyNotify
{
	cryptKeyPair : CryptKeyPair (required);
}

// 전쟁필드 이벤트 상태
enum BattleFieldEventStatus : short
{
	BATTLE_FIELD_EVENT_STATUS_NONE = 0,		// 없음
	BATTLE_FIELD_EVENT_STATUS_READY,		// 대기중
	BATTLE_FIELD_EVENT_STATUS_RUNNING		// 진행중
}

// 전쟁필드의 점령전(이벤트) 관리정보
table BattleFieldEventInfo
{
	status : BattleFieldEventStatus;
	// status가 ready라면 시작까지 남은시간
	// status가 running이라면 시작 후 경과한 시간
	eventTimeSec : int;
	occupyingRealmId : int;
	occupyingGuildId : int;
	occupyingGuildName : string (required);
	occupyingGuildCrest : GuildCrest (required);
	occupyingWorldId : short;
}

// 렐름별 참여자 수
table BattleFieldPlayerPerRealm
{
	realmId : int;
	playerCount : int;
}

// 배틀필드 채널 정보
table BattleFieldChannelInfo
{
	rvrId : int;
	openState : bool;
	eventInfo : BattleFieldEventInfo (required);
	// 각 렐름별 유저 수
	playerPerRealm : [BattleFieldPlayerPerRealm] (required);
}

// RVR별 플레이중인 같은 길드원 수
table BattleFieldGuildPlayerPerRVR
{
	rvrId : int;
	guildMemberCount : int;
}

// pc별 추가정보
table BattleFieldPcInfo
{
	// 내가 예약한 rvrID
	reservedRvrId : int; 
	// 각 rvr별 플레이하고 있는 내 길드원 수
	guildPlayerPerRVRs : [BattleFieldGuildPlayerPerRVR] (required);
}

/// RVR_BATTLE_FIELD_REMAIN_TIME_REQUEST
table RVRBattleFieldRemainTimeRequest
{
}

/// RVR_BATTLE_FIELD_REMAIN_TIME_RESPONSE
table RVRBattleFieldRemainTimeResponse
{
	status : BattleFieldEventStatus;
	// 전쟁필드 종료까지 남은시간
	battleFieldRemainSec : int; 		
}

/// RVR_BATTLE_FIELD_INFO_REQUEST
table RVRBattleFieldInfoRequest
{
	rvrId : int;
}

/// RVR_BATTLE_FIELD_INFO_RESPONSE
table RVRBattleFieldInfoResponse
{
	rvrId : int;
	info : BattleFieldChannelInfo;
}

/// RVR_BATTLE_FIELD_ALL_INFOS_REQUEST
table RVRBattleFieldAllInfosRequest
{
}

/// RVR_BATTLE_FIELD_ALL_INFOS_RESPONSE
table RVRBattleFieldAllInfosResponse
{
	// 전쟁필드 rvr 정보(상태, 이벤트정보)
	channelInfos : [BattleFieldChannelInfo];
	// 그 외 pc관련정보들(예약한 rvrId, 플레이중인길드원수)
	pcInfo : BattleFieldPcInfo;
}

/// ArenaStateType
enum ArenaStateType : int
{
	NOTHING = 0,
	PREPARE = 1, // 입장이 가능한 상태, 목록을 받은 상태
	READY = 2,   // 입장 후 대기상태
	PLAYING = 3, // 진행 
	END = 4,     // 종료 상태
}

/// ARENA_STATE_NOTIFY
table ArenaStateNotify
{
	state : ArenaStateType;
	elapsedTime : long;
	addBounsTime: long;
}

/// ARENA_MEMBER_LIST_REQUEST
table ArenaMemberListRequest
{
	objectId : long;
	pcDbId : long;
	myClassType : short;
	excludes : [long] (required);
	team_minSearchRange : int;
	team_maxSearchRange : int;
	teamA : ArenaTeamClass (required);
	teamB : ArenaTeamClass (required);
}

/// ARENA_MEMBER_LIST_RESPONSE
table ArenaMemberListResponse
{
	result : int;
	objectId : long;
	teamA : [ArenaMemberBasic];
	teamB : [ArenaMemberBasic];
}
	
table ItemCoolData
{
	itemId : int;
	remainCoolTime : long;
}

///UPDATE_ITEM_COOLTIME_NOTIFY
table UpdateItemCoolTimeNotify
{
	coolInfos : [ItemCoolData];
}

///AGGRO_TICKER_INFO_NOTIFY
table AggroTickerInfoNotify
{
	aggroTargetObjId : long;
	aggroState : int;
	time : int;
	aggroObjId : long;
}

/// ITEM_FUSION_REQUEST
table ItemFusionRequest
{
	source : long;							// 합성 대상 아이템
	material : [ClientSItem]	(required);	// 합성 재료 아이템 리스트
}

/// ITEM_FUSION_RESPONSE
table ItemFusionResponse
{
	error : int;			// 결과
	result : ClientLItem;	// 성공시 변경된 아이템 정보
}

enum PKContentsType : short
{
	PK_CONTENTS_NONE,
	PK_CONTENTS_BATTLE_FIELD,
	PK_CONTENTS_BRAWL,
	PK_CONTENTS_CONFLICT_FIELD
}

table KillAssistCountInfo
{
	type : PKContentsType;
	killCount : int;
	assistCount : int;
}

/// KILL_ASSIST_COUNT_NOTIFY
table KillAssistCountNotify
{
	datas : [KillAssistCountInfo];
}

/// PC_PK_HONOR_INFO_REQUEST
table PCPKHonorInfoRequest
{
	pcName : string	(required);
}

/// PC_PK_HONOR_INFO_RESPONSE
table PCPKHonorInfoResponse
{
	errCode : ErrorCode;
	pcName : string	(required);
	pvpPoint : long;					// 누적 명예정수
	pvpCoinDaily : long;				// 일일 획득 명예코인(타 유저인 경우 0)
	pvpCoinPurse : long;				// 보유 명예코인(타 유저인 경우 0)
	killAssistInfo : [KillAssistCountInfo];		// 킬, 어시 카운트 정보
}

/// 친구시스템
table BuddyInfo
{
	pcName : string;
	pcClassType : int;	
	pcLevel : int;
}

table BuddyReceiveInvitationInfo
{
	remainTick : long;
	pcName : string;
	pcClassType : int;	
	pcLevel : int;
}

table BuddySendInvitationInfo
{	
	remainTick : long;
	pcName : string;
}

/// BUDDY_DATA_ALL_NOTIFY
table BuddyDataAllNotify
{
	buddyInfos : [BuddyInfo];
	receiveInvitations : [BuddyReceiveInvitationInfo];
	sendInvitations : [BuddySendInvitationInfo];
}  

/// BUDDY_SEND_INVITATION_REQUEST 
table BuddySendInvitationRequest
{
	buddyPcName : string	(required);	
}

/// BUDDY_SEND_INVITATION_RESPONSE 
table BuddySendInvitationResponse
{
	errCode : ErrorCode;
	sendInvitation : BuddySendInvitationInfo;
}

/// BUDDY_ACCEPT_INVITATION_REQUEST
table BuddyAcceptInvitationRequest
{
	buddyPcName : string	(required);	
}

/// BUDDY_ACCEPT_INVITATION_RESPONSE
table BuddyAcceptInvitationResponse
{
	errCode : ErrorCode;
	buddyInfo : BuddyInfo;
	isBuddyOnline : bool;
}

/// BUDDY_REJECT_INVITATION_REQUEST
table BuddyRejectInvitationRequest
{
	buddyPcName : string	(required);
}

/// BUDDY_REJECT_INVITATION_RESPONSE
table BuddyRejectInvitationResponse
{
	errCode : ErrorCode;
	buddyPcName : string;
}

/// BUDDY_DELETE_REQUEST
table BuddyDeleteRequest
{
	buddyPcName : string	(required);
}

/// BUDDY_DELETE_RESPONSE
table BuddyDeleteResponse
{
	errCode : ErrorCode;
	buddyPcName : string;
}

/// BUDDY_RECEIVE_INVITATION_NOTIFY
table BuddyReceiveInvitationNotify
{
	receiveInvitation : BuddyReceiveInvitationInfo	(required);
}

/// BUDDY_ADDED_NOTIFY
table BuddyAddedNotify
{
	buddyInfo : BuddyInfo	(required);
}

/// BUDDY_SEND_INVITATION_REJECTED_NOTIFY
table BuddySendInvitationRejectedNotify
{
	buddyPcName : string	(required);
}
	
/// BUDDY_DELETED_NOTIFY
table BuddyDeletedNotify
{
	buddyPcName : string	(required);
}

/// BUDDY_SEARCH_REQUEST
table BuddySearchRequest
{
	pcName : string	(required);
}

/// BUDDY_SEARCH_RESPONSE
table BuddySearchResponse
{
	errCode : ErrorCode;
	buddyInfo : BuddyInfo;
}

/// BUDDY_RECOMMEND_REQUEST
table BuddyRecommendRequest
{
}

/// BUDDY_RECOMMEND_RESPONSE
table BuddyRecommendResponse
{
	buddyInfos : [BuddyInfo];
}

table BuddyRefreshInfo
{
	buddyName : string;
	level : int;
	isOnline : bool;
}

/// BUDDY_REFRESH_REQUEST
table BuddyRefreshRequest
{	
}

/// BUDDY_REFRESH_RESPONSE
table BuddyRefreshResponse
{
	datas : [BuddyRefreshInfo];
}

table BuddyInvitationRefreshInfo
{
	buddyName : string;
	level : int;
}

/// BUDDY_RECEIVE_INVIATION_REFRESH_REQUEST
table BuddyReceiveInvitationRefreshRequest
{	
}

/// BUDDY_RECEIVE_INVIATION_REFRESH_RESPONSE
table BuddyReceiveInvitationRefreshResponse
{
	datas : [BuddyInvitationRefreshInfo];
}

table PcDetailInfo
{
	pcName : string;
	pcLevel : int;
	classType : int;
	itemInfos : [OtherPcItemInfo];
	costumeInfos : [OtherPcCostumeInfo];
	pcGuildInfo : PcGuildInfo;
	monarchPoint : int;
	actionPower : int;
	attackPower : int;
	survivalPower : int;
	influence : long;
	influenceTier : int;
	influenceLevel : int;
	influenceRank : int;
	usedSkillPoint : int;
	combatPower : int;
	customizingInfo : CustomizeInfo;
	summonedPetLookId : int;
}

/// BUDDY_DETAIL_INFO_REQUEST
table BuddyDetailInfoRequest
{
	buddyName : string	(required);
}

/// TARGET_PC_DETAIL_INFO_REQUEST
table TargetPcDetailInfoRequest
{
	targetObjectId : long;
}

/// TARGET_PC_DETAIL_INFO_RESPONSE
table TargetPcDetailInfoResponse
{
	errCode : ErrorCode;
	detailInfo : PcDetailInfo;	
}

table DeniedInfo
{
	name	: string(required);
	pcDbId	: long;
	worldId : short;
}

/// PLAYER_DENIED_REQUEST
table PlayerDeniedRequest
{
	name : string(required);
	pcDbId	: long;
	worldId : short;
}		

/// PLAYER_DENIED_RESPONSE
table PlayerDeniedResponse
{
	error	: int;
	info	: DeniedInfo;
}

/// PLAYER_UNDENIED_REQUEST	
table PlayerUndeniedRequest
{
	deniedId : long;
}

/// PLAYER_UNDENIED_RESPONSE
table PlayerUndeniedResponse
{
	error	: int;
	deniedId : long;
}

/// PLAYER_DENIED_LIST_NOTIFY
table PlayerDeniedListNotify
{
	deniedInfos : [DeniedInfo];
}

table PcStatHardCapData
{
	statType : int;
	hardCapValue : int;
}

///PC_STAT_HARDCAP_DATA_NOTIFY
table PcStatHardCapDataNotify
{
	PcStatHardCapDatas : [PcStatHardCapData];
}

enum SummonTargetType : byte
{
	SummonTargetType_Buddy,
	SummonTargetType_GuildMember,
}

/// SUMMON_REQUEST
table SummonRequest
{
	pcNames : [string] (required);
	targetType : SummonTargetType;
}

/// SUMMON_RESPONSE
table SummonResponse
{
	err : ErrorCode;
	pcName : string;
	remainTick : long;
}

/// SUMMON_ACCEPT_REQUEST
table SummonAcceptRequest
{
	pcName : string;
}

/// SUMMON_ACCEPT_RESPONSE
table SummonAcceptResponse
{
	err : ErrorCode;
	pcName : string;
}

/// SUMMON_RECEIVED_NOTIFY
table SummonReceivedNotify
{
	pcName : string;
	pcLevel : int;
	pcClassType : int;
	type : ContentsType;	// 채널컨텐츠타입
	sMapId : int;			// sMapId
	remainTick : long;		// 남은 시간(millisec)
}

/// SUMMON_ACCEPTED_NOTIFY
table SummonAcceptedNotify
{
	pcName : string;
}

/// SUMMON_ABLE_STATE_NOTIFY
table SummonAbleStateNotify
{
}

/// MOVE_TO_PC_REQUEST
table MoveToPcRequest
{
	pcName : string (required);
	targetType : SummonTargetType;
}

/// MOVE_TO_PC_RESPONSE
table MoveToPcResponse
{
	err : ErrorCode;
	pcName : string;
}

table ShortTermRewardData
{
	id : int;
	count : short;
	isTake : bool;
}

/// SHORT_TERM_REWARD_DATA_NOTIFY
table ShortTermDataNotify
{
  data : ShortTermRewardData;
}

/// SHORT_TERM_REWARD_DATA_ALL_NOTIFY
table ShortTermDataAllNotify
{
  datas : [ShortTermRewardData];
}

/// SHORT_TERM_REWARD_GIVE_REQUSET
table ShortTermRewardGiveRequest
{
	stageId: int;
}

/// SHORT_TERM_REWARD_GIVE_RESPONSE
table ShortTermRewardGiveResponse
{
	stageId: int;
	err : ErrorCode;
}

/// SHORT_TERM_REWARD_DATA_ALL_REQUSET
table ShortTermRewardDataAllRequest
{
}

/// SHORT_TERM_REWARD_DATA_ALL_RESPONSE
table ShortTermRewardDataAllResponse
{
	err : ErrorCode;
  	datas : [ShortTermRewardData];
}


table KillerData
{
    killerPcName : string;
    killedTime: long;
}

/// KILLER_DATA_NOTIFY
table KillerDataNotify
{
  data : KillerData;
}

/// KILLER_DATA_ALL_NOTIFY
table KillerDataAllNotify
{
  datas : [KillerData];
}

/// FIND_RESERVED_NICK_NAME_REQUEST
table FindReservedNickNameRequest
{
	code : string	(required);		// 사전 예약 코드
}

/// FIND_RESERVED_NICK_NAME_RESPONSE
table FindReservedNickNameResponse
{
	error : int;					// 결과
	code : string;					// 사용한 코드
	colony : short;					// 콜로니 ID
	realm : short;					// 렐름 정보
	nickName : string;				// 선점한 닉네임
}

/// SELECT_RESERVED_NICK_NAME_REQUSET
table SelectReservedNickNameRequest
{
	code : string (required);		// 선점 코드
}

/// SELECT_RESERVED_NICK_NAME_RESPONSE
table SelectReservedNickNameResponse
{
	error : int;					// 해당 패킷은 실패시에만 전송됩니다.
}

/// FIND_RESERVED_CHAR_REQUEST
table FindReservedCharRequest
{
	code : string (required);		// 이전 코드
}

/// FIND_RESERVED_CHAR_RESPONSE
table FindReservedCharResponse
{
	error : int;					// 결과
	code : string;					// 사용한 코드
	colony : short;					// 콜로니 ID
	realm : short;					// 렐름 정보
	name : string (required);		// 생성된 캐릭명
}

/// SELECT_RESERVED_CHAR_REQUEST
table SelectReservedCharRequest
{
	code : string (required);		// 이전 코드
}

/// SELECT_RESERVED_CHAR_RESPONSE
table SelectReservedCharResponse
{
	error : int;					// 해당 패킷은 실패시에만 전송됩니다.
}

///SWITCH_SKILL_SLOT_REQUEST
table SwitchSkillSlotRequest
{
	skillId : int;
	objectid : long;
}

///ContentConfig
table ContentConfig
{
	type : LeanType.ContentConfigType;		// 컨텐츠 타입
	value: int;					
}

table ContentConfigList
{
	datas : [ContentConfig] (required);
}

/// USE_ITEM_CONTENTS_EFFECT_REQUEST
table UseItemContentsEffectRequest
{
	target : ulong;	// 사용하려는 item object id
}

/// USE_ITEM_CONTENTS_EFFECT_RESPONSE
table UseItemContentsEffectResponse
{
	target : ulong;		// 사용요청한 item object id
	itemId : int;		// 사용에 성공한 itemId. 성공시에만 정상적으로 설정됩니다.
	error : int;		// 처리 결과. ErrorCode::OK 면 성공 else 실패
}

table TranscendStat
{
	statGroupId : int;		// 추가 스탯 그룹 아이디
	statType : ubyte;		// 추가 스탯 타입(eCommon_Creature_statType)
	statValue : int;		// 추가 스탯 값
}

/// TRANSCEND_ITEM_REQUEST
table TranscendItemRequest
{
	itemObjectId : ulong;		// item object id
	successStoneCount : short;	// 행운석 사용 개수
}

/// TRANSCEND_ITEM_RESPONSE
table TranscendItemResponse
{
	errorCode : int;		// error code
	itemObjectId : ulong;	// item object id
	isSuccess : bool;		// 초월 성공 여부
	level : short;			// 초월 레벨
	stats : [TranscendStat];// 추가 스탯 데이터
}

/// TRANSCEND_CHANGE_STAT_REQUEST
table TranscendChangeStatRequest
{
	itemObjectId : ulong;	// item object id
	changeStats : [TranscendStat];
}

/// TRANSCEND_CHANGE_STAT_RESPONSE
table TranscendChangeStatResponse
{
	errorCode : int;				// error code
	itemObjectId : ulong;			// item object id
	changeStats : [TranscendStat];	// 추가 스탯 데이터
}

table BattleFieldCollection
{
	groupId : short;
	count : short;
}

/// BATTLE_FIELD_COLLECTION_NOTIFY
table BattleFieldCollectionNotify
{
	datas : [BattleFieldCollection];
}

/// PUSH_CREATE_NOTIFY
table PushCreateNotify
{
	pushId : long;
	pushState : PushState;
	pushRemainTick : int;
	eventSetType : int;
	contentsId : int;	
}

/// PUSH_UPDATE_NOTIFY
table PushUpdateNotify
{
	pushId : long;
	pushState : PushState;
	pushRemainTick : int;
	eventSetType : int;
	contentsId : int;	
}

/// PUSH_ALONE_JOIN_REQUEST
table PushAloneJoinRequest
{
	pushId : long;
	eventSetType : int;
	contentsId : int;
}

/// PUSH_ALONE_JOIN_RESPONSE
table PushAloneJoinResponse
{
	err : ErrorCode;
	pushId : long;
}

/// PUSH_QUICK_MATCHING_JOIN_REQUEST
table PushMatchingQuickJoinRequest
{
	pushId : long;
	// 입장하고자 하는 방(Match) 번호
	// 아무 방이나 입장할때는 0을 넣습니다.
	// 특정 방에 입장할때는 해당 Match Id를 넣습니다.(ex.매칭홍보 클릭)
	matchId : uint;
	eventSetType : int;
	contentsId : int;
	// 이전 신청한 push 취소
	isPrevCancel : bool;
}

/// PUSH_QUICK_MATCHING_JOIN_RESPONSE
table PushQuickMatchingJoinResponse
{
	err : ErrorCode;
	pushId : long;
	matchId : uint;	
}

/// PUSH_QUICK_MATCHING_LEAVE_REQUEST
table PushQuickMatchingLeaveRequest
{
	pushId : long;
	matchId : uint;
}

/// PUSH_MATCHING_ADDED_NOTIFY
table PushMatchingAddedNotify
{
	pushId : long;
	matchId : uint;
	// 클래스정보. 
	joinedClasses : [JoinedClassElem];
	isGroupMatching : bool;
}

/// PUSH_MATCHING_REMOVED_NOTIFY
table PushMatchingRemovedNotify
{
	pushId : long;
	matchId : uint;
	isGroupMatching : bool;
}

table JoinedClassElem
{
	classType : short;
	count : short;
}

/// PUSH_MATCHING_JOINED_PC_CLASS_UPDATE
table PushMatchingJoinedPcClassUpdate
{
	pushId : long;
	matchId : uint;
	joinedClasses : [JoinedClassElem];
}

/// PUSH_MATCHED_SUCCESS_NOTIFY
table PushMatchedSuccessNotify
{
	pushId : long;
	matchId : uint;
	remainTick : int;
	joinedPcs : [JoinedClassElem] (required);
}

/// PUSH_MATCHING_FAILED_NOTIFY
table PushMatchingFailedNotify
{
	err : ErrorCode;
	pushId : long;
	matchId : uint;
}

// PUSH_PROMOTION_REQUEST
table PushPromotionRequest
{
	pushId : long;
}

// PUSH_PROMOTION_RESPONSE
table PushPromotionResponse
{
	pushId : long;
	errCode : ErrorCode;
}

/// GROUP_MATCHING_MAKE_REQEUST
table GroupMatchingMakeRequest
{
	pushId : long;
	eventSetType : int;
	contentsId : int;
}

// 그룹매칭 초대자 기본정보
table GroupMatchingInvitee
{
	classType : short;
	name : string;
	level : int;
	combatPower : int;
}

/// GROUP_MATCHING_MAKE_RESPONSE
table GroupMatchingMakeResponse
{
	err : ErrorCode;
	pushId : long;
	matchId : uint;
	guildMemberList : [GroupMatchingInvitee];
	buddyList : [GroupMatchingInvitee];
}

/// GROUP_MATCHING_LEAVE_REQUEST
table GroupMatchingLeaveRequest
{
	pushId : long;
	matchId : uint;
}

/// GROUP_MATCHING_GUILD_MEMBER_LIST_REQUEST
table GroupMatchingGuildMemberListRequest
{
}

/// GROUP_MATCHING_GUILD_MEMBER_LIST_RESPONSE
table GroupMatchingGuildMemberListResponse
{
	guildMemberList : [GroupMatchingInvitee];
}

/// GROUP_MATCHING_BUDDY_LIST_REQUEST
table GroupMatchingBuddyListRequest
{
}

/// GROUP_MATCHING_BUDDY_LIST_RESPONSE
table GroupMatchingBuddyListResponse
{
	buddyList : [GroupMatchingInvitee];
}

enum GroupMatchingInviteType : short
{
	GROUP_MATCHING_TYPE_NONE,
	GROUP_MATCHING_TYPE_BUDDY,
	GROUP_MATCHING_TYPE_GUILD
}

/// GROUP_MATCHING_INVITE_REQUEST
table GroupMatchingInviteRequest
{
	pushId : long; 
	matchId : uint;	
	inviteType : GroupMatchingInviteType;
	inviteeName : string;
}

/// GROUP_MATCHING_INVITE_RESPONSE
table GroupMatchingInviteResponse
{
	err : ErrorCode;
	pushId : long;
	matchId : uint;	
	inviteType : GroupMatchingInviteType;
	inviteeName : string;
}

/// GROUP_MATCHING_MEMBER_LEAVE_NOTIFY
table GroupMatchingMemberLeaveNotify
{
	inviteeName : string;	// 떠나간 PC의 이름
	pushId : long;
	matchId : uint;
}

/// GROUP_MATCHING_INVITATION_ADD_NOTIFY
table GroupMatchingInvitationAddNotify
{
	inviteType : GroupMatchingInviteType;
	inviterPcName : string;
	inviterPcLevel : int;
	inviterPcClassType : int;
	pushId : long;
	matchId : uint;
	remainSec : short;
}

/// GROUP_MATCHING_INVITATION_REMOVE_NOTIFY
table GroupMatchingInvitationRemoveNotify
{
	inviteType : GroupMatchingInviteType;
	inviterName : string;
	pushId : long;
	matchId : uint;
}

/// GROUP_MATCHING_INVITATION_ACCEPTED_NOTIFY
table GroupMatchingInvitationAcceptedNotify
{
	inviteType : GroupMatchingInviteType;
	inviteeName : string;	// 수락한 Pc의 이름
	pushId : long;
	matchId : uint;
}

/// GROUP_MATCHING_INVITATION_REJECTED_NOTIFY
table GroupMatchingInvitationRejectedNotify
{
	inviteType : GroupMatchingInviteType;
	inviteeName : string;	// 거절한 Pc의 이름
	pushId : long;
	matchId : uint;
}

/// GROUP_MATCHING_INVITE_ACCEPT_REQUEST
table GroupMatchingInviteAcceptRequest
{
	pushId : long;
	matchId : uint;
	eventSetType : int;
	contentsId : int;
}

/// GROUP_MATCHING_INVITE_ACCEPT_RESPONSE
table GroupMatchingInviteAcceptResponse
{
	err : ErrorCode;
	pushId : long;
	matchId : uint;
}

/// GROUP_MATCHING_INVITE_REJECT_REQUEST
table GroupMatchingInviteRejectRequest
{
	pushId : long;
	matchId : uint;
}

/// GROUP_MATCHING_INVITE_REJECT_RESPONSE
table GroupMatchingInviteRejectResponse
{
	err : ErrorCode;
	pushId : long;
	matchId : uint;
}

/// GROUP_MATCHING_START_REQUEST
table GroupMatchingStartRequest
{
	pushId : long;
	matchId : uint;
}

/// GROUP_MATCHING_START_RESPONSE
table GroupMatchingStartResponse
{
	err : ErrorCode;
	pushId : long;
	matchId : uint;
}

/// GROUP_MATCHING_CONVERT_TO_QUICK_REQUEST
table GroupMatchingConvertToQuickRequest
{
	pushId : long;
	matchId : uint;
}

/// GROUP_MATCHING_CONVERT_TO_QUICK_RESPONSE
table GroupMatchingConvertToQuickResponse
{
	err : ErrorCode;
	pushId : long;
	matchId : uint;
}

/// GROUP_MATCHING_REMATCHING_REQUEST
table GroupMatchingRematchingRequest
{
	pushId : long;
	matchId : uint;
}

/// GROUP_MATCHING_REMATCHING_RESPONSE
table GroupMatchingRematchingResponse
{
	err : ErrorCode;
	pushId : long;
	matchId : uint;
}

// GUILD_DUNGEON_INFO_REQUEST
table GuildDungeonInfoRequest
{
}

// GUILD_DUNGEON_INFO_RESPONSE
table GuildDungeonInfoResponse
{
	day : ubyte;			// 현재 일차
	clearCount : int;		// 성공 횟수
	enterCount : ushort;	// 입장 횟수
	rewardIndex : byte;		// 개인 성공 보상 현재 인덱스
	/// 시즌 종료 시간. 다음과 같이 변환해서 쓰세요
	/// new DateTime(ticks, DateTimeKind.Utc).ToLocalTime(); // local time
	seasonEndDateTimeUtc : long;
}

// GUILD_DUNGEON_ENTER_FAILED
table GuildDungeonEnterFailed
{
	errorCode : ErrorCode;	// 실패 이유
}

// GUILD_DUNGEON_CLEAR_NOTIFY
table GuildDungeonClearNotify
{
	result : int;			// 결과 Error Code
	succeed : bool;			// 성공 여부
	id : int;				// 컨텐츠 ID
	guildExp : ushort;		// 길드 보상 길드 경험치
	guildPoint : ushort;	// 길드 보상 길드 던전 점수
	clearCount : int;		// 길드 던전 성공 횟수
	rewards : RewardInfo (required);	// 개인 보상 정보
	guildName : string (required);		// 길드 이름
	guildCrest : GuildCrest (required);	// 길드 문양
}

// GUILD_DUNGEON_REWARD_REQUEST
table GuildDungeonRewardRequest
{
}

// GUILD_DUNGEON_REWARD_RESPONSE
table GuildDungeonRewardResponse
{
	result : int;				// 결과 Error Code
	remainClearCount : int;		// 남은 성공 횟수
}

//- EQUIP_COSTUME_REQUEST --------------
table EquipCostumeRequest
{
	itemObjectId : ulong;
}

///- EQUIP_COSTUME_RESPONSE --------------
table EquipCostumeResponse
{
	errorCode : int;
	itemObjectId : ulong;
	equipCostumeSlot : short;
	pcObjectId : ulong;
	equipCostumeParts : CostumePartsInfo;
}

///- UNEQUIP_COSTUME_REQUEST --------------
table UnequipCostumeRequest
{
	unequipCostumeSlot : byte;
}

///- UNEQUIP_COSTUME_RESPONSE --------------
table UnequipCostumeResponse
{
	errorCode : int;
	unequipCostumeSlot : short;
	pcObjectId : ulong;
}

/// COSTUME_PRESET_CHANGE_REQUEST
table CostumePresetChangeRequest
{
	presetNo : short;
}

/// COSTUME_PRESET_CHANGE_RESPONSE
table CostumePresetChangeResponse
{
	result : int;
	costumePreset : CostumePresetInfo;
}

/// COSTUME_PRESET_COSTUMESLOT_UPDATE_NOTIFY
table CostumePresetCostumeSlotUpdateNotify
{
	presetNo : short;
	costumeSlot : PresetCostumeInfo (required);
}

///- ENCHANT_COSTUME_REQUEST --------------
table EnchantCostumeRequest
{
	enchantItemObjectId : ulong;
	materialItems : [ClientSItem] (required);
}

///- ENCHANT_COSTUME_RESPONSE --------------
table EnchantCostumeResponse
{
	errorCode : int;
	baseEnchantExp: int;
	enchantExp: int;
	level : int;
	itemObjectId : ulong;
}

///- UPGRADE_COSTUME_REQUEST --------------
table UpgradeCostumeRequest
{
	upgradeItemObjectId : ulong;
}

///- UPGRADE_COSTUME_RESPONSE --------------
table UpgradeCostumeResponse
{
	errorCode : int;
	grade : short;
	level : int;
	exp : int;
	itemObjectId : ulong;
}

///- SHOW_COSTUME_REQUEST --------------
table ShowCostumeRequest
{
	showCostumeSlot : short;
}

///- SHOW_COSTUME_RESPONSE --------------
table ShowCostumeResponse
{
	errorCode : int;
	showCostumeSlot : short;
	pcObjectId : ulong;
}

///- HIDE_COSTUME_REQUEST --------------
table HideCostumeRequest
{
	hideCostumeSlot : short;
}

///- HIDE_COSTUME_RESPONSE --------------
table HideCostumeResponse
{
	errorCode : int;
	hideCostumeSlot : short;
	pcObjectId : ulong;
}

// 라이브 이벤트

// 라이브 이벤트 타임스탬프
table LiveEventTimestamp
{
	timestamp : int;
}

// 라이브 이벤트 기간
table LiveEventPeriod
{
	start : long;	// utc time_t
	end : long;		// utc time_t
}

table LiveEventHeader
{
	realm : int;	// LeanData::eLiveEvent_TargetType
	timestamp : LiveEventTimestamp (required);	
	period : LiveEventPeriod (required);
}

// 라이브 이벤트 구매 제한
table LiveEventBuyLimit
{
	target : int;		// LeanData::eLiveEvent_BuyLimitTargetType
	time : int;			// LeanData::eLiveEvent_BuyLimitTimeType
	limitCount : int;	// 구매 제한 횟수
}

// 라이브 이벤트 재화 교환 상점 구매 결과 아이템 정보
table LiveEventTradeResultItem
{
	itemId : int;
	stackCount : int;
}

// 라이브 이벤트 재화 교환 상점 비용 정보
table LiveEventTradeCostItem
{
	itemId : int;
	stackCount : int;
}

// 라이브 이벤트 재화 교환 상점 데이터
table LiveEventTradeData
{
	productId : int;								// 상품 ID
	result : LiveEventTradeResultItem (required);	// 상품 결과 아이템
	cost : LiveEventTradeCostItem (required);		// 상품 필요 재화 아이템
	limit: LiveEventBuyLimit (required);			// 상품 구매 제한 정보
}

// 라이브 이벤트 다이아 소모/충전 데이터 시트
table LiveEventDiaMissionRewardData
{
	itemId : int;
	stackCount : int;
}

table LiveEventLevelRange
{
	startLv : int;
	limitLv : int;
}

table LiveEventDiaMissionData
{
	missionId : int;// 미션 ID
	achieveAmount : int; // 달성에 필요한 수량	
	rewards : [LiveEventDiaMissionRewardData] (required);  //보상
}

table LiveEventDiaBuyDataSheet
{
	header : LiveEventHeader (required);
	missions : [LiveEventDiaMissionData] (required);
}

table LiveEventDiaSpentDataSheet
{
	header : LiveEventHeader (required);
	missions : [LiveEventDiaMissionData] (required);
}

// 라이브 이벤트 재화 교환 상점 데이터 시트
table LiveEventTradeDataSheet
{
	header : LiveEventHeader (required);
	products : [LiveEventTradeData] (required);
}

// 라이브 이벤트 한정 상점 데이터
table LiveEventLimitShopResultItem
{
	itemId : int;
	stackCount : int;
}

// 라이브 이벤트 한정 상점 비용 데이터
table LiveEventLimitShopCost
{
	costType : int;	// LeanData::eCommon_Item_costType	(재화 타입)
	amount : int;	// 재화 수량
}

// 라이브 이벤트 한정 상점 상품 데이터
table LiveEventLimitShopData
{
	productId : int;	// 상품 번호
	result : LiveEventLimitShopResultItem (required);
	cost : LiveEventLimitShopCost (required);
	limit : LiveEventBuyLimit (required);
}

// 라이브 이벤트 한정 상점 데이터 시트
table LiveEventLimitShopDataSheet
{
	header : LiveEventHeader (required);
	products : [LiveEventLimitShopData] (required);
}

table LiveEventItemDropRewardData
{
	itemId : int;
	stackCount : int;
	dropChance : int;
}

table LiveEventItemDropData
{
	contentType : int;	// LeanType::LiveEventItemDropContentsType (컨텐츠 타입)
	eventType : int;	// LeanType::LiveEventItemDropEventType (이벤트 타입)
	chapter : int;		// 이벤트 챕터
	rewards : [LiveEventItemDropRewardData] (required);	// 이벤트 보상 정보
}

// 라이브 이벤트 아이템드랍 보상 데이터 시트
table LiveEventItemDropDataSheet
{
	header : LiveEventHeader (required);
	drops : [LiveEventItemDropData] (required);
}

/// LIVE_EVENT_STOP_NOTIFY
table LiveEventStopNotify
{
	type : int;
	timestamp : LiveEventTimestamp (required);
}

// 특별출석부 보상데이터 
table LiveEventAttentionReward
{
	itemId	: int;
	count	: int;
}

table LiveEventAttentionEndReward
{
	rewards : [LiveEventAttentionReward](required);
}

table LiveEventAttentionActiveReward
{
	activeOrder	: short;
	rewards		: [LiveEventAttentionReward](required);
}

table LiveEventAttentionTarget
{
	realm : short;
	startLv : short;
	endLv : short;
	applyTime : long;
}

table LiveEventAttentionDataSheet
{
	type			: short;
	header			: LiveEventHeader(required);
	rewards			: [LiveEventAttentionActiveReward](required);
	endReward		: LiveEventAttentionEndReward;
	endActiveOrder	: short;
	targetInfo		: LiveEventAttentionTarget(required);
}

/// LIVE_EVENT_TRADE_DATA_NOTIFY
table LiveEventTradeDataNotify
{
	data : LiveEventTradeDataSheet (required);
}

table LiveEventBuffData
{
	buffId : int;
	level : int;
}

table LiveEventBuffDataSheet
{
	header : LiveEventHeader (required);
	buffInfos : [LiveEventBuffData] (required);
	lvlRange : LiveEventLevelRange;
}

/// LIVE_EVENT_BUFF_DATA_NOTIFY
table LiveEventBuffDataNotify
{
	data : LiveEventBuffDataSheet (required);
}

/// LIVE_EVENT_ATTENTION_DATA_NOTIFY
table LiveEventAttentionDataNotify
{
	data : LiveEventAttentionDataSheet;
}

/// LIVE_EVENT_NEWBIE_ATTENTION_DATA_NOTIFY
table LiveEventNewbieAttentionDataNotify
{
	data : LiveEventAttentionDataSheet;
}

/// LIVE_EVENT_RETURN_ATTENTION_DATA_NOTIFY
table LiveEventReturnAttentionDataNotify
{
	data : LiveEventAttentionDataSheet;
}

/// LIVE_EVENT_DIA_BUY_DATA_NOTIFY
table LiveEventDiaBuyDataNotify
{
	data : LiveEventDiaBuyDataSheet (required);
}

/// LIVE_EVENT_DIA_SPENT_DATA_NOTIFY
table LiveEventDiaSpentDataNotify
{
	data : LiveEventDiaSpentDataSheet (required);
}

/// LIVE_EVENT_LIMIT_SELL_SHOP_DATA_NOTIFY
table LiveEventLimitSellShopDataNotify
{
	data : LiveEventLimitShopDataSheet (required);
}

/// LIVE_EVENT_ITEM_DROP_DATA_NOTIFY
table LiveEventItemDropDataNotify
{
	data : LiveEventItemDropDataSheet (required);
}

/// 라이브 이벤트 재화 교환 상점 구매 정보
table LiveEventTradeProductInstance
{
	productId : int;			//!< 구매 상품 ID
	purchaseCount : int;		//!< 누적 구매 횟수
	lastPurchaseTime : long;	//!< 마지막 구매 시간 (UTC time_t)
}

table LiveEventTradeInstance
{
	timestamp : LiveEventTimestamp;
	products : [LiveEventTradeProductInstance] (required);
}

table LiveEventBuffInstance
{
	timestamp : LiveEventTimestamp;
	buffs	: [LiveEventBuffInfoInstance]	(required);
}

/// LIVE_EVENT_TRADE_INSTANCE_NOTIFY
table LiveEventTradeInstaceNotify
{
	instance : LiveEventTradeInstance (required);	// 구매 내역
}

// LIVE_EVENT_TRADE_INSTANCE_EXPIRE_NOTIFY
table LiveEventTradeInstancePurchaseExpireNotify			// 만료된 구매 내역 정보
{
	timestamp : LiveEventTimestamp;
	idList : [int] (required);	// 만료된 상품 ID 리스트
}

// LIVE_EVENT_TRADE_PURCHASE_REQUEST
table LiveEventTradePurchaseRequest
{
	timestamp : LiveEventTimestamp (required); // 클라이언트가 알고있는 현재 재화 교환상점 정보 타임스탬프
	productId : int; // 구매하고자하는 상품 ID
}

// LIVE_EVENT_TRADE_PURCHASE_RESPONSE
table LiveEventTradePurchaseResponse
{
	productId : int; // 구매요청한 상점 ID
	error : int; // 결과 정보 OK 면 성공, else 실패
	timestamp : LiveEventTimestamp;	// error 가 OK 인 경우 설정되며, 구매한 상품 데이터의 타임스탬프
	productInstance : LiveEventTradeProductInstance;	// error 가 OK 인 경우 설정되며, 구매한 상품의 새로운 정보. 실패한경우 null 반환
}

table LiveEventDiaMission
{
	missionId : int;	// 미션ID
	state : LeanType.LiveEventDiaMissionState; // 상태
	updateTime : long; // 상태값이 변경된 시간 정보 (UTC time_t)
}

table LiveEventDiaBuyInstance
{
	timestamp : LiveEventTimestamp;
	amount : int; // 현재 누적 수량
	missions : [LiveEventDiaMission] (required); // 미션 진행 사항
}

// LIVE_EVENT_DIA_BUY_NOTIFY
table LiveEventDiaBuyNotify
{
	instance : LiveEventDiaBuyInstance (required); // 인스턴스 정보
}

// LIVE_EVENT_DIA_BUY_MISSION_UPDATE_NOTIFY
table LiveEventDiaBuyMissionUpdateNotify
{
	timestamp : LiveEventTimestamp;
	mission : LiveEventDiaMission (required);
}

// LIVE_EVENT_DIA_BUY_AMOUNT_UPDATE_NOTIFY
table LiveEventDiaBuyAmountUpdateNotify
{
	timestamp : LiveEventTimestamp;
	amount : int;	// 현재수치
}

// LIVE_EVENT_DIA_BUY_REWARD_REQUEST
table LiveEventDiaBuyRewardRequest
{
	timestamp : LiveEventTimestamp (required);	// 클라이언트가 알고있는 다이아 구매 정보 타임 스탬프
	missionId : int; // 보상받고자하는 미션 id
}

// LIVE_EVENT_DIA_BUY_REWARD_RESPONSE
table LiveEventDiaBuyRewardResponse
{
	missionId : int; // 요청한 미션 id
	error : int; // OK 성공, else 실패
}

table LiveEventDiaSpentInstance
{
	timestamp : LiveEventTimestamp;
	amount : int; // 현재 누적 수량
	missions : [LiveEventDiaMission] (required); // 미션 진행사항
}

// LIVE_EVENT_DIA_SPENT_NOTIFY
table LiveEventDiaSpentNotify
{
	instance : LiveEventDiaSpentInstance (required); // 인스턴스 정보
}

// LIVE_EVENT_DIA_SPENT_MISSION_UPDATE_NOTIFY
table LiveEventDiaSpentMissionNotify
{
	timestamp : LiveEventTimestamp;
	mission : LiveEventDiaMission (required);
}

// LIVE_EVENT_DIA_SPENT_AMOUNT_UPDATE_NOTIFY
table LiveEventDiaSpentAmountUpdateNotify
{
	timestamp : LiveEventTimestamp;
	amount : int; // 현재수치
}

// LIVE_EVENT_DIA_SPENT_REWARD_REQUEST
table LiveEventDiaSpentRewardRequest
{
	timestamp : LiveEventTimestamp (required); // 클라이언트가 알고있는 다이아 소비 정보 타임스탬프
	missionId : int; // 보상받고자하는 미션 id;
}

// LIVE_EVENT_DIA_SPENT_REWARD_RESPONSE
table LiveEventDiaSpentRewardResponse
{
	missionId : int; // 요청한 미션 id
	error : int; // OK 성공, else 실패
}

table LiveEventLimitSellShopProductInstance
{
	productId : int;			//!< 구매 상품 ID
	purchaseCount : int;		//!< 누적 구매 횟수
	lastPurchaseTime : long;	//!< 마지막 구매 시간 (UTC time_t)
}

table LiveEventLimitSellShopInstance
{
	timestamp : LiveEventTimestamp;
	products : [LiveEventLimitSellShopProductInstance] (required);
}

table LiveEventBuffInfoInstance
{
	buffId : int;
	level : int;
}

// LIVE_EVENT_LIMIT_SELL_SHOP_INSTANCE_NOTIFY
table LiveEventLimitSellShopInstanceNotify
{
	instance : LiveEventLimitSellShopInstance (required);  // 인스턴스 정보
}

// LIVE_EVENT_LIMIT_SELL_SHOP_INSTANCE_EXPIRE_NOTIFY
table LiveEventLimitSellShopInstanceExpireNotify
{
	timestamp : LiveEventTimestamp;
	idList : [int] (required); //만료된 상품 id 리스트
}

// LIVE_EVENT_LIMIT_SELL_SHOP_PURCHASE_REQUEST
table LiveEventLimitSellShopPurchaseRequest
{
	timestamp : LiveEventTimestamp (required); // 클라이언트가 알고있는 한정상점 타임스탬프값
	productId : int; // 구매 요청한 상품 ID
}

// LIVE_EVENT_LIMIT_SELL_SHOP_PURCHASE_RESPONSE
table LiveEventLimitSellShopPurchaseResponse
{
	productId : int; // 구매 요청한 상품 ID
	error : int; // OK 성공, else 실패
	timestamp : LiveEventTimestamp;	// error 가 OK 인 경우 설정되며, 구매한 상품 데이터의 타임스탬프
	productInstance : LiveEventLimitSellShopProductInstance; // OK 일경우 변경된 상품 정보, 실패인경우 null
}

//LIVE_EVENT_BUFF_INFO_INSTANCE_NOTIFY
table LiveEventBuffInfoInstanceNotify
{
	instance : LiveEventBuffInfoInstance (required);
}

table LiveEventAttentionReceive
{
	activeOrder	: short;			// 획득 순서
	state		: short;			// 상태
	receiveTime	: long;				// 상태값 변경시점
}

table LiveEventAttentionInstance
{
	attentionType	: int;										// 이벤트타입(출석부타입)
	timestamp		: LiveEventTimestamp;
	receiveInfos	: [LiveEventAttentionReceive](required);	// 출석부 일자별 수령정보
	endReceiveInfo  : LiveEventAttentionReceive;		// 출석부완료보상 수령정보
}

// LIVE_EVENT_ATTENTION_NOTIFY
table LiveEventAttentionNotify
{
	instances : [LiveEventAttentionInstance](required);
}

// LIVE_EVENT_ATTENTION_RECEIVE_NOTIFY
table LiveEventAttentionReceiveNotify
{
	attentionType	: int;
	timestamp		: LiveEventTimestamp;
	activeOrder		: short;
	state			: short;
}

//LIVE_EVENT_ATTENTION_END_RECEIVE_NOTIFY
table LiveEventAttentionEndReceiveNotify
{
	attentionType	: int;
	timestamp		: LiveEventTimestamp;
	state			: short;
}

// LIVE_EVENT_LEVEL_BUFF_DATA_NOTIFY
table LiveEventLevelBuffDataNotify
{
	data : LiveEventBuffDataSheet (required);
}

// LIVE_EVENT_NEWBIE_BUFF_DATA_NOTIFY
table LiveEventNewbieBuffDataNotify
{
	data : LiveEventBuffDataSheet (required);
}

// LIVE_EVENT_ATTENTION_REWARD_RECEIVE_REQUEST
table LiveEventAttentionRewardReceiveRequest
{
	timestamp : LiveEventTimestamp (required); // 클라이언트가 알고있는 출석부 타임스탬프값
	activeOrder : short;
}

// LIVE_EVENT_ATTENTION_REWARD_RECEIVE_RESPONSE
table LiveEventAttentionRewardReceiveResponse
{
	activeOrder : short;
	error : int;
	timestamp : LiveEventTimestamp(required);
}

// LIVE_EVENT_ATTENTION_RETURN_REWARD_RECEIVE_REQUEST 
table LiveEventAttentionReturnRewardReceiveRequest
{
	timestamp : LiveEventTimestamp (required); // 클라이언트가 알고있는 한정상점 타임스탬프값
	activeOrder : short;
}

// LIVE_EVENT_ATTENTION_RETURN_REWARD_RECEIVE_RESPONSE 
table LiveEventAttentionReturnRewardReceiveResponse
{
	activeOrder : short;
	error : int;
	timestamp : LiveEventTimestamp(required);
}

// LIVE_EVENT_ATTENTION_NEWBIE_REWARD_RECEIVE_REQUEST 
table LiveEventAttentionNewbieRewardReceiveRequest
{
	timestamp : LiveEventTimestamp (required); // 클라이언트가 알고있는 한정상점 타임스탬프값
	activeOrder : short;
}
 
// LIVE_EVENT_ATTENTION_NEWBIE_REWARD_RECEIVE_RESPONSE 
table LiveEventAttentionNewbieRewardReceiveResponse
{
	activeOrder : short;
	error : int;
	timestamp : LiveEventTimestamp(required);
}
 
// LIVE_EVENT_ATTENTION_END_REWARD_RECEIVE_REQUEST 
table LiveEventAttentionEndRewardReceiveRequest
{
	timestamp : LiveEventTimestamp (required); // 클라이언트가 알고있는 한정상점 타임스탬프값
	activeOrder : short;
}

// LIVE_EVENT_ATTENTION_END_REWARD_RECEIVE_RESPONSE
table LiveEventAttentionEndRewardReceiveResponse
{
	activeOrder : short;
	error : int;
	timestamp : LiveEventTimestamp(required);
}

// LIVE_EVENT_ATTENTION_END_RETURN_REWARD_RECEIVE_REQUEST 
table LiveEventAttentionEndReturnRewardReceiveRequest
{
	timestamp : LiveEventTimestamp (required); // 클라이언트가 알고있는 한정상점 타임스탬프값
	activeOrder : short;
}

// LIVE_EVENT_ATTENTION_END_RETURN_REWARD_RECEIVE_RESPONSE
table LiveEventAttentionEndReturnRewardReceiveResponse
{
	activeOrder : short;
	error : int;
	timestamp : LiveEventTimestamp(required);
}

// LIVE_EVENT_ATTENTION_END_NEWBIE_REWARD_RECEIVE_REQUEST 
table LiveEventAttentionEndNewbieRewardReceiveRequest
{
	timestamp : LiveEventTimestamp (required); // 클라이언트가 알고있는 한정상점 타임스탬프값
	activeOrder : short;
}

// LIVE_EVENT_ATTENTION_END_NEWBIE_REWARD_RECEIVE_RESPONSE
table LiveEventAttentionEndNewbieRewardReceiveResponse
{
	activeOrder : short;
	error : int;
	timestamp : LiveEventTimestamp(required);
}

// 아이템인 경우 costType = 0, 재화인 경우 itemId = 0
table LiveEventLevelUpReward
{
	itemId : int;		// 아이템 아이디
	costType : int;		// 재화 타입(LeanData::eCommon_costType)
	count : int;		// 수량
}

table LiveEventLevelUpData
{
	goalLevel : int;
	rewards : [LiveEventLevelUpReward] (required);
}

table LiveEventLevelUpDataSheet
{
	header : LiveEventHeader (required);
	returnTime : long;
	levelUp : [LiveEventLevelUpData] (required);
}

/// LIVE_EVENT_LEVELUP_EVENT_DATA_NOTIFY
/// LIVE_EVENT_LEVELUP_NEWBIE_DATA_NOTIFY
/// LIVE_EVENT_LEVELUP_RETURN_DATA_NOTIFY
table LiveEventLevelUpDataNotify
{
	data : LiveEventLevelUpDataSheet (required);
}

table LiveEventLevelUpReceive
{
	goalLevel : int;		// 목표 레벨
	state : short;			// 상태(LeanType::LiveEventReceiveState)
	receiveTime : long;		// 상태값 변경 시점
}

table LiveEventLevelUpInstance
{
	eventType : int;		// 이벤트 타입(LeanData::eLiveEvent_Type)
	timestamp : LiveEventTimestamp (required); // 타임 스탬프
	receiveInfos : [LiveEventLevelUpReceive](required);	// 이벤트 레벨별 수령정보
}

// LIVE_EVENT_LEVELUP_NOTIFY
table LiveEventLevelUpNotify
{
	instances : [LiveEventLevelUpInstance] (required);
}

// LIVE_EVENT_LEVELUP_RECEIVE_NOTIFY
table LiveEventLevelUpReceiveNotify
{
	eventType : int;	// 이벤트 타입(LeanData::eLiveEvent_Type)
	timestamp : LiveEventTimestamp (required); // 타임 스탬프
	goalLevel : int;	// 목표 레벨
	state : short;		// 상태(LeanType::LiveEventReceiveState)
}

// LIVE_EVENT_LEVELUP_REWARD_RECEIVE_REQUEST
table LiveEventLevelUpRewardReceiveRequest
{
	eventType : int;	// 이벤트 타입(LeanData::eLiveEvent_Type)
	timestamp : LiveEventTimestamp (required); // 타임 스탬프
	goalLevel : int;
}

// LIVE_EVENT_LEVELUP_REWARD_RECEIVE_RESPONSE
table LiveEventLevelUpRewardReceiveResponse
{
	eventType : int;	// 이벤트 타입(LeanData::eLiveEvent_Type)
	goalLevel : int;	// 목표 레벨
	timestamp : LiveEventTimestamp (required); // 타임 스탬프
	error: int;			// OK : 성공, else : LeanPacket::Error
}

// STORAGE_SLOT_EXPANSION_REQUEST
table StorageSlotExpansionRequest
{
	type : short;		// 확장하려는 스토리지 타입
	size : short;		// 확장하려는 갯수
}

// STORAGE_SLOT_EXPANSION_RESPONSE
table StorageSlotExpansionResponse
{
	type : short;			// 확장하려는 스토리지 타입
	size : short;			// 확장하려는 갯수
	error: int;				// OK : 성공, else : LeanPacket::Error
	
	storage : StorageData;	// 성공시 설정된다. 확장된 스토리지 최종 정보
}

/// BRAWL_TIME_INFO_REQUEST
table BrawlTimeInfoRequest
{
}

/// BRAWL_TIME_INFO_NOTIFY
table BrawlTimeInfoNotify
{
	freeRemainSec : int;
	paidRemainSec : int;
}

/// BRAWL_TIME_INFO_RESPONSE
table BrawlTimeInfoResponse
{
	freeRemainSec : int;
	paidRemainSec : int;
}

/// BRAWL_TIME_EXPIRED_NOTIFY
table BrawlTimeExpiredNotify
{
}

/// BRAWL_FREE_TIME_EXPIRED_NOTIFY
table BrawlFreeTimeExpiredNotify
{
}

/// BRAWL_REMAIN_TIME_NOTIFY
table BrawlRemainTimeNotify
{
	remainSec : int;
}

table BrawlShortTermInfo
{
	stepId : int;
	killCount : int;
	isRewardTaken : bool;
}

/// BRAWL_SHORT_TERM_DATA_NOTIFY
table BrawlShortTermDataNotify
{
	datas : [BrawlShortTermInfo];
}

/// BRAWL_SHORT_TERM_REWARD_REQUEST
table BrawlShortTermRewardRequest
{
	stepId : int;
}

/// BRAWL_SHORT_TERM_REWARD_RESPONSE
table BrawlShortTermRewardResponse
{	
	stepId : int;
	err : ErrorCode;
}

/// BRAWL_SHORT_TERM_DATA_REQUEST
table BrawlShortTermDataRequest
{
}

/// BRAWL_SHORT_TERM_DATA_RESPONSE
table BrawlShortTermDataResponse
{
	datas : [BrawlShortTermInfo];
}

/// BRAWL_PK_NOTIFY
table BrawlPKNotify
{
	killerObjectId : long;
	killedObjectId : long;
}

/// BRAWL_SHORT_TERM_MAX_NOTIFY
table BrawlShortTermMaxNotify
{
	shortTermStepId : int;
}

/// BRAWL_OTHER_PC_SHORT_TERM_MAX_NOTIFY
table BrawlOtherPcShortTermMaxNotify
{
	pcName : string;
	pcIff : int;
	pcClassType : int; 
	shortTermStepId : int;
}

/// BRAWL_POINT_NOTIFY
table BrawlPointNotify
{
	// LeanData::eCommon_costType::eCommon_costType_BrawlPoint
	brawlPoint : int;				// 난투장 총 누적 포인트
	todayAquiredBrawlPoint : int;	// 오늘 획득한 난투장 포인트
}

table BrawlEnhanceInfo
{
	// LeanData::eBrawlEnhance_Type
	type : int;		
	level : int;
}

/// BRAWL_ENHANCE_DATA_NOTIFY
table BrawlEnhanceDataNotify
{
	datas : [BrawlEnhanceInfo];
}

/// BRAWL_ENHANCE_LEVEL_UP_REQUEST
table BrawlEnhanceLevelUpRequest
{
	type : int;				// 강화하려는 난투장 타입
	currentLevel : int;		// 해당 타입의 현재 레벨
	costBrawlPoint : int;	// 소비하는 BrawlPoint 재화 값
	costItemId : int;		// 소비하는 확률 아이템 아이디
	costItemAmount : int;	// 소비하는 확률 아이템 개수	
}

/// BRAWL_ENHANCE_LEVEL_UP_RESPONSE
table BrawlEnhanceLevelUpResponse
{
	type : int;			// 난투장 타입
	requestLevel : int;	// 요청했던 레벨
	currentLevel : int; // 레벨업 결과 이후 레벨
	err : ErrorCode;
}

/// ADD_ITEM_FAILED_NOT_ENOUGH_STORAGE_SPACE_NOTIFY
table AddItemFailedNotEnoughStorageSpaceNotify
{
}

enum ScrollQuestState : short
{
	SCROLL_QUEST_STATE_INIT,		// 초기상태(퀘스트는 생성되어있고, 연출은 보지 않은 상태)
	SCROLL_QUEST_STATE_PROGRESS,	// 진행 중
	SCROLL_QUEST_STATE_WAIT_REWARD, // 카운트 달성하고, 보상받기 가능한 상태
	SCROLL_QUEST_STATE_REWARDED, 	// 보상까지 다 받은 완료상태
	SCROLL_QUEST_STATE_GIVE_UP,	  	// 유저의 요청으로 중도에 포기한 상태
	SCROLL_QUEST_STATE_MAX,
}

table ScrollQuestInProgressInfo
{
	scrollQuestId : int;		// 스크롤퀘스트 ID
	count : int;				// 스크롤퀘스트 현재 달성한 count
	state : ScrollQuestState;	// 스크롤퀘스트 상태
}

/// SCROLL_QUEST_DAILY_INFO_NOTIFY
table ScrollQuestDailyInfoNotify
{
	completeCount : short;		// 오늘 누적 수행한 횟수
}

/// SCROLL_QUEST_PROGRESS_INFO_NOTIFY
table ScrollQuestProgressInfoNotify
{
	data : ScrollQuestInProgressInfo;
}

/// SCROLL_QUEST_START_PROGRESS_REQUEST
table ScrollQuestStartProgressRequest
{
	scrollQuestId : int;
}

/// SCROLL_QUEST_START_PROGRESS_RESPONSE
table ScrollQuestStartProgressResponse
{
	scrollQuestId : int;
	err : ErrorCode;
}

/// SCROLL_QUEST_GIVE_UP_REQUEST
table ScrollQuestGiveUpRequest
{
	scrollQuestId : int; 	//취소하려는 스크롤퀘스트 ID(진행중이던 스크롤퀘스트 ID)
}

/// SCROLL_QUEST_GIVE_UP_RESPONSE
table ScrollQuestGiveUpResponse
{
	scrollQuestId : int;	// 취소한 스크롤퀘스트 ID
	err : ErrorCode;		// 취소결과
}

/// SCROLL_QUEST_REWARD_REQUEST
table ScrollQuestRewardRequest
{
	scrollQuestId : int; 			// 보상 받으려는 스크롤퀘스트ID
	rewardId : int;					// 클라 데이터의 rewardId(서버데이터와 동일한지 검증용)
	selectedRewardGroupId : int; 	// 선택한 보상 GroupID
	selectedRewardIdx : int;		// 선택한 보상 GroupID의 Idx
}

/// SCROLL_QUEST_REWARD_RESPONSE
table ScrollQuestRewardResponse
{
	scrollQuestId : int;	// 보상 받으려는 스크롤퀘스트 ID
	err : ErrorCode;		// 취소결과
}

/// BRAWL_LAST_LEAVED_TIME_REQUEST
table BrawlLastLeavedTimeRequest
{
}

/// BRAWL_LAST_LEAVED_TIME_RESPONSE
table BrawlLastLeavedTimeResponse
{
	lastLeavedTimeUtc : long;
}

/// BRAWL_LAST_LEAVED_TIME_NOTIFY
table BrawlLastLeavedTimeNotify
{
	lastLeavedTimeUtc : long;
}

/////////////////////////////////////
// 펫 시스템
/////////////////////////////////////	
enum PetState : short
{
	PET_STATE_SUMMONED,	// 소환
	PET_STATE_SUPPORT,	// 지원
	PET_STATE_MAX
}

table PetStat
{
	groupType : short;	// 스탯 타입(ePet_statGroupType 일반/특수)
	id : int;			// 스탯 Id(테이블 값)
	value : int;		// 스텟 값
}

table Pet
{
	id : int;					// 서버에서 부여한 Id값(테이블 값 아님)
	state : PetState;			// 펫 상태(소환/지원)
	grade : short;				// 펫 등급
	look : short;				// 펫 외형
	level : int;				// 펫 레벨
	exp : int;					// 펫 경험치
	stats : [PetStat];			// 펫이 보유한 스탯들
	remainDigestionTick : long; // 남은 소화시간(ms)
	isSafeGuarded : bool;		// 펫 잠금 여부
}

/// PET_CREATED_NOTIFY
table PetCreatedNotify
{
	pet : Pet;
}

/// PET_CREATED_WITH_EFFECT_NOTIFY
table PetCreatedWithEffectNotify
{
	pets : [Pet];
	shopProductId : int;	// 0 = shop에서 구매한 경우가 아닌경우
	isShopBonus : bool;		// shop에서 n회 이상구매로, 보너스로 펫을 획득한 경우
}

/// PET_DELETED_NOTIFY
table PetDeletedNotify
{
	petId : int;
}

/// PET_DATA_NOTIFY
table PetDataNotify
{
	pets : [Pet];
}

/// PET_FEED_REQUEST
table PetFeedRequest
{
	petId : int;
	itemId : int;	// 먹이아이템의 ItemID
}

/// PET_FEED_RESPONSE
table PetFeedResponse
{
	petId : int;
	err : ErrorCode;
	remainDigestionTick : long; // 남은 소화시간(ms)
}

/// PET_DIGESTION_COMPLETE_NOTIFY
table PetDigestionCompleteNotify
{
	petId : int;
}

// 펫 소환 요청/응답
/// PET_SUMMON_REQUEST
table PetSummonRequest
{
	petId : int;
}

/// PET_SUMMON_RESPONSE
table PetSummonResponse
{
	petId : int;
	err : ErrorCode;
}

/// PET_SUMMON_CANCEL_REQUEST
table PetSummonCancelRequest
{
	petId : int;
}

/// PET_SUMMON_CANCEL_RESPONSE
table PetSummonCancelResponse
{
	petId : int;
	err : ErrorCode;
	remainDigestionTick : long; // 남은 소화시간(ms)
}

/// PET_SUPPORT_REQUEST
table PetSupportRequest
{
	petId : int;
}

/// PET_SUPPORT_RESPONSE
table PetSupportResponse
{
	petId : int;
	err : ErrorCode;
}

/// PET_SUPPORT_CANCEL_REQUEST
table PetSupportCancelRequest
{
	petId : int;
}

/// PET_SUPPORT_CANCEL_RESPONSE
table PetSupportCancelResponse
{
	petId : int;
	err : ErrorCode;
	remainDigestionTick : long; // 남은 소화시간(ms)
}

table PetDigestionTime
{
	petId : int;
	remainDigestionTick : long; // 남은 소화시간(ms)
}

/// PET_REMAIN_DIGESTION_TIME_REQUEST
table PetRemainDigestionTimeRequest
{
}

/// PET_REMAIN_DIGESTION_TIME_RESPONSE
table PetRemainDigestionTimeResponse
{
	datas : [PetDigestionTime];
}

/// PET_FUSION_REQUEST
table PetFusionRequest
{
	sourcePetIds : [int]; 			// 합성할 Pet Id들
	selectedLookPetId : int;		// 랜덤을 눌렀을때는 -1값을 전달
	selectedSpecialStatPetId : int;
	selectedNormalStatPetId : int;
}

/// PET_FUSION_RESPONSE
table PetFusionResponse
{
	err : ErrorCode;
	newPet : Pet;		// 합성으로 새로 획득한 펫 정보
}

/// PET_LEVEL_EXP_UP_NOTIFY
table PetLevelExpUpNotify
{
	petId : int;		// 경험치/레벨이 변경된 펫 아이디
	level : int;		// 펫 레벨
	exp : int;			// 펫 경험치
	stats : [PetStat];	// 펫이 보유한 스탯들
}

/// PET_TOGGLE_SAFE_GUARD_REQUEST
table PetToggleSafeGuardRequest
{
	petId : int;
}

/// PET_TOGGLE_SAFE_GUARD_RESPONSE
table PetToggleSafeGuardResponse
{
	petId : int;
	err : ErrorCode;
	isSafeGuarded : bool;	// 결과로 세팅된 잠금상태(잠금:true/해제:false)
}

/////////////////////////////////////
// 펫 시스템 - 라피의 제단
/////////////////////////////////////

table AltarActiveSkill
{
	type : short;	// ePetAltar_ActiveType
	level : int;
}

table PetAltar
{
	level : int;					// 제단 레벨
	exp : int;						// 제단 경험치
	skills : [AltarActiveSkill];	// 보유한 재단 스킬들
}

/// PET_ALTAR_DATA_NOTIFY
table PetAltarDataNotify
{
	altar : PetAltar;
}

/// PET_ALTAR_LEVEL_EXP_NOTIFY
table PetAltarLevelExpNotify
{
	level : int;	// 제단 레벨
	exp : int;		// 제단 경험치
}

/// PET_ALTAR_POINT_NOTIFY
table PetAltarPointNotify
{
	point : int;
}

table AltarDonateItem
{
	itemId : int;
	count : int;
}

/// PET_ALTAR_DONATE_REQUEST
table PetAltarDonateRequest
{
	items : [AltarDonateItem];
}

/// PET_ALTAR_DONATE_RESPONSE
table PetAltarDonateResponse
{
	err : ErrorCode;
	acquirePoint : int;		// 획득한 포인트
	acquireExp : int;		// 획득한 경험치
}

/// PET_ALTAR_ACTIVE_SKILL_LEVEL_UP_REQUEST
table PetAltarActiveSkillLevelUpRequest
{
	skill : AltarActiveSkill;	// 레벨업할 액티브 스킬 정보
	costPetPoint : int;			// 소모할 포인트(검증용)
}

/// PET_ALTAR_ACTIVE_SKILL_LEVEL_UP_RESPONSE
table PetAltarActiveSKillLevelUpResponse
{
	err : ErrorCode;
	skill : AltarActiveSkill;	// 레벨업 결과가 반영된 스킬 정보
}

/////////////////////////////////////
// 펫 시스템 - 부화소
/////////////////////////////////////

enum PetHatcheryState : short
{
	PET_HATCHERY_STATE_SPAWN_READY,	// 부화 가능
	PET_HATCHERY_STATE_SPAWNED,		// 부화중
	PET_HATCHERY_STATE_HATCHED,		// 부화완료(펫 수령가능 단계)
	PET_HATCHERY_STATE_MAX
}

table PetHatchery
{
	hatcheryId : int;
	state : PetHatcheryState;
	hatchTimeUtc : long;		// 부화중일경우, 부화완료 예정시간
}

/// PET_HATCHERY_DATA_NOTIFY
table PetHatcheryDataNotify
{
	hatcherys : [PetHatchery];
}

/// PET_HATCHERY_SPAWN_REQUEST
table PetHatcherySpawnRequest
{
	hatcheryId : int;
}

/// PET_HATCHERY_SPAWN_RESPONSE
table PetHatcherySpawnResponse
{
	hatcheryId : int;
	err : ErrorCode; 
	hatchTimeUtc : long;	// 부화 예정시간
}

/// PET_HATCHERY_HATCH_REQUEST
table PetHatcheryHatchRequest
{
	hatcheryId : int;
}

/// PET_HATCHERY_HATCH_RESPONSE	
table PetHatcheryHatchResponse
{
	hatcheryId : int;
	err : ErrorCode;
}


/////////////////////////////////////
// 외형 장비 계승
/////////////////////////////////////

// 외형 장비 계승 결과 정보
table InheritCostumeResultInfo
{
	itemObjectId : ulong;		// 외형장비 item object id
	level : int;				// 레벨
	exp : int;					// 경험치
	grade : short;				// 등급
}

///- INHERIT_COSTUME_REQUEST --------------
table InheritCostumeRequest
{
	targetItemObjectId : ulong;		// 대상장비 item object id
	materialItemObjectId : ulong;	// 재료장비 item object id
}

///- INHERIT_COSTUME_RESPONSE --------------
table InheritCostumeResponse
{
	errorCode : int;

	target : InheritCostumeResultInfo (required);		// 대상 장비 정보
	material : InheritCostumeResultInfo (required);		// 재료 장비 정보
}


/////////////////////////////////////
// 천상석 변환
/////////////////////////////////////	

/// 천상석 변환 횟수 정보
table CrystalItemChangeCountInfo
{
	itemObjectId : ulong;			// 천상석 item object Id
	changeItemStackCount : int;		// 변환 횟수
}

/// CHANGE_CRYSTAL_ITEM_REQUEST
table ChangeCrystalItemRequest
{
	craftId : int;				// 제작 아이디
	itemObjectId : ulong;		// 변환할 천상석 item object id
}

/// CHANGE_CRYSTAL_ITEM_RESPONSE
table ChangeCrystalItemResponse
{
	errorCode : int;
	craftId : int;		// 제작 아이디

	clientLItem : ClientLItem;	// 변환된 천상석 아이템 정보
	changeCountInfo : CrystalItemChangeCountInfo;	// 변환 횟수 정보
}

/// CRYSTAL_ITEM_CHANGE_COUNT_NOTIFY
table CrystalItemChangeCountNotify
{
	datas : [CrystalItemChangeCountInfo] (required);	// 반환 횟수 정보
}

/// NOTICE_ELITE_MONSTER_KILL_NOTIFY
table NoticeEliteMonsterKillNotify
{
	realm : short;		// 막타 렐름
	monsterId : int;	// 몬스터 아이디
	pcClassType : int;	// 막타 PC 클래스
	pcName : string;	// 막타 캐릭명
}

/////////////////////////////////////
// 분쟁지역
/////////////////////////////////////	

/// CONFLICT_FIELD_MOVE_HOME_SERVER_REQUEST
table ConflictFieldMoveHomeServerRequest
{

}

/// CONFLICT_FIELD_MOVE_HOME_SERVER_RESPONSE
table ConflictFieldMoveHomeServerResponse
{
	err : ErrorCode;
}

/// KINGSROAD_QUERY_MAINSTREAM_QUEST_REQUEST
table KingsRoadMainStreamQuestRequest
{
	questId : int; 	
}

/// KINGSROAD_QUERY_MAINSTREAM_QUEST_RESPONSE 
table KingsRoadMainStreamQuestResponse
{
	questId : int;
	err : ErrorCode;
}

// 렐름별 점령전 점수
table RVRPointPerRealm
{
	realm : short;	// LeanType::BattleFieldRealmType;
	point : int;	// 포인트
}

/// RVR_MAIN_HUD_POINT_INFO_NOTIFY
table RVRMainHudPointInfoNotify
{
	points : [RVRPointPerRealm];
}

// 렐름별 점령지 게이지 정보
table RVROccupyingGaugePerRealm
{
	realm : short;	// LeanType::BattleFieldRealmType;
	gauge : int;
}

// 이 점령지(타워npc)를 렐름별로 얼마나 점유하고 있는지
table RVROccupyingGaugeInfo
{
	npcContentsId : int;
	curOccupiedRealm : short; 				// 현재 점령하고 있는 렐름(LeanType::BattleFieldRealmType)
	gauges : [RVROccupyingGaugePerRealm];	// 각 렐름별 현재 게이지 점수(2개 배열로 전달)
}

/// RVR_OCCUPYING_GAUGE_APPROXIMATE_INFO_NOTIFY
table RVROccupyingGaugeApproximateInfoNotify
{
	info : RVROccupyingGaugeInfo;
}

/// RVR_OCCUPYING_GAUGE_INFO_NOTIFY
table RVROccupyingGaugeInfoNotify
{
	info : RVROccupyingGaugeInfo;
}