//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////
///			Copyright 2018 (C) Bruno Xavier B. Leite
//////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include "IUSQLite.h"

#include "USQLite.h"
#include "USQLite_Shared.h"
#include "LoadScreen/USQLoadScreenStyle.h"

#if WITH_EDITOR
	#include "ISettingsModule.h"
	#include "ISettingsSection.h"
	#include "ISettingsContainer.h"
#endif

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#define LOCTEXT_NAMESPACE "Synaptech"

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

class FUSQLite : public IUSQLite {
public:
	virtual bool SupportsDynamicReloading() override {return true;}
	virtual void StartupModule() override {RegisterSettings(); FSQLoadScreenStyle::Initialize();}
	virtual void ShutdownModule() override {if(UObjectInitialized()){UnregisterSettings();} FSQLoadScreenStyle::Shutdown();}
	//
	bool SaveSettings();
	bool RegisterSettings();
	bool UnregisterSettings();
};

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

bool FUSQLite::SaveSettings() {
	#if WITH_EDITOR
		const auto &Settings = GetMutableDefault<USQLite_Settings>();
		Settings->SaveConfig();
		Settings->UpdateDefaultConfigFile();
		return true;
	#endif
	return false;
}

bool FUSQLite::RegisterSettings() {
	#if WITH_EDITOR
	if (ISettingsModule* SettingsModule = FModuleManager::GetModulePtr<ISettingsModule>("Settings")) {
		ISettingsContainerPtr SettingsContainer = SettingsModule->GetContainer("Project");
		SettingsContainer->DescribeCategory("Synaptech",LOCTEXT("SynaptechCategoryName","Synaptech"),
		LOCTEXT("SynaptechCategoryDescription","Configuration of Synaptech Systems."));
		//
		ISettingsSectionPtr SettingsSection = SettingsModule->RegisterSettings("Project","Synaptech","USQLiteSettings",
			LOCTEXT("USQLiteSettingsName","USQLite Settings"),
			LOCTEXT("USQLiteSettingsDescription","General settings for the USQLite Plugin"),
		GetMutableDefault<USQLite_Settings>());
		//
		if (SettingsSection.IsValid()) {
			SettingsSection->OnModified().BindRaw(this,&FUSQLite::SaveSettings);
	} return true;}
	#endif
	return false;
}

bool FUSQLite::UnregisterSettings() {
	#if WITH_EDITOR
	if (ISettingsModule* SettingsModule = FModuleManager::GetModulePtr<ISettingsModule>("Settings")) {
			SettingsModule->UnregisterSettings("Project","Synaptech","USQLiteSettings");
	} return true;
	#endif
	return false;
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef LOCTEXT_NAMESPACE

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

IMPLEMENT_GAME_MODULE(FUSQLite,USQLite);

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////