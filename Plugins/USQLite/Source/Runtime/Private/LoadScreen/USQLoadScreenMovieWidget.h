//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////
///			Copyright 2018 (C) Bruno Xavier B. Leite
//////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma once

#include "USQL.h"

#include "Runtime/Slate/Public/SlateBasics.h"
#include "Runtime/SlateCore/Public/Fonts/SlateFontInfo.h"
#include "Runtime/Slate/Public/Widgets/Layout/SScaleBox.h"
#include "Runtime/SlateCore/Public/Widgets/SCompoundWidget.h"

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

class SThrobber;
class SProgressBar;
class ASQLoadScreenHUD;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

class SQLoadScreenMovieWidget : public SCompoundWidget {
private:
	TSharedPtr<SProgressBar> ProgressBar;
	TSharedPtr<SThrobber> Throbber;
	//
	TWeakObjectPtr<ASQLoadScreenHUD> OwnerHUD;
	FSlateFontInfo FeedbackFont;
	ESQLThreadSafety TaskMode;
	//
	FLinearColor ProgressBarTint;
	float DPIScale = 1.f;
	FText FeedbackText;
	//
	float GetDPIScale() const;
	TOptional<float> GetWorkloadProgress() const;
public:
	SLATE_BEGIN_ARGS(SQLoadScreenMovieWidget)
	: _OwnerHUD(), _ProgressBarTint(), _FeedbackFont(), _TaskMode(), _FeedbackText()
	{}
		SLATE_ARGUMENT(TWeakObjectPtr<ASQLoadScreenHUD>,OwnerHUD);
		SLATE_ARGUMENT(FLinearColor,ProgressBarTint);
		SLATE_ARGUMENT(FSlateFontInfo,FeedbackFont);
		SLATE_ARGUMENT(ESQLThreadSafety,TaskMode);
		SLATE_ARGUMENT(FText,FeedbackText);
	SLATE_END_ARGS()
	//
	void Construct(const FArguments &InArgs);
	virtual void Tick(const FGeometry &AllottedGeometry, const double InCurrentTime, const float InDeltaTime) override;
};

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////