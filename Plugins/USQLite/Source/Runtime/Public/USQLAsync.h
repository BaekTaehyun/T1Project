//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////
///			Copyright 2018 (C) Bruno Xavier B. Leite
//////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma once

#include "USQLite.h"
#include "Runtime/Engine/Public/TimerManager.h"
#include "Runtime/Engine/Classes/Kismet/BlueprintAsyncActionBase.h"

#include "USQLAsync.generated.h"

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

DECLARE_DYNAMIC_MULTICAST_DELEGATE(FSQL_Thread);

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

UCLASS()
class USQLITE_API USQL_CheckThreadSafety : public UBlueprintAsyncActionBase {
	GENERATED_BODY()
private:
	UPROPERTY() FSQLite_ThreadChanged Callback;
	UPROPERTY() FTimerHandle TimerHandle;
	UPROPERTY() USQLite* Target;
	UPROPERTY() UWorld* World;
	UPROPERTY() float Timer;
	UPROPERTY() bool Repeat;
	//
	UFUNCTION() void Execute();
public:
	virtual void Activate() override;
	//
	//
	UPROPERTY(Category="USQL", BlueprintAssignable)
	FSQL_Thread ThreadSafe;
	//
	UPROPERTY(Category="USQL", BlueprintAssignable)
	FSQL_Thread AsyncLoading;
	//
	UPROPERTY(Category="USQL", BlueprintAssignable)
	FSQL_Thread AsyncSaving;
	//
	//
	UFUNCTION(Category="USQL", BlueprintCallable, meta = (BlueprintInternalUseOnly = "true", WorldContext = "Context", DisplayName="[DATABASE] Get Thread Safety", Keywords = "DB Thread Safety"))
	static USQL_CheckThreadSafety* SQL_CheckThreadSafety(UObject* Context, USQLite* Database, const float WaitForSeconds, bool Loop, const FSQLite_ThreadChanged &ThreadChangedCallback);
};

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////