//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////
///			Copyright 2018 (C) Bruno Xavier B. Leite
//////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include "USQLVersionBoxWidget.h"

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#define LOCTEXT_NAMESPACE "Synaptech"

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

SQLVersionBoxWidget::SQLVersionBoxWidget(){}

SQLVersionBoxWidget::~SQLVersionBoxWidget() {
	BoxItems.Empty();
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void SQLVersionBoxWidget::Construct(const FArguments &InArgs) {
	VersionList = InArgs._VersionList.Get();
	Version = InArgs._Version.Get();
	//
	check(VersionList->IsValidHandle());
	check(Version->IsValidHandle());
	//
	BoxItems.Empty(); uint32 V;
	VersionList->GetNumChildren(V);
	FString Current; Version->GetValue(Current);
	if (!Current.IsEmpty()) {BoxItems.Add(MakeShared<FString>(Current));}
	//
	for (uint32 I=0; I<V; I++) {
		auto _Item = VersionList->GetChildHandle(I).ToSharedRef();
		FString Item; _Item->GetValue(Item);
		if (!Item.Equals(Current)) {BoxItems.Add(MakeShared<FString>(Item));}
	}///
	//
	SAssignNew(ComboBox,SComboBox<TSharedPtr<FString>>)
	.OnSelectionChanged(this,&SQLVersionBoxWidget::OnComboBoxSelectionChanged)
	.OnGenerateWidget(this,&SQLVersionBoxWidget::OnGenerateComboBox)
	.OptionsSource(&BoxItems).IsEnabled(BoxItems.Num()>0)
	.Content()
	[
		SNew(STextBlock)
		.Text(this,&SQLVersionBoxWidget::GetComboBoxContent)
	];
	//
	ChildSlot.HAlign(HAlign_Fill).VAlign(VAlign_Fill)
	[
		ComboBox.ToSharedRef()
	];
}

TSharedRef<SWidget> SQLVersionBoxWidget::OnGenerateComboBox(TSharedPtr<FString> InItem) {
	return SNew(STextBlock).Text(FText::FromString(*InItem.Get()));
}

FText SQLVersionBoxWidget::GetComboBoxContent() const {
	FString Current; Version->GetValue(Current);
	if (Current.IsEmpty()) {return LOCTEXT("SQLComboBoxContent","DEFAULT");}
	//
	const bool HasSelectedItem = ComboBox.IsValid() && ComboBox->GetSelectedItem().IsValid();
	return (HasSelectedItem) ? FText::FromString(*ComboBox->GetSelectedItem().Get()) : FText::FromString(*Current);
}

void SQLVersionBoxWidget::OnComboBoxSelectionChanged(TSharedPtr<FString>NewSelection, ESelectInfo::Type SelectInfo) {
	if (!Version.IsValid()) {return;}
	//
	Version->SetValue(*NewSelection.Get());
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef LOCTEXT_NAMESPACE

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////